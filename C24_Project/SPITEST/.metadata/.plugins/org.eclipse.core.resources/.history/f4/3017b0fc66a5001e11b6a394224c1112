/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ssd1306.h"
#include "ssd1306_tests.h"
#include <stdio.h>
#include <string.h>
#include "fatfs_sd.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* USER CODE BEGIN PV */
	uint32_t count=1;
//uint8_t u8_revBuffer[7];
//DS3231_typedef DS3231_TimeNow;
//DS3231_typedef DS3231_TimeSet;
//	uint8_t a;
//	uint8_t time[7]={00,00,00,4,13,12,23};
uint8_t const amthanh[]={ 0x81, 0x7F, 0x7F, 0x80, 0x81, 0x7F, 0x81, 0x81, 0x7F, 0x81, 0x82, 0x7E, 0x82, 0x7C, 0x7F,
		0x81, 0x80, 0x85, 0x7F, 0x83, 0x81, 0x85, 0x80, 0x7F, 0x8C, 0x80, 0x77, 0x88, 0x7C, 0x7E, 0x7D,
		0x85, 0x7C, 0x84, 0x7F, 0x86, 0x82, 0x79, 0x80, 0x7E, 0x81, 0x85, 0x78, 0x94, 0x9B, 0x53, 0x71,
		0xB4, 0xA3, 0x63, 0x56, 0x81, 0x9A, 0x85, 0x86, 0x64, 0x2B, 0x51, 0x86, 0x5A, 0x47, 0x80, 0xB7,
		0xB0, 0x6D, 0x63, 0x91, 0x9F, 0xA3, 0x9B, 0x7A, 0x76, 0x6B, 0x71, 0xA2, 0x9F, 0x82, 0x71, 0x4B,
		0x5A, 0x90, 0xB7, 0xD2, 0xBC, 0xAD, 0xA3, 0x60, 0x46, 0x5E, 0x67, 0x85, 0x8C, 0x62, 0x4F, 0x57,
		0x6C, 0x7F, 0x86, 0x91, 0x87, 0x70, 0x81, 0x8B, 0x7A, 0x89, 0x91, 0x7D, 0x86, 0xA7, 0xC9, 0xD9,
		0xCF, 0xBB, 0x9D, 0x8A, 0x7C, 0x59, 0x48, 0x51, 0x51, 0x51, 0x4D, 0x59, 0x71, 0x80, 0x8B, 0x8B,
		0x85, 0x7D, 0x73, 0x67, 0x5B, 0x4C, 0x39, 0x2B, 0x28, 0x36, 0x48, 0x5B, 0x6F, 0x7C, 0x88, 0x90,
		0x9D, 0x9F, 0x9E, 0xA2, 0xA0, 0xA1, 0x9E, 0x98, 0x8D, 0x89, 0x82, 0x78, 0x7D, 0x84, 0x90, 0x93,
		0x9C, 0xA7, 0xB3, 0xC1, 0xD0, 0xD6, 0xD9, 0xD3, 0xCC, 0xBD, 0xB2, 0xA2, 0x8C, 0x7C, 0x73, 0x6D,
		0x66, 0x6C, 0x66, 0x5C, 0x5B, 0x59, 0x57, 0x51, 0x52, 0x47, 0x43, 0x44, 0x4A, 0x4C, 0x4E, 0x4D,
		0x46, 0x44, 0x4E, 0x64, 0x75, 0x8E, 0xA1, 0xA8, 0xAC, 0xB4, 0xB4, 0xAD, 0xA8, 0x99, 0x87, 0x7A,
		0x6D, 0x5D, 0x4F, 0x4B, 0x4F, 0x57, 0x68, 0x81, 0x93, 0xA1, 0xB5, 0xC2, 0xD0, 0xE1, 0xEC, 0xF2,
		0xEE, 0xEB, 0xDB, 0xCA, 0xB5, 0x96, 0x72, 0x55, 0x42, 0x2D, 0x28, 0x29, 0x2A, 0x37, 0x3E, 0x46,
		0x4F, 0x58, 0x5D, 0x65, 0x68, 0x6D, 0x78, 0x77, 0x6D, 0x6A, 0x65, 0x5F, 0x66, 0x68, 0x6B, 0x72,
		0x73, 0x72, 0x74, 0x7A, 0x7A, 0x83, 0x89, 0x8C, 0x89, 0x86, 0x83, 0x7B, 0x76, 0x77, 0x7D, 0x8A,
		0x9B, 0xA8, 0xB3, 0xC5, 0xCF, 0xD2, 0xD1, 0xCF, 0xD2, 0xC6, 0xC0, 0xB9, 0xAF, 0xA7, 0x9B, 0x88,
		0x72, 0x63, 0x54, 0x51, 0x56, 0x57, 0x60, 0x68, 0x6F, 0x74, 0x79, 0x7A, 0x79, 0x77, 0x6E, 0x63,
		0x5B, 0x46, 0x3C, 0x34, 0x2B, 0x32, 0x44, 0x55, 0x6A, 0x7A, 0x82, 0x8A, 0x92, 0x98, 0xA0, 0xA2,
		0xA9, 0xAA, 0xA2, 0x9F, 0x94, 0x8C, 0x7D, 0x71, 0x65, 0x5D, 0x65, 0x6E, 0x7D, 0x8C, 0xA2, 0xAB,
		0xB7, 0xC9, 0xCD, 0xD5, 0xD5, 0xDB, 0xD3, 0xCB, 0xBE, 0xA9, 0x93, 0x80, 0x6F, 0x64, 0x5A, 0x50,
		0x4C, 0x40, 0x3D, 0x3D, 0x3A, 0x41, 0x4C, 0x51, 0x51, 0x5A, 0x57, 0x51, 0x4E, 0x51, 0x4F, 0x58,
		0x6A, 0x79, 0x8A, 0x9A, 0xA3, 0xA8, 0xA5, 0xA0, 0x96, 0x8D, 0x86, 0x7B, 0x6D, 0x6A, 0x6D, 0x65,
		0x60, 0x64, 0x65, 0x6E, 0x7A, 0x8D, 0xA1, 0xB6, 0xC8, 0xD0, 0xDC, 0xEA, 0xEF, 0xEF, 0xEE, 0xE3,
		0xCF, 0xB9, 0x9D, 0x7D, 0x61, 0x4C, 0x44, 0x3F, 0x3D, 0x46, 0x47, 0x48, 0x50, 0x54, 0x55, 0x66,
		0x76, 0x6E, 0x76, 0x7C, 0x75, 0x6C, 0x6B, 0x60, 0x53, 0x51, 0x4E, 0x55, 0x5C, 0x67, 0x72, 0x75,
		0x83, 0x89, 0x85, 0x8A, 0x91, 0x8E, 0x87, 0x8C, 0x8D, 0x86, 0x86, 0x85, 0x86, 0x8C, 0x9D, 0xA4,
		0xA8, 0xAE, 0xAF, 0xA9, 0xAB, 0xB8, 0xB7, 0xBB, 0xC3, 0xC2, 0xB8, 0xAC, 0x9F, 0x8E, 0x79, 0x6C,
		0x66, 0x61, 0x68, 0x6D, 0x68, 0x6A, 0x70, 0x6B, 0x62, 0x67, 0x5B, 0x50, 0x4B, 0x46, 0x3D, 0x3B,
		0x3C, 0x38, 0x3C, 0x40, 0x53, 0x63, 0x70, 0x88, 0x92, 0x9A, 0xA5, 0xAE, 0xA9, 0xB0, 0xB0, 0xA6,
		0x99, 0x91, 0x80, 0x6D, 0x62, 0x57, 0x52, 0x5C, 0x6F, 0x7E, 0x8D, 0x9E, 0xA7, 0xAE, 0xBB, 0xCD,
		0xD3, 0xDE, 0xE7, 0xE5, 0xE0, 0xD5, 0xC6, 0xA9, 0x90, 0x7C, 0x62, 0x4D, 0x49, 0x43, 0x34, 0x38,
		0x3C, 0x39, 0x46, 0x51, 0x52, 0x52, 0x59, 0x5C, 0x5E, 0x60, 0x61, 0x60, 0x62, 0x70, 0x7E, 0x83,
		0x91, 0x98, 0x92, 0x88, 0x87, 0x7D, 0x78, 0x7C, 0x7A, 0x74, 0x78, 0x77, 0x73, 0x6E, 0x69, 0x6B,
		0x6F, 0x7E, 0x92, 0x9F, 0xAF, 0xC0, 0xCC, 0xD0, 0xDB, 0xDD, 0xDB, 0xD2, 0xCA, 0xC2, 0xAD, 0xA1,
		0x90, 0x78, 0x66, 0x58, 0x50, 0x4B, 0x51, 0x4E, 0x4E, 0x59, 0x5C, 0x63, 0x68, 0x73, 0x78, 0x79,
		0x75, 0x72, 0x70, 0x5B, 0x4E, 0x40, 0x37, 0x41, 0x4A, 0x57, 0x67, 0x76, 0x79, 0x7F, 0x89, 0x8B,
		0x8D, 0x91, 0x99, 0x9D, 0x9D, 0x9F, 0x9C, 0x98, 0x8E, 0x85, 0x7F, 0x81, 0x85, 0x84, 0x83, 0x8E,
		0x95, 0x9D, 0xAA, 0xB7, 0xBC, 0xBE, 0xC6, 0xC6, 0xC0, 0xB7, 0xAC, 0x9A, 0x8D, 0x80, 0x75, 0x76,
		0x76, 0x6F, 0x64, 0x5E, 0x57, 0x4F, 0x46, 0x44, 0x42, 0x41, 0x44, 0x49, 0x4A, 0x43, 0x46, 0x45,
		0x4A, 0x5D, 0x6C, 0x7B, 0x8F, 0x9E, 0x9E, 0xA8, 0xB0, 0xAE, 0xAA, 0x9A, 0x98, 0x88, 0x7D, 0x74,
		0x6B, 0x61, 0x59, 0x5B, 0x5B, 0x68, 0x7B, 0x82, 0x92, 0xA3, 0xB3, 0xBE, 0xD0, 0xDA, 0xDF, 0xE5,
		0xE8, 0xE9, 0xDA, 0xC8, 0xAC, 0x89, 0x73, 0x5C, 0x4D, 0x45, 0x44, 0x40, 0x3F, 0x41, 0x46, 0x48,
		0x48, 0x55, 0x59, 0x5B, 0x64, 0x70, 0x6D, 0x6D, 0x6E, 0x6A, 0x6E, 0x77, 0x77, 0x74, 0x7B, 0x7C,
		0x7A, 0x7C, 0x7C, 0x81, 0x7B, 0x7E, 0x7C, 0x78, 0x7C, 0x7F, 0x7A, 0x74, 0x7C, 0x7C, 0x84, 0x95,
		0xA1, 0xA9, 0xB1, 0xBF, 0xC0, 0xBD, 0xBE, 0xBC, 0xB5, 0xB7, 0xB9, 0xB2, 0xA9, 0x9F, 0x8D, 0x79,
		0x6D, 0x69, 0x63, 0x5E, 0x64, 0x64, 0x63, 0x6B, 0x73, 0x6F, 0x6F, 0x6D, 0x65, 0x5E, 0x5F, 0x52,
		0x44, 0x42, 0x3E, 0x3C, 0x45, 0x51, 0x5B, 0x64, 0x72, 0x7F, 0x87, 0x90, 0xA0, 0xA0, 0x9C, 0xA4,
		0xA7, 0xA1, 0xA2, 0xA1, 0x8E, 0x81, 0x7B, 0x6B, 0x66, 0x6C, 0x71, 0x78, 0x85, 0x93, 0x9E, 0xA1,
		0xAC, 0xB6, 0xBB, 0xC6, 0xD2, 0xCE, 0xCB, 0xC8, 0xB7, 0xAA, 0x9B, 0x8C, 0x78, 0x6A, 0x60, 0x4C,
		0x44, 0x42, 0x41, 0x3C, 0x3E, 0x42, 0x44, 0x4D, 0x54, 0x54, 0x54, 0x57, 0x5A, 0x5E, 0x6A, 0x75,
		0x80, 0x8B, 0x99, 0xA4, 0x9F, 0x9C, 0x9A, 0x8C, 0x82, 0x7F, 0x78, 0x75, 0x76, 0x6E, 0x66, 0x67,
		0x65, 0x67, 0x6D, 0x7B, 0x87, 0x95, 0xA5, 0xB8, 0xC6, 0xCA, 0xD6, 0xDE, 0xE0, 0xE1, 0xD8, 0xC7,
		0xB8, 0xA3, 0x86, 0x72, 0x67, 0x5D, 0x4B, 0x47, 0x49, 0x47, 0x47, 0x4E, 0x53, 0x54, 0x5F, 0x64,
		0x6B, 0x74, 0x7A, 0x7A, 0x75, 0x73, 0x6C, 0x62, 0x5E, 0x63, 0x62, 0x60, 0x6F, 0x78, 0x77, 0x7A,
		0x7B, 0x77, 0x7C, 0x83, 0x82, 0x88, 0x8E, 0x8D, 0x8C, 0x8D, 0x90, 0x92, 0x92, 0x97, 0x9C, 0x98,
		0x9B, 0xA3, 0xA2, 0x9F, 0xA6, 0xA9, 0xAC, 0xB5, 0xB6, 0xAF, 0xA7, 0x9F, 0x94, 0x8B, 0x84, 0x7C,
		0x75, 0x70, 0x72, 0x73, 0x6E, 0x6D, 0x66, 0x5C, 0x55, 0x50, 0x48, 0x48, 0x4B, 0x48, 0x45, 0x46,
		0x4D, 0x4B, 0x52, 0x65, 0x6D, 0x79, 0x8E, 0x96, 0x9A, 0xA4, 0xA7, 0xA4, 0xA6, 0xA8, 0x9C, 0x90,
		0x83, 0x79, 0x6D, 0x68, 0x69, 0x66, 0x65, 0x6F, 0x7C, 0x80, 0x8E, 0xA1, 0xA1, 0xAD, 0xBD, 0xC6,
		0xCE, 0xD7, 0xDA, 0xD4, 0xCC, 0xC0, 0xAE, 0x98, 0x85, 0x6F, 0x58, 0x4F, 0x49, 0x43, 0x3E, 0x3E,
		0x3E, 0x3E, 0x45, 0x4F, 0x50, 0x5B, 0x64, 0x69, 0x6A, 0x70, 0x76, 0x77, 0x7F, 0x85, 0x89, 0x8A,
		0x90, 0x89, 0x82, 0x7E, 0x7B, 0x78, 0x75, 0x75, 0x77, 0x70, 0x70, 0x76, 0x71, 0x73, 0x7E, 0x82,
		0x85, 0x95, 0xA0, 0xA6, 0xB7, 0xBE, 0xBD, 0xC0, 0xC4, 0xBF, 0xBC, 0xBB, 0xB2, 0xA9, 0x9F, 0x94,
		0x84, 0x73, 0x6B, 0x61, 0x58, 0x56, 0x5C, 0x5B, 0x5C, 0x61, 0x62, 0x63, 0x6A, 0x73, 0x6F, 0x6F,
		0x6B, 0x62, 0x5C, 0x5F, 0x56, 0x51, 0x59, 0x61, 0x66, 0x6E, 0x77, 0x7A, 0x80, 0x84, 0x87, 0x8E,
		0x92, 0x95, 0x94, 0x93, 0x97, 0x97, 0x8F, 0x8D, 0x8A, 0x7E, 0x7B, 0x83, 0x83, 0x86, 0x8F, 0x92,
		0x99, 0xA1, 0xA6, 0xAB, 0xB4, 0xB8, 0xB9, 0xB6, 0xB1, 0xB3, 0xA5, 0x94, 0x8D, 0x86, 0x79, 0x72,
		0x6F, 0x5C, 0x53, 0x4D, 0x44, 0x42, 0x46, 0x47, 0x46, 0x4E, 0x50, 0x4D, 0x53, 0x5E, 0x63, 0x69,
		0x72, 0x7D, 0x87, 0x91, 0x97, 0x9F, 0x9F, 0x9C, 0x9A, 0x90, 0x89, 0x85, 0x7C, 0x75, 0x7A, 0x73,
		0x69, 0x6C, 0x6D, 0x6A, 0x73, 0x7D, 0x86, 0x95, 0x9E, 0xA4, 0xB2, 0xBF, 0xCB, 0xD2, 0xD4, 0xD5,
		0xD2, 0xC2, 0xB4, 0xA5, 0x8D, 0x78, 0x6A, 0x5E, 0x52, 0x4E, 0x4A, 0x44, 0x45, 0x45, 0x46, 0x4E,
		0x58, 0x5C, 0x60, 0x69, 0x6F, 0x75, 0x79, 0x7A, 0x7B, 0x7A, 0x79, 0x7B, 0x7D, 0x7A, 0x7B, 0x7D,
		0x74, 0x78, 0x79, 0x73, 0x74, 0x7A, 0x75, 0x78, 0x85, 0x83, 0x84, 0x89, 0x8B, 0x90, 0x9A, 0x9F,
		0xA4, 0xA6, 0xA6, 0xA8, 0xA7, 0xA5, 0xAB, 0xAE, 0xA8, 0xAB, 0xA9, 0x9E, 0x9B, 0x96, 0x85, 0x7B,
		0x7A, 0x71, 0x6C, 0x6D, 0x6A, 0x65, 0x65, 0x68, 0x65, 0x64, 0x63, 0x5D, 0x58, 0x59, 0x57, 0x56,
		0x55, 0x57, 0x5A, 0x59, 0x63, 0x6F, 0x75, 0x7B, 0x87, 0x8B, 0x8B, 0x96, 0x99, 0x96, 0x98, 0x9B,
		0x91, 0x91, 0x8F, 0x83, 0x7F, 0x7A, 0x78, 0x75, 0x78, 0x80, 0x85, 0x83, 0x88, 0x93, 0x96, 0xA1,
		0xB0, 0xB1, 0xB9, 0xC3, 0xC3, 0xBE, 0xBA, 0xB2, 0xA1, 0x95, 0x88, 0x78, 0x68, 0x5F, 0x54, 0x47,
		0x44, 0x43, 0x42, 0x43, 0x48, 0x49, 0x4A, 0x54, 0x5F, 0x63, 0x68, 0x72, 0x77, 0x7B, 0x88, 0x91,
		0x92, 0x94, 0x97, 0x8C, 0x88, 0x8C, 0x82, 0x7B, 0x7B, 0x78, 0x73, 0x75, 0x74, 0x74, 0x72, 0x78,
		0x81, 0x83, 0x8C, 0x97, 0x9F, 0xA1, 0xAD, 0xB5, 0xB4, 0xBD, 0xC2, 0xB9, 0xB5, 0xB6, 0xAB, 0xA1,
		0x9C, 0x8F, 0x80, 0x76, 0x70, 0x66, 0x5A, 0x57, 0x54, 0x51, 0x53, 0x58, 0x58, 0x5F, 0x68, 0x69,
		0x66, 0x6F, 0x74, 0x6D, 0x69, 0x6B, 0x6A, 0x6B, 0x71, 0x73, 0x73, 0x77, 0x79, 0x74, 0x78, 0x7F,
		0x7B, 0x7A, 0x80, 0x84, 0x84, 0x88, 0x8F, 0x91, 0x8E, 0x91, 0x95, 0x94, 0x95, 0x98, 0x8F, 0x8F,
		0x9A, 0x99, 0x97, 0xA0, 0xA3, 0x9E, 0xA4, 0xA9, 0xA6, 0xA3, 0xA2, 0x9A, 0x93, 0x8D, 0x89, 0x81,
		0x7A, 0x76, 0x69, 0x60, 0x60, 0x5B, 0x4F, 0x4C, 0x50, 0x4D, 0x4C, 0x51, 0x54, 0x52, 0x5A, 0x62,
		0x64, 0x6E, 0x7E, 0x85, 0x87, 0x8F, 0x94, 0x93, 0x98, 0x98, 0x93, 0x8B, 0x8B, 0x89, 0x80, 0x7C,
		0x7C, 0x77, 0x73, 0x79, 0x7A, 0x76, 0x80, 0x84, 0x83, 0x8C, 0x99, 0xA1, 0xA9, 0xB5, 0xB9, 0xBF,
		0xC4, 0xC6, 0xBF, 0xB3, 0xAC, 0x9F, 0x8B, 0x7F, 0x78, 0x67, 0x59, 0x50, 0x48, 0x44, 0x45, 0x47,
		0x45, 0x4B, 0x4F, 0x55, 0x61, 0x6B, 0x6F, 0x6E, 0x75, 0x7D, 0x82, 0x86, 0x89, 0x8A, 0x86, 0x85,
		0x80, 0x7C, 0x7A, 0x79, 0x75, 0x71, 0x73, 0x74, 0x72, 0x76, 0x7D, 0x7E, 0x82, 0x8F, 0x96, 0x99,
		0xA0, 0xA2, 0xA5, 0xA9, 0xAB, 0xA8, 0xAA, 0xAD, 0xAC, 0xAB, 0xA9, 0xA8, 0x9F, 0x95, 0x8F, 0x86};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI2_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //16Khz timer
  	{
  	   TIM2->CCR1=amthanh[count++];
  	   if(count>=sizeof(amthanh)) count=1;
  	}
//void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
//{
//
//		  UNUSED(hi2c);
//		if (hi2c->Instance == I2C1)
//		{
//			DS3231_TimeNow.sec=BCD2DEC(u8_revBuffer[0]);
//			DS3231_TimeNow.min=BCD2DEC(u8_revBuffer[1]);
//			DS3231_TimeNow.hours=BCD2DEC(u8_revBuffer[2]);
//			DS3231_TimeNow.date=BCD2DEC(u8_revBuffer[3]);
//			DS3231_TimeNow.day=BCD2DEC(u8_revBuffer[4]);
//			DS3231_TimeNow.month=BCD2DEC(u8_revBuffer[5]);
//			DS3231_TimeNow.year=BCD2DEC(u8_revBuffer[6]);
//		}
//
//}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//FATFS fs;  // file system
//FIL fil; // File
//FILINFO fno;
//FRESULT fresult;  // result
//char buffer[1024];
//UINT br, bw;  // File read/write count

/**** capacity related *****/
//FATFS *pfs;
//DWORD fre_clust;
//uint32_t total, free_space;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_I2C1_Init();
  MX_SPI2_Init();
  MX_FATFS_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
//  a=stactusTX();
//  settime(time,a);

//  fresult = f_mount(&fs, "", 0);
//  if (fresult != FR_OK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
//  else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	/* Check free space */
//	f_getfree("", &fre_clust, &pfs);
//
//	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
//
//	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
//
//  	/* Open file to write/ create a file if it doesn't exist */
//      fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
//
//  	/* Writing text */
//  	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);

  	/* Close file */
//  	fresult = f_close(&fil);
//  	fresult = f_open(&fil, "ff1.txt", FA_READ );
//  	f_gets(buffer,fil.fsize,&fil);
//  	fresult = f_close(&fil);
  	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1); //cho phep PWM (gia lap DAC)
  	HAL_TIM_Base_Start_IT(&htim3);            //cho phep ngat TIM3 hoat dong



  /* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  HAL_I2C_Mem_Read_IT(&hi2c1,a,0x00, I2C_MEMADD_SIZE_8BIT, u8_revBuffer,7  );
//	  HAL_Delay(1000);

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 255;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 4;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 125;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, dc_Pin|rs_Pin|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : cs_Pin */
  GPIO_InitStruct.Pin = cs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(cs_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : dc_Pin rs_Pin */
  GPIO_InitStruct.Pin = dc_Pin|rs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

uint8_t BCD2DEC(uint8_t date)
{
	return (date>>4)*10+ (date&0x0f);
}

uint8_t DEC2BCD(uint8_t date)
{
	return (date/10)<<4|(date%10);
}

uint8_t stactusTX(){
	uint8_t id;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
  for (uint8_t i=0; i<255; i++)
  {
	  if (HAL_I2C_IsDeviceReady(&hi2c1, i,1 ,10)==HAL_OK)
	  {
		  id =i;
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

	  }
  }
  return id;
}
void settime(uint8_t *TX, uint8_t a){
//			uint8_t u8_tranBuffer[7];
			TX[0]=DEC2BCD(TX[0]);//s
			TX[1]=DEC2BCD(TX[1]);//min
			TX[2]=DEC2BCD(TX[2]);//hour
			TX[3]=DEC2BCD(TX[3]);//thu
			TX[4]=DEC2BCD(TX[4]);//ngay
			TX[5]=DEC2BCD(TX[5]);//thang
			TX[6]=DEC2BCD(TX[6]);//nam
	  	    HAL_I2C_Mem_Write_IT(&hi2c1,a,0x00, 0x00000001U, TX,7);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
