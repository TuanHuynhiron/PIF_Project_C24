
LTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a854  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016cc  0800a960  0800a960  0001a960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c02c  0800c02c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800c02c  0800c02c  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c02c  0800c02c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c02c  0800c02c  0001c02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c030  0800c030  0001c030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800c034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a8  200000ac  0800c0e0  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001254  0800c0e0  00021254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151cf  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003198  00000000  00000000  000352a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00038440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  00039820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000457b  00000000  00000000  0003aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018dfd  00000000  00000000  0003f013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f05f  00000000  00000000  00057e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6e6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ec  00000000  00000000  000e6ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a948 	.word	0x0800a948

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	0800a948 	.word	0x0800a948

0800014c <HAL_GPIO_EXTI_Callback>:
static void MX_I2C2_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(GPIO_Pin);
    /* NOTE: This function Should not be modified, when the callback is needed,
             the HAL_GPIO_EXTI_Callback could be implemented in the user file
     */
    min=HAL_GetTick();
 8000156:	f003 f8b3 	bl	80032c0 <HAL_GetTick>
 800015a:	4603      	mov	r3, r0
 800015c:	4a3d      	ldr	r2, [pc, #244]	; (8000254 <HAL_GPIO_EXTI_Callback+0x108>)
 800015e:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin== GPIO_PIN_1)
 8000160:	88fb      	ldrh	r3, [r7, #6]
 8000162:	2b02      	cmp	r3, #2
 8000164:	d11c      	bne.n	80001a0 <HAL_GPIO_EXTI_Callback+0x54>
  	      {
    	if (mode==4 && controdoc==1) mode=0;
 8000166:	4b3c      	ldr	r3, [pc, #240]	; (8000258 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	b2db      	uxtb	r3, r3
 800016c:	2b04      	cmp	r3, #4
 800016e:	d106      	bne.n	800017e <HAL_GPIO_EXTI_Callback+0x32>
 8000170:	4b3a      	ldr	r3, [pc, #232]	; (800025c <HAL_GPIO_EXTI_Callback+0x110>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	2b01      	cmp	r3, #1
 8000176:	d102      	bne.n	800017e <HAL_GPIO_EXTI_Callback+0x32>
 8000178:	4b37      	ldr	r3, [pc, #220]	; (8000258 <HAL_GPIO_EXTI_Callback+0x10c>)
 800017a:	2200      	movs	r2, #0
 800017c:	701a      	strb	r2, [r3, #0]
    	if (mode!=0 && controdoc!=0) ok=1;
 800017e:	4b36      	ldr	r3, [pc, #216]	; (8000258 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	b2db      	uxtb	r3, r3
 8000184:	2b00      	cmp	r3, #0
 8000186:	d007      	beq.n	8000198 <HAL_GPIO_EXTI_Callback+0x4c>
 8000188:	4b34      	ldr	r3, [pc, #208]	; (800025c <HAL_GPIO_EXTI_Callback+0x110>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d003      	beq.n	8000198 <HAL_GPIO_EXTI_Callback+0x4c>
 8000190:	4b33      	ldr	r3, [pc, #204]	; (8000260 <HAL_GPIO_EXTI_Callback+0x114>)
 8000192:	2201      	movs	r2, #1
 8000194:	701a      	strb	r2, [r3, #0]
 8000196:	e059      	b.n	800024c <HAL_GPIO_EXTI_Callback+0x100>
    	else mode=0;
 8000198:	4b2f      	ldr	r3, [pc, #188]	; (8000258 <HAL_GPIO_EXTI_Callback+0x10c>)
 800019a:	2200      	movs	r2, #0
 800019c:	701a      	strb	r2, [r3, #0]
  		duoi=1;
  		dung=1;
  	  	}
//    while(HAL_GetTick()-min<20);

  }
 800019e:	e055      	b.n	800024c <HAL_GPIO_EXTI_Callback+0x100>
  	else if(GPIO_Pin == GPIO_PIN_2)
 80001a0:	88fb      	ldrh	r3, [r7, #6]
 80001a2:	2b04      	cmp	r3, #4
 80001a4:	d11d      	bne.n	80001e2 <HAL_GPIO_EXTI_Callback+0x96>
  		if (mode==1 && controdoc!=0) trai=1;
 80001a6:	4b2c      	ldr	r3, [pc, #176]	; (8000258 <HAL_GPIO_EXTI_Callback+0x10c>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	b2db      	uxtb	r3, r3
 80001ac:	2b01      	cmp	r3, #1
 80001ae:	d107      	bne.n	80001c0 <HAL_GPIO_EXTI_Callback+0x74>
 80001b0:	4b2a      	ldr	r3, [pc, #168]	; (800025c <HAL_GPIO_EXTI_Callback+0x110>)
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <HAL_GPIO_EXTI_Callback+0x74>
 80001b8:	4b2a      	ldr	r3, [pc, #168]	; (8000264 <HAL_GPIO_EXTI_Callback+0x118>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	701a      	strb	r2, [r3, #0]
 80001be:	e045      	b.n	800024c <HAL_GPIO_EXTI_Callback+0x100>
  		else if (mode==4 && controdoc!=0) trai=1;
 80001c0:	4b25      	ldr	r3, [pc, #148]	; (8000258 <HAL_GPIO_EXTI_Callback+0x10c>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	2b04      	cmp	r3, #4
 80001c8:	d107      	bne.n	80001da <HAL_GPIO_EXTI_Callback+0x8e>
 80001ca:	4b24      	ldr	r3, [pc, #144]	; (800025c <HAL_GPIO_EXTI_Callback+0x110>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d003      	beq.n	80001da <HAL_GPIO_EXTI_Callback+0x8e>
 80001d2:	4b24      	ldr	r3, [pc, #144]	; (8000264 <HAL_GPIO_EXTI_Callback+0x118>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
 80001d8:	e038      	b.n	800024c <HAL_GPIO_EXTI_Callback+0x100>
  		else mode=1;
 80001da:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <HAL_GPIO_EXTI_Callback+0x10c>)
 80001dc:	2201      	movs	r2, #1
 80001de:	701a      	strb	r2, [r3, #0]
  }
 80001e0:	e034      	b.n	800024c <HAL_GPIO_EXTI_Callback+0x100>
  	else if(GPIO_Pin == GPIO_PIN_3)
 80001e2:	88fb      	ldrh	r3, [r7, #6]
 80001e4:	2b08      	cmp	r3, #8
 80001e6:	d11d      	bne.n	8000224 <HAL_GPIO_EXTI_Callback+0xd8>
  		if (mode==1 && controdoc!=0) phai=1;
 80001e8:	4b1b      	ldr	r3, [pc, #108]	; (8000258 <HAL_GPIO_EXTI_Callback+0x10c>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d107      	bne.n	8000202 <HAL_GPIO_EXTI_Callback+0xb6>
 80001f2:	4b1a      	ldr	r3, [pc, #104]	; (800025c <HAL_GPIO_EXTI_Callback+0x110>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d003      	beq.n	8000202 <HAL_GPIO_EXTI_Callback+0xb6>
 80001fa:	4b1b      	ldr	r3, [pc, #108]	; (8000268 <HAL_GPIO_EXTI_Callback+0x11c>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]
 8000200:	e024      	b.n	800024c <HAL_GPIO_EXTI_Callback+0x100>
  		else if (mode==4 && controdoc!=0) phai=1;
 8000202:	4b15      	ldr	r3, [pc, #84]	; (8000258 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	b2db      	uxtb	r3, r3
 8000208:	2b04      	cmp	r3, #4
 800020a:	d107      	bne.n	800021c <HAL_GPIO_EXTI_Callback+0xd0>
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <HAL_GPIO_EXTI_Callback+0x110>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d003      	beq.n	800021c <HAL_GPIO_EXTI_Callback+0xd0>
 8000214:	4b14      	ldr	r3, [pc, #80]	; (8000268 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000216:	2201      	movs	r2, #1
 8000218:	701a      	strb	r2, [r3, #0]
 800021a:	e017      	b.n	800024c <HAL_GPIO_EXTI_Callback+0x100>
  		else mode=2;
 800021c:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <HAL_GPIO_EXTI_Callback+0x10c>)
 800021e:	2202      	movs	r2, #2
 8000220:	701a      	strb	r2, [r3, #0]
  }
 8000222:	e013      	b.n	800024c <HAL_GPIO_EXTI_Callback+0x100>
  	else if(GPIO_Pin == GPIO_PIN_5){
 8000224:	88fb      	ldrh	r3, [r7, #6]
 8000226:	2b20      	cmp	r3, #32
 8000228:	d106      	bne.n	8000238 <HAL_GPIO_EXTI_Callback+0xec>
  		tren=1;
 800022a:	4b10      	ldr	r3, [pc, #64]	; (800026c <HAL_GPIO_EXTI_Callback+0x120>)
 800022c:	2201      	movs	r2, #1
 800022e:	701a      	strb	r2, [r3, #0]
  		dung=1;
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <HAL_GPIO_EXTI_Callback+0x124>)
 8000232:	2201      	movs	r2, #1
 8000234:	701a      	strb	r2, [r3, #0]
  }
 8000236:	e009      	b.n	800024c <HAL_GPIO_EXTI_Callback+0x100>
  	else if(GPIO_Pin == GPIO_PIN_4){
 8000238:	88fb      	ldrh	r3, [r7, #6]
 800023a:	2b10      	cmp	r3, #16
 800023c:	d106      	bne.n	800024c <HAL_GPIO_EXTI_Callback+0x100>
  		duoi=1;
 800023e:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <HAL_GPIO_EXTI_Callback+0x128>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
  		dung=1;
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <HAL_GPIO_EXTI_Callback+0x124>)
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
  }
 800024a:	e7ff      	b.n	800024c <HAL_GPIO_EXTI_Callback+0x100>
 800024c:	bf00      	nop
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	2000033c 	.word	0x2000033c
 8000258:	20000343 	.word	0x20000343
 800025c:	20000344 	.word	0x20000344
 8000260:	20000347 	.word	0x20000347
 8000264:	20000348 	.word	0x20000348
 8000268:	20000349 	.word	0x20000349
 800026c:	2000034a 	.word	0x2000034a
 8000270:	20000345 	.word	0x20000345
 8000274:	2000034b 	.word	0x2000034b

08000278 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //16Khz timer
  	{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]

  	   TIM2->CCR1=amthanh[cnt++];
 8000280:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	490c      	ldr	r1, [pc, #48]	; (80002b8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000288:	600a      	str	r2, [r1, #0]
 800028a:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <HAL_TIM_PeriodElapsedCallback+0x44>)
 800028c:	5cd2      	ldrb	r2, [r2, r3]
 800028e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
  	   if(cnt>=512) {
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800029c:	d308      	bcc.n	80002b0 <HAL_TIM_PeriodElapsedCallback+0x38>
  		 cnt=0;
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
  		HAL_TIM_Base_Stop_IT(&htim3);
 80002a4:	4806      	ldr	r0, [pc, #24]	; (80002c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80002a6:	f006 fd6b 	bl	8006d80 <HAL_TIM_Base_Stop_IT>
  		ngat=1;
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
  	   }
  	}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000060 	.word	0x20000060
 80002bc:	2000075c 	.word	0x2000075c
 80002c0:	20000268 	.word	0x20000268
 80002c4:	20000758 	.word	0x20000758

080002c8 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]

		  UNUSED(hi2c);
		if (hi2c->Instance == I2C1)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a22      	ldr	r2, [pc, #136]	; (8000360 <HAL_I2C_MemRxCpltCallback+0x98>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d13e      	bne.n	8000358 <HAL_I2C_MemRxCpltCallback+0x90>
		{
			DS3231_TimeNow.sec=BCD2DEC(u8_revBuffer[0]);
 80002da:	4b22      	ldr	r3, [pc, #136]	; (8000364 <HAL_I2C_MemRxCpltCallback+0x9c>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 ff1c 	bl	800211c <BCD2DEC>
 80002e4:	4603      	mov	r3, r0
 80002e6:	461a      	mov	r2, r3
 80002e8:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <HAL_I2C_MemRxCpltCallback+0xa0>)
 80002ea:	709a      	strb	r2, [r3, #2]
			DS3231_TimeNow.min=BCD2DEC(u8_revBuffer[1]);
 80002ec:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <HAL_I2C_MemRxCpltCallback+0x9c>)
 80002ee:	785b      	ldrb	r3, [r3, #1]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 ff13 	bl	800211c <BCD2DEC>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <HAL_I2C_MemRxCpltCallback+0xa0>)
 80002fc:	705a      	strb	r2, [r3, #1]
			DS3231_TimeNow.hours=BCD2DEC(u8_revBuffer[2]);
 80002fe:	4b19      	ldr	r3, [pc, #100]	; (8000364 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8000300:	789b      	ldrb	r3, [r3, #2]
 8000302:	4618      	mov	r0, r3
 8000304:	f001 ff0a 	bl	800211c <BCD2DEC>
 8000308:	4603      	mov	r3, r0
 800030a:	461a      	mov	r2, r3
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <HAL_I2C_MemRxCpltCallback+0xa0>)
 800030e:	701a      	strb	r2, [r3, #0]
			DS3231_TimeNow.date=BCD2DEC(u8_revBuffer[3]);
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8000312:	78db      	ldrb	r3, [r3, #3]
 8000314:	4618      	mov	r0, r3
 8000316:	f001 ff01 	bl	800211c <BCD2DEC>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8000320:	70da      	strb	r2, [r3, #3]
			DS3231_TimeNow.day=BCD2DEC(u8_revBuffer[4]);
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8000324:	791b      	ldrb	r3, [r3, #4]
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fef8 	bl	800211c <BCD2DEC>
 800032c:	4603      	mov	r3, r0
 800032e:	461a      	mov	r2, r3
 8000330:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8000332:	711a      	strb	r2, [r3, #4]
			DS3231_TimeNow.month=BCD2DEC(u8_revBuffer[5]);
 8000334:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8000336:	795b      	ldrb	r3, [r3, #5]
 8000338:	4618      	mov	r0, r3
 800033a:	f001 feef 	bl	800211c <BCD2DEC>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8000344:	715a      	strb	r2, [r3, #5]
			DS3231_TimeNow.year=BCD2DEC(u8_revBuffer[6]);
 8000346:	4b07      	ldr	r3, [pc, #28]	; (8000364 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8000348:	799b      	ldrb	r3, [r3, #6]
 800034a:	4618      	mov	r0, r3
 800034c:	f001 fee6 	bl	800211c <BCD2DEC>
 8000350:	4603      	mov	r3, r0
 8000352:	461a      	mov	r2, r3
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8000356:	719a      	strb	r2, [r3, #6]
		}

}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40005400 	.word	0x40005400
 8000364:	20000300 	.word	0x20000300
 8000368:	200002f8 	.word	0x200002f8

0800036c <doc>:
uint8_t doc(uint8_t *tren,uint8_t *duoi)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
	static uint8_t i=0;
	if (*tren==1) {
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d108      	bne.n	8000390 <doc+0x24>
		i--;
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <doc+0x6c>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	3b01      	subs	r3, #1
 8000384:	b2da      	uxtb	r2, r3
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <doc+0x6c>)
 8000388:	701a      	strb	r2, [r3, #0]
		*tren=0;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2200      	movs	r2, #0
 800038e:	701a      	strb	r2, [r3, #0]
	}
	if (*duoi==1) {
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d108      	bne.n	80003aa <doc+0x3e>
		i++;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <doc+0x6c>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	3301      	adds	r3, #1
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <doc+0x6c>)
 80003a2:	701a      	strb	r2, [r3, #0]
		*duoi=0;
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
	}
	if(set==1) i=i;
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <doc+0x70>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d104      	bne.n	80003bc <doc+0x50>
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <doc+0x6c>)
 80003b4:	781a      	ldrb	r2, [r3, #0]
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <doc+0x6c>)
 80003b8:	701a      	strb	r2, [r3, #0]
 80003ba:	e006      	b.n	80003ca <doc+0x5e>
	else{
		if (i<0 || i>4) i=0;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <doc+0x6c>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b04      	cmp	r3, #4
 80003c2:	d902      	bls.n	80003ca <doc+0x5e>
 80003c4:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <doc+0x6c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
	}
	return i;
 80003ca:	4b03      	ldr	r3, [pc, #12]	; (80003d8 <doc+0x6c>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	200009ac 	.word	0x200009ac
 80003dc:	20000341 	.word	0x20000341

080003e0 <ngang>:
uint8_t ngang(uint8_t *trai,uint8_t *phai)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
	static uint8_t i=0;
	if (*trai==1) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d108      	bne.n	8000404 <ngang+0x24>
		i--;
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <ngang+0x5c>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	3b01      	subs	r3, #1
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <ngang+0x5c>)
 80003fc:	701a      	strb	r2, [r3, #0]
		*trai=0;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
	}
	if (*phai==1) {
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d108      	bne.n	800041e <ngang+0x3e>
		i++;
 800040c:	4b0b      	ldr	r3, [pc, #44]	; (800043c <ngang+0x5c>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	b2da      	uxtb	r2, r3
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <ngang+0x5c>)
 8000416:	701a      	strb	r2, [r3, #0]
		*phai=0;
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
	}
	if(i<0 || i>17) i=0;
 800041e:	4b07      	ldr	r3, [pc, #28]	; (800043c <ngang+0x5c>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b11      	cmp	r3, #17
 8000424:	d902      	bls.n	800042c <ngang+0x4c>
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <ngang+0x5c>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
	return i;
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <ngang+0x5c>)
 800042e:	781b      	ldrb	r3, [r3, #0]
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	200009ad 	.word	0x200009ad

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000446:	f002 fee3 	bl	8003210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800044a:	f000 ff11 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044e:	f001 f92b 	bl	80016a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000452:	f000 ffaf 	bl	80013b4 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000456:	f000 ff51 	bl	80012fc <MX_I2C1_Init>
  MX_SPI2_Init();
 800045a:	f000 ffe1 	bl	8001420 <MX_SPI2_Init>
  MX_FATFS_Init();
 800045e:	f007 fb81 	bl	8007b64 <MX_FATFS_Init>
  MX_TIM2_Init();
 8000462:	f001 f813 	bl	800148c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000466:	f001 f885 	bl	8001574 <MX_TIM3_Init>
  MX_I2C2_Init();
 800046a:	f000 ff75 	bl	8001358 <MX_I2C2_Init>
  MX_TIM4_Init();
 800046e:	f001 f8cd 	bl	800160c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1); //cho phep PWM (gia lap DAC)
 8000472:	2100      	movs	r1, #0
 8000474:	48ac      	ldr	r0, [pc, #688]	; (8000728 <main+0x2e8>)
 8000476:	f006 fd09 	bl	8006e8c <HAL_TIM_PWM_Start>
  ssd1306_Init();
 800047a:	f002 fc55 	bl	8002d28 <ssd1306_Init>
////  man hinh chinh begin
  //doc
giay[0]=':';
 800047e:	4bab      	ldr	r3, [pc, #684]	; (800072c <main+0x2ec>)
 8000480:	223a      	movs	r2, #58	; 0x3a
 8000482:	701a      	strb	r2, [r3, #0]
giophut[2]=':';
 8000484:	4baa      	ldr	r3, [pc, #680]	; (8000730 <main+0x2f0>)
 8000486:	223a      	movs	r2, #58	; 0x3a
 8000488:	709a      	strb	r2, [r3, #2]
ngay[0]='T';ngay[1]='h';ngay[2]='u';ngay[4]=',';
 800048a:	4baa      	ldr	r3, [pc, #680]	; (8000734 <main+0x2f4>)
 800048c:	2254      	movs	r2, #84	; 0x54
 800048e:	701a      	strb	r2, [r3, #0]
 8000490:	4ba8      	ldr	r3, [pc, #672]	; (8000734 <main+0x2f4>)
 8000492:	2268      	movs	r2, #104	; 0x68
 8000494:	705a      	strb	r2, [r3, #1]
 8000496:	4ba7      	ldr	r3, [pc, #668]	; (8000734 <main+0x2f4>)
 8000498:	2275      	movs	r2, #117	; 0x75
 800049a:	709a      	strb	r2, [r3, #2]
 800049c:	4ba5      	ldr	r3, [pc, #660]	; (8000734 <main+0x2f4>)
 800049e:	222c      	movs	r2, #44	; 0x2c
 80004a0:	711a      	strb	r2, [r3, #4]
ngay[7]='-';
 80004a2:	4ba4      	ldr	r3, [pc, #656]	; (8000734 <main+0x2f4>)
 80004a4:	222d      	movs	r2, #45	; 0x2d
 80004a6:	71da      	strb	r2, [r3, #7]
ngay[10]='-';
 80004a8:	4ba2      	ldr	r3, [pc, #648]	; (8000734 <main+0x2f4>)
 80004aa:	222d      	movs	r2, #45	; 0x2d
 80004ac:	729a      	strb	r2, [r3, #10]
ngay[11]='2';ngay[12]='0';
 80004ae:	4ba1      	ldr	r3, [pc, #644]	; (8000734 <main+0x2f4>)
 80004b0:	2232      	movs	r2, #50	; 0x32
 80004b2:	72da      	strb	r2, [r3, #11]
 80004b4:	4b9f      	ldr	r3, [pc, #636]	; (8000734 <main+0x2f4>)
 80004b6:	2230      	movs	r2, #48	; 0x30
 80004b8:	731a      	strb	r2, [r3, #12]

id=stactusTX();
 80004ba:	f001 fe6b 	bl	8002194 <stactusTX>
 80004be:	4603      	mov	r3, r0
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b9d      	ldr	r3, [pc, #628]	; (8000738 <main+0x2f8>)
 80004c4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch (mode){
 80004c6:	4b9d      	ldr	r3, [pc, #628]	; (800073c <main+0x2fc>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	2b04      	cmp	r3, #4
 80004ce:	d8fa      	bhi.n	80004c6 <main+0x86>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <main+0x98>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	08000715 	.word	0x08000715
 80004dc:	08000da9 	.word	0x08000da9
 80004e0:	08000e4d 	.word	0x08000e4d
 80004e4:	080004c7 	.word	0x080004c7
 80004e8:	08001219 	.word	0x08001219
	 case 0:
	 	 {
		 while(mode==0){//man hinh chinh
			 dung=0;
 80004ec:	4b94      	ldr	r3, [pc, #592]	; (8000740 <main+0x300>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
			 readsdtxt("","tb.txt",ghi,5);
 80004f2:	2305      	movs	r3, #5
 80004f4:	4a93      	ldr	r2, [pc, #588]	; (8000744 <main+0x304>)
 80004f6:	4994      	ldr	r1, [pc, #592]	; (8000748 <main+0x308>)
 80004f8:	4894      	ldr	r0, [pc, #592]	; (800074c <main+0x30c>)
 80004fa:	f001 fc47 	bl	8001d8c <readsdtxt>
			 str2uint8t(ghi,timealrm,2);
 80004fe:	2202      	movs	r2, #2
 8000500:	4993      	ldr	r1, [pc, #588]	; (8000750 <main+0x310>)
 8000502:	4890      	ldr	r0, [pc, #576]	; (8000744 <main+0x304>)
 8000504:	f001 fc86 	bl	8001e14 <str2uint8t>
			 readtime(u8_revBuffer,id);
 8000508:	4b8b      	ldr	r3, [pc, #556]	; (8000738 <main+0x2f8>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4619      	mov	r1, r3
 800050e:	4891      	ldr	r0, [pc, #580]	; (8000754 <main+0x314>)
 8000510:	f001 fdec 	bl	80020ec <readtime>
			 if (timealrm[1]==(DS3231_TimeNow.hours) && timealrm[0]==(DS3231_TimeNow.min))
 8000514:	4b8e      	ldr	r3, [pc, #568]	; (8000750 <main+0x310>)
 8000516:	785a      	ldrb	r2, [r3, #1]
 8000518:	4b8f      	ldr	r3, [pc, #572]	; (8000758 <main+0x318>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	429a      	cmp	r2, r3
 800051e:	d119      	bne.n	8000554 <main+0x114>
 8000520:	4b8b      	ldr	r3, [pc, #556]	; (8000750 <main+0x310>)
 8000522:	781a      	ldrb	r2, [r3, #0]
 8000524:	4b8c      	ldr	r3, [pc, #560]	; (8000758 <main+0x318>)
 8000526:	785b      	ldrb	r3, [r3, #1]
 8000528:	429a      	cmp	r2, r3
 800052a:	d113      	bne.n	8000554 <main+0x114>
			 	 {

				 	if (tat==0)readline("","3.txt",buffer,amthanh,1024/2,&ngat,&dung);
 800052c:	4b8b      	ldr	r3, [pc, #556]	; (800075c <main+0x31c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d10c      	bne.n	800054e <main+0x10e>
 8000534:	4b82      	ldr	r3, [pc, #520]	; (8000740 <main+0x300>)
 8000536:	9302      	str	r3, [sp, #8]
 8000538:	4b89      	ldr	r3, [pc, #548]	; (8000760 <main+0x320>)
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	4b88      	ldr	r3, [pc, #544]	; (8000764 <main+0x324>)
 8000544:	4a88      	ldr	r2, [pc, #544]	; (8000768 <main+0x328>)
 8000546:	4989      	ldr	r1, [pc, #548]	; (800076c <main+0x32c>)
 8000548:	4880      	ldr	r0, [pc, #512]	; (800074c <main+0x30c>)
 800054a:	f001 fc93 	bl	8001e74 <readline>
				 	tat=1;
 800054e:	4b83      	ldr	r3, [pc, #524]	; (800075c <main+0x31c>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
			 	 }

			 ngay[3]=(DS3231_TimeNow.date) + 48;
 8000554:	4b80      	ldr	r3, [pc, #512]	; (8000758 <main+0x318>)
 8000556:	78db      	ldrb	r3, [r3, #3]
 8000558:	3330      	adds	r3, #48	; 0x30
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b75      	ldr	r3, [pc, #468]	; (8000734 <main+0x2f4>)
 800055e:	70da      	strb	r2, [r3, #3]
			 ngay[5]=((DS3231_TimeNow.day)/10) + 48;
 8000560:	4b7d      	ldr	r3, [pc, #500]	; (8000758 <main+0x318>)
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	4a82      	ldr	r2, [pc, #520]	; (8000770 <main+0x330>)
 8000566:	fba2 2303 	umull	r2, r3, r2, r3
 800056a:	08db      	lsrs	r3, r3, #3
 800056c:	b2db      	uxtb	r3, r3
 800056e:	3330      	adds	r3, #48	; 0x30
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b70      	ldr	r3, [pc, #448]	; (8000734 <main+0x2f4>)
 8000574:	715a      	strb	r2, [r3, #5]
			 ngay[6]=((DS3231_TimeNow.day)%10) + 48;
 8000576:	4b78      	ldr	r3, [pc, #480]	; (8000758 <main+0x318>)
 8000578:	791a      	ldrb	r2, [r3, #4]
 800057a:	4b7d      	ldr	r3, [pc, #500]	; (8000770 <main+0x330>)
 800057c:	fba3 1302 	umull	r1, r3, r3, r2
 8000580:	08d9      	lsrs	r1, r3, #3
 8000582:	460b      	mov	r3, r1
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	440b      	add	r3, r1
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	b2db      	uxtb	r3, r3
 800058e:	3330      	adds	r3, #48	; 0x30
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b68      	ldr	r3, [pc, #416]	; (8000734 <main+0x2f4>)
 8000594:	719a      	strb	r2, [r3, #6]
			 ngay[8]=((DS3231_TimeNow.month)/10) + 48;
 8000596:	4b70      	ldr	r3, [pc, #448]	; (8000758 <main+0x318>)
 8000598:	795b      	ldrb	r3, [r3, #5]
 800059a:	4a75      	ldr	r2, [pc, #468]	; (8000770 <main+0x330>)
 800059c:	fba2 2303 	umull	r2, r3, r2, r3
 80005a0:	08db      	lsrs	r3, r3, #3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	3330      	adds	r3, #48	; 0x30
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b62      	ldr	r3, [pc, #392]	; (8000734 <main+0x2f4>)
 80005aa:	721a      	strb	r2, [r3, #8]
			 ngay[9]=((DS3231_TimeNow.month)%10) + 48;
 80005ac:	4b6a      	ldr	r3, [pc, #424]	; (8000758 <main+0x318>)
 80005ae:	795a      	ldrb	r2, [r3, #5]
 80005b0:	4b6f      	ldr	r3, [pc, #444]	; (8000770 <main+0x330>)
 80005b2:	fba3 1302 	umull	r1, r3, r3, r2
 80005b6:	08d9      	lsrs	r1, r3, #3
 80005b8:	460b      	mov	r3, r1
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	440b      	add	r3, r1
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	3330      	adds	r3, #48	; 0x30
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b5a      	ldr	r3, [pc, #360]	; (8000734 <main+0x2f4>)
 80005ca:	725a      	strb	r2, [r3, #9]
			 ngay[13]=((DS3231_TimeNow.year)/10) + 48;
 80005cc:	4b62      	ldr	r3, [pc, #392]	; (8000758 <main+0x318>)
 80005ce:	799b      	ldrb	r3, [r3, #6]
 80005d0:	4a67      	ldr	r2, [pc, #412]	; (8000770 <main+0x330>)
 80005d2:	fba2 2303 	umull	r2, r3, r2, r3
 80005d6:	08db      	lsrs	r3, r3, #3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	3330      	adds	r3, #48	; 0x30
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b55      	ldr	r3, [pc, #340]	; (8000734 <main+0x2f4>)
 80005e0:	735a      	strb	r2, [r3, #13]
			 ngay[14]=((DS3231_TimeNow.year)%10)  + 48;
 80005e2:	4b5d      	ldr	r3, [pc, #372]	; (8000758 <main+0x318>)
 80005e4:	799a      	ldrb	r2, [r3, #6]
 80005e6:	4b62      	ldr	r3, [pc, #392]	; (8000770 <main+0x330>)
 80005e8:	fba3 1302 	umull	r1, r3, r3, r2
 80005ec:	08d9      	lsrs	r1, r3, #3
 80005ee:	460b      	mov	r3, r1
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	440b      	add	r3, r1
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	3330      	adds	r3, #48	; 0x30
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <main+0x2f4>)
 8000600:	739a      	strb	r2, [r3, #14]
			 giay[1]=((DS3231_TimeNow.sec)/10) + 48;
 8000602:	4b55      	ldr	r3, [pc, #340]	; (8000758 <main+0x318>)
 8000604:	789b      	ldrb	r3, [r3, #2]
 8000606:	4a5a      	ldr	r2, [pc, #360]	; (8000770 <main+0x330>)
 8000608:	fba2 2303 	umull	r2, r3, r2, r3
 800060c:	08db      	lsrs	r3, r3, #3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	3330      	adds	r3, #48	; 0x30
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b45      	ldr	r3, [pc, #276]	; (800072c <main+0x2ec>)
 8000616:	705a      	strb	r2, [r3, #1]
			 giay[2]=((DS3231_TimeNow.sec)%10) + 48;
 8000618:	4b4f      	ldr	r3, [pc, #316]	; (8000758 <main+0x318>)
 800061a:	789a      	ldrb	r2, [r3, #2]
 800061c:	4b54      	ldr	r3, [pc, #336]	; (8000770 <main+0x330>)
 800061e:	fba3 1302 	umull	r1, r3, r3, r2
 8000622:	08d9      	lsrs	r1, r3, #3
 8000624:	460b      	mov	r3, r1
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	440b      	add	r3, r1
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	3330      	adds	r3, #48	; 0x30
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b3d      	ldr	r3, [pc, #244]	; (800072c <main+0x2ec>)
 8000636:	709a      	strb	r2, [r3, #2]
			 giophut[0]=((DS3231_TimeNow.hours)/10) +48;
 8000638:	4b47      	ldr	r3, [pc, #284]	; (8000758 <main+0x318>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4a4c      	ldr	r2, [pc, #304]	; (8000770 <main+0x330>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	08db      	lsrs	r3, r3, #3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	3330      	adds	r3, #48	; 0x30
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b39      	ldr	r3, [pc, #228]	; (8000730 <main+0x2f0>)
 800064c:	701a      	strb	r2, [r3, #0]
			 giophut[1]=((DS3231_TimeNow.hours)%10) +48;
 800064e:	4b42      	ldr	r3, [pc, #264]	; (8000758 <main+0x318>)
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	4b47      	ldr	r3, [pc, #284]	; (8000770 <main+0x330>)
 8000654:	fba3 1302 	umull	r1, r3, r3, r2
 8000658:	08d9      	lsrs	r1, r3, #3
 800065a:	460b      	mov	r3, r1
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	440b      	add	r3, r1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3330      	adds	r3, #48	; 0x30
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <main+0x2f0>)
 800066c:	705a      	strb	r2, [r3, #1]
			 giophut[3]=((DS3231_TimeNow.min)/10) +48;
 800066e:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <main+0x318>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	4a3f      	ldr	r2, [pc, #252]	; (8000770 <main+0x330>)
 8000674:	fba2 2303 	umull	r2, r3, r2, r3
 8000678:	08db      	lsrs	r3, r3, #3
 800067a:	b2db      	uxtb	r3, r3
 800067c:	3330      	adds	r3, #48	; 0x30
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <main+0x2f0>)
 8000682:	70da      	strb	r2, [r3, #3]
			 giophut[4]=((DS3231_TimeNow.min)%10) +48;
 8000684:	4b34      	ldr	r3, [pc, #208]	; (8000758 <main+0x318>)
 8000686:	785a      	ldrb	r2, [r3, #1]
 8000688:	4b39      	ldr	r3, [pc, #228]	; (8000770 <main+0x330>)
 800068a:	fba3 1302 	umull	r1, r3, r3, r2
 800068e:	08d9      	lsrs	r1, r3, #3
 8000690:	460b      	mov	r3, r1
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	440b      	add	r3, r1
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	3330      	adds	r3, #48	; 0x30
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <main+0x2f0>)
 80006a2:	711a      	strb	r2, [r3, #4]
			 ssd1306_SetCursor(10,0);
 80006a4:	2100      	movs	r1, #0
 80006a6:	200a      	movs	r0, #10
 80006a8:	f002 fce8 	bl	800307c <ssd1306_SetCursor>
			 ssd1306_WriteString("Clock TT",Font_11x18,White);
 80006ac:	4a31      	ldr	r2, [pc, #196]	; (8000774 <main+0x334>)
 80006ae:	2301      	movs	r3, #1
 80006b0:	ca06      	ldmia	r2, {r1, r2}
 80006b2:	4831      	ldr	r0, [pc, #196]	; (8000778 <main+0x338>)
 80006b4:	f002 fcbc 	bl	8003030 <ssd1306_WriteString>
			 ssd1306_DrawBitmap(101,0,battery,24,18,White);
 80006b8:	2301      	movs	r3, #1
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2312      	movs	r3, #18
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2318      	movs	r3, #24
 80006c2:	4a2e      	ldr	r2, [pc, #184]	; (800077c <main+0x33c>)
 80006c4:	2100      	movs	r1, #0
 80006c6:	2065      	movs	r0, #101	; 0x65
 80006c8:	f002 fcf0 	bl	80030ac <ssd1306_DrawBitmap>
			 ssd1306_UpdateScreen();
 80006cc:	f002 fbae 	bl	8002e2c <ssd1306_UpdateScreen>
			 ssd1306_SetCursor(0,18);
 80006d0:	2112      	movs	r1, #18
 80006d2:	2000      	movs	r0, #0
 80006d4:	f002 fcd2 	bl	800307c <ssd1306_SetCursor>
			 ssd1306_WriteString(ngay,Font_7x10,White);
 80006d8:	4a29      	ldr	r2, [pc, #164]	; (8000780 <main+0x340>)
 80006da:	2301      	movs	r3, #1
 80006dc:	ca06      	ldmia	r2, {r1, r2}
 80006de:	4815      	ldr	r0, [pc, #84]	; (8000734 <main+0x2f4>)
 80006e0:	f002 fca6 	bl	8003030 <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 80006e4:	f002 fba2 	bl	8002e2c <ssd1306_UpdateScreen>
			 ssd1306_SetCursor(37,28);
 80006e8:	211c      	movs	r1, #28
 80006ea:	2025      	movs	r0, #37	; 0x25
 80006ec:	f002 fcc6 	bl	800307c <ssd1306_SetCursor>
			 ssd1306_WriteString(giophut,Font_11x18,White);
 80006f0:	4a20      	ldr	r2, [pc, #128]	; (8000774 <main+0x334>)
 80006f2:	2301      	movs	r3, #1
 80006f4:	ca06      	ldmia	r2, {r1, r2}
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <main+0x2f0>)
 80006f8:	f002 fc9a 	bl	8003030 <ssd1306_WriteString>
			 ssd1306_SetCursor(90,35);
 80006fc:	2123      	movs	r1, #35	; 0x23
 80006fe:	205a      	movs	r0, #90	; 0x5a
 8000700:	f002 fcbc 	bl	800307c <ssd1306_SetCursor>
			 ssd1306_WriteString(giay,Font_7x10,White);
 8000704:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <main+0x340>)
 8000706:	2301      	movs	r3, #1
 8000708:	ca06      	ldmia	r2, {r1, r2}
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <main+0x2ec>)
 800070c:	f002 fc90 	bl	8003030 <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 8000710:	f002 fb8c 	bl	8002e2c <ssd1306_UpdateScreen>
		 while(mode==0){//man hinh chinh
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <main+0x2fc>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	f43f aee6 	beq.w	80004ec <main+0xac>
	 	 	 }
		 ssd1306_Init();
 8000720:	f002 fb02 	bl	8002d28 <ssd1306_Init>
		 break;
 8000724:	f000 bd81 	b.w	800122a <main+0xdea>
 8000728:	20000220 	.word	0x20000220
 800072c:	20000310 	.word	0x20000310
 8000730:	20000308 	.word	0x20000308
 8000734:	20000314 	.word	0x20000314
 8000738:	20000340 	.word	0x20000340
 800073c:	20000343 	.word	0x20000343
 8000740:	20000345 	.word	0x20000345
 8000744:	2000034c 	.word	0x2000034c
 8000748:	0800a960 	.word	0x0800a960
 800074c:	0800a968 	.word	0x0800a968
 8000750:	20000338 	.word	0x20000338
 8000754:	20000300 	.word	0x20000300
 8000758:	200002f8 	.word	0x200002f8
 800075c:	20000342 	.word	0x20000342
 8000760:	20000758 	.word	0x20000758
 8000764:	2000075c 	.word	0x2000075c
 8000768:	20000354 	.word	0x20000354
 800076c:	0800a96c 	.word	0x0800a96c
 8000770:	cccccccd 	.word	0xcccccccd
 8000774:	20000088 	.word	0x20000088
 8000778:	0800a974 	.word	0x0800a974
 800077c:	0800aa80 	.word	0x0800aa80
 8000780:	20000080 	.word	0x20000080
	 	 }//case 0
	 case 1:
	 	 {
		 while(mode ==1){// man hinh cai dat
			 ngays[3]=(timeset[3]) + 48;
 8000784:	4b8c      	ldr	r3, [pc, #560]	; (80009b8 <main+0x578>)
 8000786:	78db      	ldrb	r3, [r3, #3]
 8000788:	3330      	adds	r3, #48	; 0x30
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b8b      	ldr	r3, [pc, #556]	; (80009bc <main+0x57c>)
 800078e:	70da      	strb	r2, [r3, #3]
			 ngays[5]=((timeset[4])/10) + 48;
 8000790:	4b89      	ldr	r3, [pc, #548]	; (80009b8 <main+0x578>)
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	4a8a      	ldr	r2, [pc, #552]	; (80009c0 <main+0x580>)
 8000796:	fba2 2303 	umull	r2, r3, r2, r3
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	b2db      	uxtb	r3, r3
 800079e:	3330      	adds	r3, #48	; 0x30
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b86      	ldr	r3, [pc, #536]	; (80009bc <main+0x57c>)
 80007a4:	715a      	strb	r2, [r3, #5]
			 ngays[6]=((timeset[4])%10) + 48;
 80007a6:	4b84      	ldr	r3, [pc, #528]	; (80009b8 <main+0x578>)
 80007a8:	791a      	ldrb	r2, [r3, #4]
 80007aa:	4b85      	ldr	r3, [pc, #532]	; (80009c0 <main+0x580>)
 80007ac:	fba3 1302 	umull	r1, r3, r3, r2
 80007b0:	08d9      	lsrs	r1, r3, #3
 80007b2:	460b      	mov	r3, r1
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	440b      	add	r3, r1
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	3330      	adds	r3, #48	; 0x30
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b7e      	ldr	r3, [pc, #504]	; (80009bc <main+0x57c>)
 80007c4:	719a      	strb	r2, [r3, #6]
			 ngays[8]=((timeset[5])/10) + 48;
 80007c6:	4b7c      	ldr	r3, [pc, #496]	; (80009b8 <main+0x578>)
 80007c8:	795b      	ldrb	r3, [r3, #5]
 80007ca:	4a7d      	ldr	r2, [pc, #500]	; (80009c0 <main+0x580>)
 80007cc:	fba2 2303 	umull	r2, r3, r2, r3
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3330      	adds	r3, #48	; 0x30
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b78      	ldr	r3, [pc, #480]	; (80009bc <main+0x57c>)
 80007da:	721a      	strb	r2, [r3, #8]
			 ngays[9]=((timeset[5])%10) + 48;
 80007dc:	4b76      	ldr	r3, [pc, #472]	; (80009b8 <main+0x578>)
 80007de:	795a      	ldrb	r2, [r3, #5]
 80007e0:	4b77      	ldr	r3, [pc, #476]	; (80009c0 <main+0x580>)
 80007e2:	fba3 1302 	umull	r1, r3, r3, r2
 80007e6:	08d9      	lsrs	r1, r3, #3
 80007e8:	460b      	mov	r3, r1
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	440b      	add	r3, r1
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	3330      	adds	r3, #48	; 0x30
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b70      	ldr	r3, [pc, #448]	; (80009bc <main+0x57c>)
 80007fa:	725a      	strb	r2, [r3, #9]
			 ngays[13]=((timeset[6])/10) + 48;
 80007fc:	4b6e      	ldr	r3, [pc, #440]	; (80009b8 <main+0x578>)
 80007fe:	799b      	ldrb	r3, [r3, #6]
 8000800:	4a6f      	ldr	r2, [pc, #444]	; (80009c0 <main+0x580>)
 8000802:	fba2 2303 	umull	r2, r3, r2, r3
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	3330      	adds	r3, #48	; 0x30
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b6b      	ldr	r3, [pc, #428]	; (80009bc <main+0x57c>)
 8000810:	735a      	strb	r2, [r3, #13]
			 ngays[14]=((timeset[6])%10)  + 48;
 8000812:	4b69      	ldr	r3, [pc, #420]	; (80009b8 <main+0x578>)
 8000814:	799a      	ldrb	r2, [r3, #6]
 8000816:	4b6a      	ldr	r3, [pc, #424]	; (80009c0 <main+0x580>)
 8000818:	fba3 1302 	umull	r1, r3, r3, r2
 800081c:	08d9      	lsrs	r1, r3, #3
 800081e:	460b      	mov	r3, r1
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	440b      	add	r3, r1
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	b2db      	uxtb	r3, r3
 800082a:	3330      	adds	r3, #48	; 0x30
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b63      	ldr	r3, [pc, #396]	; (80009bc <main+0x57c>)
 8000830:	739a      	strb	r2, [r3, #14]

			 giophutgiay[0]=((timeset[2])/10) +48;//gio
 8000832:	4b61      	ldr	r3, [pc, #388]	; (80009b8 <main+0x578>)
 8000834:	789b      	ldrb	r3, [r3, #2]
 8000836:	4a62      	ldr	r2, [pc, #392]	; (80009c0 <main+0x580>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	08db      	lsrs	r3, r3, #3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	3330      	adds	r3, #48	; 0x30
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b5f      	ldr	r3, [pc, #380]	; (80009c4 <main+0x584>)
 8000846:	701a      	strb	r2, [r3, #0]
			 giophutgiay[1]=((timeset[2])%10) +48;
 8000848:	4b5b      	ldr	r3, [pc, #364]	; (80009b8 <main+0x578>)
 800084a:	789a      	ldrb	r2, [r3, #2]
 800084c:	4b5c      	ldr	r3, [pc, #368]	; (80009c0 <main+0x580>)
 800084e:	fba3 1302 	umull	r1, r3, r3, r2
 8000852:	08d9      	lsrs	r1, r3, #3
 8000854:	460b      	mov	r3, r1
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	440b      	add	r3, r1
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	b2db      	uxtb	r3, r3
 8000860:	3330      	adds	r3, #48	; 0x30
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b57      	ldr	r3, [pc, #348]	; (80009c4 <main+0x584>)
 8000866:	705a      	strb	r2, [r3, #1]
			 giophutgiay[3]=((timeset[1])/10) +48;//phut
 8000868:	4b53      	ldr	r3, [pc, #332]	; (80009b8 <main+0x578>)
 800086a:	785b      	ldrb	r3, [r3, #1]
 800086c:	4a54      	ldr	r2, [pc, #336]	; (80009c0 <main+0x580>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	08db      	lsrs	r3, r3, #3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	3330      	adds	r3, #48	; 0x30
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b52      	ldr	r3, [pc, #328]	; (80009c4 <main+0x584>)
 800087c:	70da      	strb	r2, [r3, #3]
			 giophutgiay[4]=((timeset[1])%10) +48;
 800087e:	4b4e      	ldr	r3, [pc, #312]	; (80009b8 <main+0x578>)
 8000880:	785a      	ldrb	r2, [r3, #1]
 8000882:	4b4f      	ldr	r3, [pc, #316]	; (80009c0 <main+0x580>)
 8000884:	fba3 1302 	umull	r1, r3, r3, r2
 8000888:	08d9      	lsrs	r1, r3, #3
 800088a:	460b      	mov	r3, r1
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	440b      	add	r3, r1
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	3330      	adds	r3, #48	; 0x30
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b4a      	ldr	r3, [pc, #296]	; (80009c4 <main+0x584>)
 800089c:	711a      	strb	r2, [r3, #4]
			 giophutgiay[6]=((timeset[0])/10) +48;//giay
 800089e:	4b46      	ldr	r3, [pc, #280]	; (80009b8 <main+0x578>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4a47      	ldr	r2, [pc, #284]	; (80009c0 <main+0x580>)
 80008a4:	fba2 2303 	umull	r2, r3, r2, r3
 80008a8:	08db      	lsrs	r3, r3, #3
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	3330      	adds	r3, #48	; 0x30
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b44      	ldr	r3, [pc, #272]	; (80009c4 <main+0x584>)
 80008b2:	719a      	strb	r2, [r3, #6]
			 giophutgiay[7]=((timeset[0])%10) +48;
 80008b4:	4b40      	ldr	r3, [pc, #256]	; (80009b8 <main+0x578>)
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	4b41      	ldr	r3, [pc, #260]	; (80009c0 <main+0x580>)
 80008ba:	fba3 1302 	umull	r1, r3, r3, r2
 80008be:	08d9      	lsrs	r1, r3, #3
 80008c0:	460b      	mov	r3, r1
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	440b      	add	r3, r1
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	3330      	adds	r3, #48	; 0x30
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <main+0x584>)
 80008d2:	71da      	strb	r2, [r3, #7]

			 controdoc=doc(&tren,&duoi);
 80008d4:	493c      	ldr	r1, [pc, #240]	; (80009c8 <main+0x588>)
 80008d6:	483d      	ldr	r0, [pc, #244]	; (80009cc <main+0x58c>)
 80008d8:	f7ff fd48 	bl	800036c <doc>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <main+0x590>)
 80008e2:	701a      	strb	r2, [r3, #0]
			 controngang=ngang(&trai,&phai);
 80008e4:	493b      	ldr	r1, [pc, #236]	; (80009d4 <main+0x594>)
 80008e6:	483c      	ldr	r0, [pc, #240]	; (80009d8 <main+0x598>)
 80008e8:	f7ff fd7a 	bl	80003e0 <ngang>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b3a      	ldr	r3, [pc, #232]	; (80009dc <main+0x59c>)
 80008f2:	701a      	strb	r2, [r3, #0]
			 ssd1306_SetCursor(0,0);
 80008f4:	2100      	movs	r1, #0
 80008f6:	2000      	movs	r0, #0
 80008f8:	f002 fbc0 	bl	800307c <ssd1306_SetCursor>
			 ssd1306_WriteString("Time Set",Font_11x18,White);
 80008fc:	4a38      	ldr	r2, [pc, #224]	; (80009e0 <main+0x5a0>)
 80008fe:	2301      	movs	r3, #1
 8000900:	ca06      	ldmia	r2, {r1, r2}
 8000902:	4838      	ldr	r0, [pc, #224]	; (80009e4 <main+0x5a4>)
 8000904:	f002 fb94 	bl	8003030 <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 8000908:	f002 fa90 	bl	8002e2c <ssd1306_UpdateScreen>
			 ssd1306_SetCursor(0,18);
 800090c:	2112      	movs	r1, #18
 800090e:	2000      	movs	r0, #0
 8000910:	f002 fbb4 	bl	800307c <ssd1306_SetCursor>
			 ssd1306_WriteString(ngays,Font_7x10,White);
 8000914:	4a34      	ldr	r2, [pc, #208]	; (80009e8 <main+0x5a8>)
 8000916:	2301      	movs	r3, #1
 8000918:	ca06      	ldmia	r2, {r1, r2}
 800091a:	4828      	ldr	r0, [pc, #160]	; (80009bc <main+0x57c>)
 800091c:	f002 fb88 	bl	8003030 <ssd1306_WriteString>
			 ssd1306_SetCursor(0,28);
 8000920:	211c      	movs	r1, #28
 8000922:	2000      	movs	r0, #0
 8000924:	f002 fbaa 	bl	800307c <ssd1306_SetCursor>
			 ssd1306_WriteString(giophutgiay,Font_7x10,White);
 8000928:	4a2f      	ldr	r2, [pc, #188]	; (80009e8 <main+0x5a8>)
 800092a:	2301      	movs	r3, #1
 800092c:	ca06      	ldmia	r2, {r1, r2}
 800092e:	4825      	ldr	r0, [pc, #148]	; (80009c4 <main+0x584>)
 8000930:	f002 fb7e 	bl	8003030 <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 8000934:	f002 fa7a 	bl	8002e2c <ssd1306_UpdateScreen>
			 ssd1306_SetCursor(0,38);
 8000938:	2126      	movs	r1, #38	; 0x26
 800093a:	2000      	movs	r0, #0
 800093c:	f002 fb9e 	bl	800307c <ssd1306_SetCursor>
			 ssd1306_WriteString("                 ",Font_7x10,White);
 8000940:	4a29      	ldr	r2, [pc, #164]	; (80009e8 <main+0x5a8>)
 8000942:	2301      	movs	r3, #1
 8000944:	ca06      	ldmia	r2, {r1, r2}
 8000946:	4829      	ldr	r0, [pc, #164]	; (80009ec <main+0x5ac>)
 8000948:	f002 fb72 	bl	8003030 <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 800094c:	f002 fa6e 	bl	8002e2c <ssd1306_UpdateScreen>
			 ssd1306_SetCursor(0,48);
 8000950:	2130      	movs	r1, #48	; 0x30
 8000952:	2000      	movs	r0, #0
 8000954:	f002 fb92 	bl	800307c <ssd1306_SetCursor>
			 ssd1306_WriteString("Bao thuc          ",Font_7x10,White);
 8000958:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <main+0x5a8>)
 800095a:	2301      	movs	r3, #1
 800095c:	ca06      	ldmia	r2, {r1, r2}
 800095e:	4824      	ldr	r0, [pc, #144]	; (80009f0 <main+0x5b0>)
 8000960:	f002 fb66 	bl	8003030 <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 8000964:	f002 fa62 	bl	8002e2c <ssd1306_UpdateScreen>
			 ssd1306_SetCursor(0+controngang*7,8+controdoc*10);
 8000968:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <main+0x59c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	00d2      	lsls	r2, r2, #3
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <main+0x590>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	0089      	lsls	r1, r1, #2
 800097c:	440b      	add	r3, r1
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	b2db      	uxtb	r3, r3
 8000982:	3308      	adds	r3, #8
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f002 fb77 	bl	800307c <ssd1306_SetCursor>
			 ssd1306_WriteString(" ",Font_7x10,Black);
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <main+0x5a8>)
 8000990:	2300      	movs	r3, #0
 8000992:	ca06      	ldmia	r2, {r1, r2}
 8000994:	4817      	ldr	r0, [pc, #92]	; (80009f4 <main+0x5b4>)
 8000996:	f002 fb4b 	bl	8003030 <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 800099a:	f002 fa47 	bl	8002e2c <ssd1306_UpdateScreen>
			 if (ok==1){
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <main+0x5b8>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	f040 81ff 	bne.w	8000da8 <main+0x968>
				 ok=0;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <main+0x5b8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
				 set=1;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <main+0x5bc>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
				 while (ok==0){
 80009b6:	e1cb      	b.n	8000d50 <main+0x910>
 80009b8:	20000328 	.word	0x20000328
 80009bc:	20000020 	.word	0x20000020
 80009c0:	cccccccd 	.word	0xcccccccd
 80009c4:	20000000 	.word	0x20000000
 80009c8:	2000034b 	.word	0x2000034b
 80009cc:	2000034a 	.word	0x2000034a
 80009d0:	20000344 	.word	0x20000344
 80009d4:	20000349 	.word	0x20000349
 80009d8:	20000348 	.word	0x20000348
 80009dc:	20000346 	.word	0x20000346
 80009e0:	20000088 	.word	0x20000088
 80009e4:	0800a980 	.word	0x0800a980
 80009e8:	20000080 	.word	0x20000080
 80009ec:	0800a98c 	.word	0x0800a98c
 80009f0:	0800a9a0 	.word	0x0800a9a0
 80009f4:	0800a9b4 	.word	0x0800a9b4
 80009f8:	20000347 	.word	0x20000347
 80009fc:	20000341 	.word	0x20000341

					 if (controdoc==1 && controngang==3)  {
 8000a00:	4b9f      	ldr	r3, [pc, #636]	; (8000c80 <main+0x840>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d11f      	bne.n	8000a48 <main+0x608>
 8000a08:	4b9e      	ldr	r3, [pc, #632]	; (8000c84 <main+0x844>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d11b      	bne.n	8000a48 <main+0x608>
						 timeset[3]=doc(&tren,&duoi);	//thu
 8000a10:	499d      	ldr	r1, [pc, #628]	; (8000c88 <main+0x848>)
 8000a12:	489e      	ldr	r0, [pc, #632]	; (8000c8c <main+0x84c>)
 8000a14:	f7ff fcaa 	bl	800036c <doc>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b9c      	ldr	r3, [pc, #624]	; (8000c90 <main+0x850>)
 8000a1e:	70da      	strb	r2, [r3, #3]
						 if (timeset[3]>8) timeset[3]=2;
 8000a20:	4b9b      	ldr	r3, [pc, #620]	; (8000c90 <main+0x850>)
 8000a22:	78db      	ldrb	r3, [r3, #3]
 8000a24:	2b08      	cmp	r3, #8
 8000a26:	d902      	bls.n	8000a2e <main+0x5ee>
 8000a28:	4b99      	ldr	r3, [pc, #612]	; (8000c90 <main+0x850>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	70da      	strb	r2, [r3, #3]
						 if (timeset[3]<2) timeset[3]=8;
 8000a2e:	4b98      	ldr	r3, [pc, #608]	; (8000c90 <main+0x850>)
 8000a30:	78db      	ldrb	r3, [r3, #3]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d802      	bhi.n	8000a3c <main+0x5fc>
 8000a36:	4b96      	ldr	r3, [pc, #600]	; (8000c90 <main+0x850>)
 8000a38:	2208      	movs	r2, #8
 8000a3a:	70da      	strb	r2, [r3, #3]
						 ngays[3]=(timeset[3]) + 48;
 8000a3c:	4b94      	ldr	r3, [pc, #592]	; (8000c90 <main+0x850>)
 8000a3e:	78db      	ldrb	r3, [r3, #3]
 8000a40:	3330      	adds	r3, #48	; 0x30
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b93      	ldr	r3, [pc, #588]	; (8000c94 <main+0x854>)
 8000a46:	70da      	strb	r2, [r3, #3]
					 }
					 if (controdoc==1 && controngang==6) {
 8000a48:	4b8d      	ldr	r3, [pc, #564]	; (8000c80 <main+0x840>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d134      	bne.n	8000aba <main+0x67a>
 8000a50:	4b8c      	ldr	r3, [pc, #560]	; (8000c84 <main+0x844>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b06      	cmp	r3, #6
 8000a56:	d130      	bne.n	8000aba <main+0x67a>
						 timeset[4]=doc(&tren,&duoi);//ngay
 8000a58:	498b      	ldr	r1, [pc, #556]	; (8000c88 <main+0x848>)
 8000a5a:	488c      	ldr	r0, [pc, #560]	; (8000c8c <main+0x84c>)
 8000a5c:	f7ff fc86 	bl	800036c <doc>
 8000a60:	4603      	mov	r3, r0
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b8a      	ldr	r3, [pc, #552]	; (8000c90 <main+0x850>)
 8000a66:	711a      	strb	r2, [r3, #4]
						 if (timeset[4]>31) timeset[4]=0;
 8000a68:	4b89      	ldr	r3, [pc, #548]	; (8000c90 <main+0x850>)
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	2b1f      	cmp	r3, #31
 8000a6e:	d902      	bls.n	8000a76 <main+0x636>
 8000a70:	4b87      	ldr	r3, [pc, #540]	; (8000c90 <main+0x850>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	711a      	strb	r2, [r3, #4]
						 if (timeset[4]<1) timeset[4]=31;
 8000a76:	4b86      	ldr	r3, [pc, #536]	; (8000c90 <main+0x850>)
 8000a78:	791b      	ldrb	r3, [r3, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <main+0x644>
 8000a7e:	4b84      	ldr	r3, [pc, #528]	; (8000c90 <main+0x850>)
 8000a80:	221f      	movs	r2, #31
 8000a82:	711a      	strb	r2, [r3, #4]
						 ngays[5]=((timeset[4])/10) + 48;
 8000a84:	4b82      	ldr	r3, [pc, #520]	; (8000c90 <main+0x850>)
 8000a86:	791b      	ldrb	r3, [r3, #4]
 8000a88:	4a83      	ldr	r2, [pc, #524]	; (8000c98 <main+0x858>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	08db      	lsrs	r3, r3, #3
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	3330      	adds	r3, #48	; 0x30
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b7f      	ldr	r3, [pc, #508]	; (8000c94 <main+0x854>)
 8000a98:	715a      	strb	r2, [r3, #5]
						 ngays[6]=((timeset[4])%10) + 48;
 8000a9a:	4b7d      	ldr	r3, [pc, #500]	; (8000c90 <main+0x850>)
 8000a9c:	791a      	ldrb	r2, [r3, #4]
 8000a9e:	4b7e      	ldr	r3, [pc, #504]	; (8000c98 <main+0x858>)
 8000aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa4:	08d9      	lsrs	r1, r3, #3
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	440b      	add	r3, r1
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	3330      	adds	r3, #48	; 0x30
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b77      	ldr	r3, [pc, #476]	; (8000c94 <main+0x854>)
 8000ab8:	719a      	strb	r2, [r3, #6]
					 }
					 if (controdoc==1 && controngang==9) {
 8000aba:	4b71      	ldr	r3, [pc, #452]	; (8000c80 <main+0x840>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d134      	bne.n	8000b2c <main+0x6ec>
 8000ac2:	4b70      	ldr	r3, [pc, #448]	; (8000c84 <main+0x844>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b09      	cmp	r3, #9
 8000ac8:	d130      	bne.n	8000b2c <main+0x6ec>
						 timeset[5]=doc(&tren,&duoi);//thang
 8000aca:	496f      	ldr	r1, [pc, #444]	; (8000c88 <main+0x848>)
 8000acc:	486f      	ldr	r0, [pc, #444]	; (8000c8c <main+0x84c>)
 8000ace:	f7ff fc4d 	bl	800036c <doc>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b6e      	ldr	r3, [pc, #440]	; (8000c90 <main+0x850>)
 8000ad8:	715a      	strb	r2, [r3, #5]
						 if (timeset[5]>12) timeset[5]=1;
 8000ada:	4b6d      	ldr	r3, [pc, #436]	; (8000c90 <main+0x850>)
 8000adc:	795b      	ldrb	r3, [r3, #5]
 8000ade:	2b0c      	cmp	r3, #12
 8000ae0:	d902      	bls.n	8000ae8 <main+0x6a8>
 8000ae2:	4b6b      	ldr	r3, [pc, #428]	; (8000c90 <main+0x850>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	715a      	strb	r2, [r3, #5]
						 if (timeset[5]<1) timeset[5]=12;
 8000ae8:	4b69      	ldr	r3, [pc, #420]	; (8000c90 <main+0x850>)
 8000aea:	795b      	ldrb	r3, [r3, #5]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <main+0x6b6>
 8000af0:	4b67      	ldr	r3, [pc, #412]	; (8000c90 <main+0x850>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	715a      	strb	r2, [r3, #5]
						 ngays[8]=((timeset[5])/10) + 48;
 8000af6:	4b66      	ldr	r3, [pc, #408]	; (8000c90 <main+0x850>)
 8000af8:	795b      	ldrb	r3, [r3, #5]
 8000afa:	4a67      	ldr	r2, [pc, #412]	; (8000c98 <main+0x858>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	3330      	adds	r3, #48	; 0x30
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b62      	ldr	r3, [pc, #392]	; (8000c94 <main+0x854>)
 8000b0a:	721a      	strb	r2, [r3, #8]
						 ngays[9]=((timeset[5])%10) + 48;
 8000b0c:	4b60      	ldr	r3, [pc, #384]	; (8000c90 <main+0x850>)
 8000b0e:	795a      	ldrb	r2, [r3, #5]
 8000b10:	4b61      	ldr	r3, [pc, #388]	; (8000c98 <main+0x858>)
 8000b12:	fba3 1302 	umull	r1, r3, r3, r2
 8000b16:	08d9      	lsrs	r1, r3, #3
 8000b18:	460b      	mov	r3, r1
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	3330      	adds	r3, #48	; 0x30
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b5a      	ldr	r3, [pc, #360]	; (8000c94 <main+0x854>)
 8000b2a:	725a      	strb	r2, [r3, #9]

					 }
					 if (controdoc==1 && controngang==14) {
 8000b2c:	4b54      	ldr	r3, [pc, #336]	; (8000c80 <main+0x840>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d12d      	bne.n	8000b90 <main+0x750>
 8000b34:	4b53      	ldr	r3, [pc, #332]	; (8000c84 <main+0x844>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b0e      	cmp	r3, #14
 8000b3a:	d129      	bne.n	8000b90 <main+0x750>
						 timeset[6]=doc(&tren,&duoi);//nam
 8000b3c:	4952      	ldr	r1, [pc, #328]	; (8000c88 <main+0x848>)
 8000b3e:	4853      	ldr	r0, [pc, #332]	; (8000c8c <main+0x84c>)
 8000b40:	f7ff fc14 	bl	800036c <doc>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b51      	ldr	r3, [pc, #324]	; (8000c90 <main+0x850>)
 8000b4a:	719a      	strb	r2, [r3, #6]
						 if (timeset[6]>99) timeset[6]=99;
 8000b4c:	4b50      	ldr	r3, [pc, #320]	; (8000c90 <main+0x850>)
 8000b4e:	799b      	ldrb	r3, [r3, #6]
 8000b50:	2b63      	cmp	r3, #99	; 0x63
 8000b52:	d902      	bls.n	8000b5a <main+0x71a>
 8000b54:	4b4e      	ldr	r3, [pc, #312]	; (8000c90 <main+0x850>)
 8000b56:	2263      	movs	r2, #99	; 0x63
 8000b58:	719a      	strb	r2, [r3, #6]
						 if (timeset[6]<0) timeset[6]=0;
						 ngays[13]=((timeset[6])/10) + 48;
 8000b5a:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <main+0x850>)
 8000b5c:	799b      	ldrb	r3, [r3, #6]
 8000b5e:	4a4e      	ldr	r2, [pc, #312]	; (8000c98 <main+0x858>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	3330      	adds	r3, #48	; 0x30
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	4b49      	ldr	r3, [pc, #292]	; (8000c94 <main+0x854>)
 8000b6e:	735a      	strb	r2, [r3, #13]
						 ngays[14]=((timeset[6])%10)  + 48;
 8000b70:	4b47      	ldr	r3, [pc, #284]	; (8000c90 <main+0x850>)
 8000b72:	799a      	ldrb	r2, [r3, #6]
 8000b74:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <main+0x858>)
 8000b76:	fba3 1302 	umull	r1, r3, r3, r2
 8000b7a:	08d9      	lsrs	r1, r3, #3
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	3330      	adds	r3, #48	; 0x30
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <main+0x854>)
 8000b8e:	739a      	strb	r2, [r3, #14]

					 }
					 if (controdoc==2 && controngang==1) {
 8000b90:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <main+0x840>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d12d      	bne.n	8000bf4 <main+0x7b4>
 8000b98:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <main+0x844>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d129      	bne.n	8000bf4 <main+0x7b4>
						 timeset[2]=doc(&tren,&duoi);//gio
 8000ba0:	4939      	ldr	r1, [pc, #228]	; (8000c88 <main+0x848>)
 8000ba2:	483a      	ldr	r0, [pc, #232]	; (8000c8c <main+0x84c>)
 8000ba4:	f7ff fbe2 	bl	800036c <doc>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <main+0x850>)
 8000bae:	709a      	strb	r2, [r3, #2]
						 if (timeset[2]>23) timeset[2]=0;
 8000bb0:	4b37      	ldr	r3, [pc, #220]	; (8000c90 <main+0x850>)
 8000bb2:	789b      	ldrb	r3, [r3, #2]
 8000bb4:	2b17      	cmp	r3, #23
 8000bb6:	d902      	bls.n	8000bbe <main+0x77e>
 8000bb8:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <main+0x850>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	709a      	strb	r2, [r3, #2]
						 if (timeset[2]<0) timeset[2]=23;
						 giophutgiay[0]=((timeset[2])/10) +48;//gio
 8000bbe:	4b34      	ldr	r3, [pc, #208]	; (8000c90 <main+0x850>)
 8000bc0:	789b      	ldrb	r3, [r3, #2]
 8000bc2:	4a35      	ldr	r2, [pc, #212]	; (8000c98 <main+0x858>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	08db      	lsrs	r3, r3, #3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	3330      	adds	r3, #48	; 0x30
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <main+0x85c>)
 8000bd2:	701a      	strb	r2, [r3, #0]
						 giophutgiay[1]=((timeset[2])%10) +48;
 8000bd4:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <main+0x850>)
 8000bd6:	789a      	ldrb	r2, [r3, #2]
 8000bd8:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <main+0x858>)
 8000bda:	fba3 1302 	umull	r1, r3, r3, r2
 8000bde:	08d9      	lsrs	r1, r3, #3
 8000be0:	460b      	mov	r3, r1
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	3330      	adds	r3, #48	; 0x30
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <main+0x85c>)
 8000bf2:	705a      	strb	r2, [r3, #1]
					 }
					 if (controdoc==2 && controngang==4) {
 8000bf4:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <main+0x840>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d12d      	bne.n	8000c58 <main+0x818>
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <main+0x844>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b04      	cmp	r3, #4
 8000c02:	d129      	bne.n	8000c58 <main+0x818>
						 timeset[1]=doc(&tren,&duoi);//phut
 8000c04:	4920      	ldr	r1, [pc, #128]	; (8000c88 <main+0x848>)
 8000c06:	4821      	ldr	r0, [pc, #132]	; (8000c8c <main+0x84c>)
 8000c08:	f7ff fbb0 	bl	800036c <doc>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <main+0x850>)
 8000c12:	705a      	strb	r2, [r3, #1]
						 if (timeset[1]>59) timeset[1]=0;
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <main+0x850>)
 8000c16:	785b      	ldrb	r3, [r3, #1]
 8000c18:	2b3b      	cmp	r3, #59	; 0x3b
 8000c1a:	d902      	bls.n	8000c22 <main+0x7e2>
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <main+0x850>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	705a      	strb	r2, [r3, #1]
						 if (timeset[1]<0) timeset[1]=59;
						giophutgiay[3]=((timeset[1])/10) +48;//phut
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <main+0x850>)
 8000c24:	785b      	ldrb	r3, [r3, #1]
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <main+0x858>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	3330      	adds	r3, #48	; 0x30
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <main+0x85c>)
 8000c36:	70da      	strb	r2, [r3, #3]
						giophutgiay[4]=((timeset[1])%10) +48;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <main+0x850>)
 8000c3a:	785a      	ldrb	r2, [r3, #1]
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <main+0x858>)
 8000c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c42:	08d9      	lsrs	r1, r3, #3
 8000c44:	460b      	mov	r3, r1
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	440b      	add	r3, r1
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	3330      	adds	r3, #48	; 0x30
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <main+0x85c>)
 8000c56:	711a      	strb	r2, [r3, #4]
					 }
					 if (controdoc==2 && controngang==7) {
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <main+0x840>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d13e      	bne.n	8000cde <main+0x89e>
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <main+0x844>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	d13a      	bne.n	8000cde <main+0x89e>
						 timeset[0]=doc(&tren,&duoi);//giay
 8000c68:	4907      	ldr	r1, [pc, #28]	; (8000c88 <main+0x848>)
 8000c6a:	4808      	ldr	r0, [pc, #32]	; (8000c8c <main+0x84c>)
 8000c6c:	f7ff fb7e 	bl	800036c <doc>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <main+0x850>)
 8000c76:	701a      	strb	r2, [r3, #0]
						 if (timeset[0]>59) timeset[0]=0;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <main+0x850>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b3b      	cmp	r3, #59	; 0x3b
 8000c7e:	e00f      	b.n	8000ca0 <main+0x860>
 8000c80:	20000344 	.word	0x20000344
 8000c84:	20000346 	.word	0x20000346
 8000c88:	2000034b 	.word	0x2000034b
 8000c8c:	2000034a 	.word	0x2000034a
 8000c90:	20000328 	.word	0x20000328
 8000c94:	20000020 	.word	0x20000020
 8000c98:	cccccccd 	.word	0xcccccccd
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	d902      	bls.n	8000ca8 <main+0x868>
 8000ca2:	4b6e      	ldr	r3, [pc, #440]	; (8000e5c <main+0xa1c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
						 if (timeset[0]<0)  timeset[0]=59;
						 giophutgiay[6]=((timeset[0])/10) +48;//giay
 8000ca8:	4b6c      	ldr	r3, [pc, #432]	; (8000e5c <main+0xa1c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4a6c      	ldr	r2, [pc, #432]	; (8000e60 <main+0xa20>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	08db      	lsrs	r3, r3, #3
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	3330      	adds	r3, #48	; 0x30
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b6a      	ldr	r3, [pc, #424]	; (8000e64 <main+0xa24>)
 8000cbc:	719a      	strb	r2, [r3, #6]
						 giophutgiay[7]=((timeset[0])%10) +48;
 8000cbe:	4b67      	ldr	r3, [pc, #412]	; (8000e5c <main+0xa1c>)
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4b67      	ldr	r3, [pc, #412]	; (8000e60 <main+0xa20>)
 8000cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8000cc8:	08d9      	lsrs	r1, r3, #3
 8000cca:	460b      	mov	r3, r1
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	3330      	adds	r3, #48	; 0x30
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b62      	ldr	r3, [pc, #392]	; (8000e64 <main+0xa24>)
 8000cdc:	71da      	strb	r2, [r3, #7]
					 }
					 if (controdoc==4 && controngang==0){
 8000cde:	4b62      	ldr	r3, [pc, #392]	; (8000e68 <main+0xa28>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d106      	bne.n	8000cf4 <main+0x8b4>
 8000ce6:	4b61      	ldr	r3, [pc, #388]	; (8000e6c <main+0xa2c>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d102      	bne.n	8000cf4 <main+0x8b4>
					 mode=4;
 8000cee:	4b60      	ldr	r3, [pc, #384]	; (8000e70 <main+0xa30>)
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	701a      	strb	r2, [r3, #0]
					 }
					  	 	 	 ssd1306_SetCursor(0,18);
 8000cf4:	2112      	movs	r1, #18
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f002 f9c0 	bl	800307c <ssd1306_SetCursor>
					 	 	 	 ssd1306_WriteString(ngays,Font_7x10,White);
 8000cfc:	4a5d      	ldr	r2, [pc, #372]	; (8000e74 <main+0xa34>)
 8000cfe:	2301      	movs	r3, #1
 8000d00:	ca06      	ldmia	r2, {r1, r2}
 8000d02:	485d      	ldr	r0, [pc, #372]	; (8000e78 <main+0xa38>)
 8000d04:	f002 f994 	bl	8003030 <ssd1306_WriteString>
					 			 ssd1306_SetCursor(0,28);
 8000d08:	211c      	movs	r1, #28
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f002 f9b6 	bl	800307c <ssd1306_SetCursor>
					 			 ssd1306_WriteString(giophutgiay,Font_7x10,White);
 8000d10:	4a58      	ldr	r2, [pc, #352]	; (8000e74 <main+0xa34>)
 8000d12:	2301      	movs	r3, #1
 8000d14:	ca06      	ldmia	r2, {r1, r2}
 8000d16:	4853      	ldr	r0, [pc, #332]	; (8000e64 <main+0xa24>)
 8000d18:	f002 f98a 	bl	8003030 <ssd1306_WriteString>
					 			 ssd1306_UpdateScreen();
 8000d1c:	f002 f886 	bl	8002e2c <ssd1306_UpdateScreen>
					 			 ssd1306_SetCursor(0,38);
 8000d20:	2126      	movs	r1, #38	; 0x26
 8000d22:	2000      	movs	r0, #0
 8000d24:	f002 f9aa 	bl	800307c <ssd1306_SetCursor>
					 			 ssd1306_WriteString("                 ",Font_7x10,White);
 8000d28:	4a52      	ldr	r2, [pc, #328]	; (8000e74 <main+0xa34>)
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	ca06      	ldmia	r2, {r1, r2}
 8000d2e:	4853      	ldr	r0, [pc, #332]	; (8000e7c <main+0xa3c>)
 8000d30:	f002 f97e 	bl	8003030 <ssd1306_WriteString>
					 			 ssd1306_UpdateScreen();
 8000d34:	f002 f87a 	bl	8002e2c <ssd1306_UpdateScreen>
					 			 ssd1306_SetCursor(0,48);
 8000d38:	2130      	movs	r1, #48	; 0x30
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f002 f99e 	bl	800307c <ssd1306_SetCursor>
					 			 ssd1306_WriteString("Setting time          ",Font_7x10,White);
 8000d40:	4a4c      	ldr	r2, [pc, #304]	; (8000e74 <main+0xa34>)
 8000d42:	2301      	movs	r3, #1
 8000d44:	ca06      	ldmia	r2, {r1, r2}
 8000d46:	484e      	ldr	r0, [pc, #312]	; (8000e80 <main+0xa40>)
 8000d48:	f002 f972 	bl	8003030 <ssd1306_WriteString>
					 			 ssd1306_UpdateScreen();
 8000d4c:	f002 f86e 	bl	8002e2c <ssd1306_UpdateScreen>
				 while (ok==0){
 8000d50:	4b4c      	ldr	r3, [pc, #304]	; (8000e84 <main+0xa44>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f43f ae52 	beq.w	8000a00 <main+0x5c0>
				 }
				 controdoc = 1;
 8000d5c:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <main+0xa28>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
				 for (int i=0;i<7;i++){
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	e00b      	b.n	8000d80 <main+0x940>
					 timeset2[i]=timeset[i];
 8000d68:	4a3c      	ldr	r2, [pc, #240]	; (8000e5c <main+0xa1c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	7819      	ldrb	r1, [r3, #0]
 8000d70:	4a45      	ldr	r2, [pc, #276]	; (8000e88 <main+0xa48>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	460a      	mov	r2, r1
 8000d78:	701a      	strb	r2, [r3, #0]
				 for (int i=0;i<7;i++){
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	ddf0      	ble.n	8000d68 <main+0x928>
				 }
				 if (mode!=4) settime(timeset2,id);
 8000d86:	4b3a      	ldr	r3, [pc, #232]	; (8000e70 <main+0xa30>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d005      	beq.n	8000d9c <main+0x95c>
 8000d90:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <main+0xa4c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	483c      	ldr	r0, [pc, #240]	; (8000e88 <main+0xa48>)
 8000d98:	f001 fa2a 	bl	80021f0 <settime>
				 ok=0;
 8000d9c:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <main+0xa44>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
				 set=0;
 8000da2:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <main+0xa50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
		 while(mode ==1){// man hinh cai dat
 8000da8:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <main+0xa30>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	f43f ace8 	beq.w	8000784 <main+0x344>

			 }

		 }
		 ssd1306_Init();
 8000db4:	f001 ffb8 	bl	8002d28 <ssd1306_Init>
		 break;
 8000db8:	e237      	b.n	800122a <main+0xdea>
	 	 }//case1
	 case 2:
	 	 {
		  while (mode ==2){// man hinh phat nhac
			 ssd1306_SetCursor(0,0);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f002 f95d 	bl	800307c <ssd1306_SetCursor>
			 ssd1306_WriteString("Music         ",Font_11x18,White);
 8000dc2:	4a34      	ldr	r2, [pc, #208]	; (8000e94 <main+0xa54>)
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	ca06      	ldmia	r2, {r1, r2}
 8000dc8:	4833      	ldr	r0, [pc, #204]	; (8000e98 <main+0xa58>)
 8000dca:	f002 f931 	bl	8003030 <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 8000dce:	f002 f82d 	bl	8002e2c <ssd1306_UpdateScreen>
			 readdanhsachnhac("","dsn.txt",nhac);
 8000dd2:	4a32      	ldr	r2, [pc, #200]	; (8000e9c <main+0xa5c>)
 8000dd4:	4932      	ldr	r1, [pc, #200]	; (8000ea0 <main+0xa60>)
 8000dd6:	4833      	ldr	r0, [pc, #204]	; (8000ea4 <main+0xa64>)
 8000dd8:	f001 f8c0 	bl	8001f5c <readdanhsachnhac>
			 controdoc=doc(&tren,&duoi);
 8000ddc:	4932      	ldr	r1, [pc, #200]	; (8000ea8 <main+0xa68>)
 8000dde:	4833      	ldr	r0, [pc, #204]	; (8000eac <main+0xa6c>)
 8000de0:	f7ff fac4 	bl	800036c <doc>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <main+0xa28>)
 8000dea:	701a      	strb	r2, [r3, #0]
			 phat[0]=controdoc+48;
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <main+0xa28>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	3330      	adds	r3, #48	; 0x30
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <main+0xa70>)
 8000df6:	701a      	strb	r2, [r3, #0]
			 ssd1306_SetCursor(0,8+controdoc*10);
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <main+0xa28>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	3308      	adds	r3, #8
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f002 f935 	bl	800307c <ssd1306_SetCursor>
			 ssd1306_WriteString(">",Font_7x10,White);
 8000e12:	4a18      	ldr	r2, [pc, #96]	; (8000e74 <main+0xa34>)
 8000e14:	2301      	movs	r3, #1
 8000e16:	ca06      	ldmia	r2, {r1, r2}
 8000e18:	4826      	ldr	r0, [pc, #152]	; (8000eb4 <main+0xa74>)
 8000e1a:	f002 f909 	bl	8003030 <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 8000e1e:	f002 f805 	bl	8002e2c <ssd1306_UpdateScreen>
		if(ok==1) {
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <main+0xa44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d10f      	bne.n	8000e4c <main+0xa0c>
			ok=0;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <main+0xa44>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
			readline("",phat,buffer,amthanh,1024/2,&ngat,&dung);
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <main+0xa78>)
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <main+0xa7c>)
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <main+0xa80>)
 8000e42:	4a20      	ldr	r2, [pc, #128]	; (8000ec4 <main+0xa84>)
 8000e44:	491a      	ldr	r1, [pc, #104]	; (8000eb0 <main+0xa70>)
 8000e46:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <main+0xa64>)
 8000e48:	f001 f814 	bl	8001e74 <readline>
		  while (mode ==2){// man hinh phat nhac
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <main+0xa30>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d0b1      	beq.n	8000dba <main+0x97a>
			}

		 }
		 ssd1306_Init();
 8000e56:	f001 ff67 	bl	8002d28 <ssd1306_Init>
		 break;
 8000e5a:	e1e6      	b.n	800122a <main+0xdea>
 8000e5c:	20000328 	.word	0x20000328
 8000e60:	cccccccd 	.word	0xcccccccd
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000344 	.word	0x20000344
 8000e6c:	20000346 	.word	0x20000346
 8000e70:	20000343 	.word	0x20000343
 8000e74:	20000080 	.word	0x20000080
 8000e78:	20000020 	.word	0x20000020
 8000e7c:	0800a98c 	.word	0x0800a98c
 8000e80:	0800a9b8 	.word	0x0800a9b8
 8000e84:	20000347 	.word	0x20000347
 8000e88:	20000330 	.word	0x20000330
 8000e8c:	20000340 	.word	0x20000340
 8000e90:	20000341 	.word	0x20000341
 8000e94:	20000088 	.word	0x20000088
 8000e98:	0800a9d0 	.word	0x0800a9d0
 8000e9c:	2000095c 	.word	0x2000095c
 8000ea0:	0800a9e0 	.word	0x0800a9e0
 8000ea4:	0800a968 	.word	0x0800a968
 8000ea8:	2000034b 	.word	0x2000034b
 8000eac:	2000034a 	.word	0x2000034a
 8000eb0:	20000064 	.word	0x20000064
 8000eb4:	0800a9e8 	.word	0x0800a9e8
 8000eb8:	20000345 	.word	0x20000345
 8000ebc:	20000758 	.word	0x20000758
 8000ec0:	2000075c 	.word	0x2000075c
 8000ec4:	20000354 	.word	0x20000354
	 	 }//case2
	 case 4:
		 {
			 while (mode==4){
				 tat=0;
 8000ec8:	4b93      	ldr	r3, [pc, #588]	; (8001118 <main+0xcd8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
				 giophut_a[0]=((timealrm[1])/10) +48;//gio
 8000ece:	4b93      	ldr	r3, [pc, #588]	; (800111c <main+0xcdc>)
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	4a93      	ldr	r2, [pc, #588]	; (8001120 <main+0xce0>)
 8000ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed8:	08db      	lsrs	r3, r3, #3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	3330      	adds	r3, #48	; 0x30
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b90      	ldr	r3, [pc, #576]	; (8001124 <main+0xce4>)
 8000ee2:	701a      	strb	r2, [r3, #0]
				 giophut_a[1]=((timealrm[1])%10) +48;
 8000ee4:	4b8d      	ldr	r3, [pc, #564]	; (800111c <main+0xcdc>)
 8000ee6:	785a      	ldrb	r2, [r3, #1]
 8000ee8:	4b8d      	ldr	r3, [pc, #564]	; (8001120 <main+0xce0>)
 8000eea:	fba3 1302 	umull	r1, r3, r3, r2
 8000eee:	08d9      	lsrs	r1, r3, #3
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	3330      	adds	r3, #48	; 0x30
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b88      	ldr	r3, [pc, #544]	; (8001124 <main+0xce4>)
 8000f02:	705a      	strb	r2, [r3, #1]
				 giophut_a[3]=((timealrm[0])/10) +48;//phut
 8000f04:	4b85      	ldr	r3, [pc, #532]	; (800111c <main+0xcdc>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4a85      	ldr	r2, [pc, #532]	; (8001120 <main+0xce0>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	08db      	lsrs	r3, r3, #3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	3330      	adds	r3, #48	; 0x30
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b83      	ldr	r3, [pc, #524]	; (8001124 <main+0xce4>)
 8000f18:	70da      	strb	r2, [r3, #3]
				 giophut_a[4]=((timealrm[0])%10) +48;
 8000f1a:	4b80      	ldr	r3, [pc, #512]	; (800111c <main+0xcdc>)
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	4b80      	ldr	r3, [pc, #512]	; (8001120 <main+0xce0>)
 8000f20:	fba3 1302 	umull	r1, r3, r3, r2
 8000f24:	08d9      	lsrs	r1, r3, #3
 8000f26:	460b      	mov	r3, r1
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3330      	adds	r3, #48	; 0x30
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b7b      	ldr	r3, [pc, #492]	; (8001124 <main+0xce4>)
 8000f38:	711a      	strb	r2, [r3, #4]


				 controdoc=doc(&tren,&duoi);
 8000f3a:	497b      	ldr	r1, [pc, #492]	; (8001128 <main+0xce8>)
 8000f3c:	487b      	ldr	r0, [pc, #492]	; (800112c <main+0xcec>)
 8000f3e:	f7ff fa15 	bl	800036c <doc>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b7a      	ldr	r3, [pc, #488]	; (8001130 <main+0xcf0>)
 8000f48:	701a      	strb	r2, [r3, #0]
				 controngang=ngang(&trai,&phai);
 8000f4a:	497a      	ldr	r1, [pc, #488]	; (8001134 <main+0xcf4>)
 8000f4c:	487a      	ldr	r0, [pc, #488]	; (8001138 <main+0xcf8>)
 8000f4e:	f7ff fa47 	bl	80003e0 <ngang>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b79      	ldr	r3, [pc, #484]	; (800113c <main+0xcfc>)
 8000f58:	701a      	strb	r2, [r3, #0]
				 ssd1306_SetCursor(0,0);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f002 f88d 	bl	800307c <ssd1306_SetCursor>
				 ssd1306_WriteString("Time Set",Font_11x18,White);
 8000f62:	4a77      	ldr	r2, [pc, #476]	; (8001140 <main+0xd00>)
 8000f64:	2301      	movs	r3, #1
 8000f66:	ca06      	ldmia	r2, {r1, r2}
 8000f68:	4876      	ldr	r0, [pc, #472]	; (8001144 <main+0xd04>)
 8000f6a:	f002 f861 	bl	8003030 <ssd1306_WriteString>
				 ssd1306_UpdateScreen();
 8000f6e:	f001 ff5d 	bl	8002e2c <ssd1306_UpdateScreen>
				 ssd1306_SetCursor(0,18);
 8000f72:	2112      	movs	r1, #18
 8000f74:	2000      	movs	r0, #0
 8000f76:	f002 f881 	bl	800307c <ssd1306_SetCursor>
				 ssd1306_WriteString("X.Man hinh chinh",Font_7x10,White);
 8000f7a:	4a73      	ldr	r2, [pc, #460]	; (8001148 <main+0xd08>)
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	ca06      	ldmia	r2, {r1, r2}
 8000f80:	4872      	ldr	r0, [pc, #456]	; (800114c <main+0xd0c>)
 8000f82:	f002 f855 	bl	8003030 <ssd1306_WriteString>
				 ssd1306_SetCursor(0,28);
 8000f86:	211c      	movs	r1, #28
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f002 f877 	bl	800307c <ssd1306_SetCursor>
				 ssd1306_WriteString(giophut_a,Font_7x10,White);
 8000f8e:	4a6e      	ldr	r2, [pc, #440]	; (8001148 <main+0xd08>)
 8000f90:	2301      	movs	r3, #1
 8000f92:	ca06      	ldmia	r2, {r1, r2}
 8000f94:	4863      	ldr	r0, [pc, #396]	; (8001124 <main+0xce4>)
 8000f96:	f002 f84b 	bl	8003030 <ssd1306_WriteString>
				 ssd1306_UpdateScreen();
 8000f9a:	f001 ff47 	bl	8002e2c <ssd1306_UpdateScreen>
				 ssd1306_SetCursor(0,38);
 8000f9e:	2126      	movs	r1, #38	; 0x26
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f002 f86b 	bl	800307c <ssd1306_SetCursor>
				 ssd1306_WriteString("----------------",Font_7x10,White);
 8000fa6:	4a68      	ldr	r2, [pc, #416]	; (8001148 <main+0xd08>)
 8000fa8:	2301      	movs	r3, #1
 8000faa:	ca06      	ldmia	r2, {r1, r2}
 8000fac:	4868      	ldr	r0, [pc, #416]	; (8001150 <main+0xd10>)
 8000fae:	f002 f83f 	bl	8003030 <ssd1306_WriteString>
				 ssd1306_UpdateScreen();
 8000fb2:	f001 ff3b 	bl	8002e2c <ssd1306_UpdateScreen>
				 ssd1306_SetCursor(0,48);
 8000fb6:	2130      	movs	r1, #48	; 0x30
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f002 f85f 	bl	800307c <ssd1306_SetCursor>
				 ssd1306_WriteString("----------------",Font_7x10,White);
 8000fbe:	4a62      	ldr	r2, [pc, #392]	; (8001148 <main+0xd08>)
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	ca06      	ldmia	r2, {r1, r2}
 8000fc4:	4862      	ldr	r0, [pc, #392]	; (8001150 <main+0xd10>)
 8000fc6:	f002 f833 	bl	8003030 <ssd1306_WriteString>
				 ssd1306_UpdateScreen();
 8000fca:	f001 ff2f 	bl	8002e2c <ssd1306_UpdateScreen>
				 ssd1306_SetCursor(0+controngang*7,8+controdoc*10);
 8000fce:	4b5b      	ldr	r3, [pc, #364]	; (800113c <main+0xcfc>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	00d2      	lsls	r2, r2, #3
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b55      	ldr	r3, [pc, #340]	; (8001130 <main+0xcf0>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	0089      	lsls	r1, r1, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3308      	adds	r3, #8
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	4610      	mov	r0, r2
 8000ff0:	f002 f844 	bl	800307c <ssd1306_SetCursor>
				 ssd1306_WriteString(" ",Font_7x10,Black);
 8000ff4:	4a54      	ldr	r2, [pc, #336]	; (8001148 <main+0xd08>)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	ca06      	ldmia	r2, {r1, r2}
 8000ffa:	4856      	ldr	r0, [pc, #344]	; (8001154 <main+0xd14>)
 8000ffc:	f002 f818 	bl	8003030 <ssd1306_WriteString>
				 ssd1306_UpdateScreen();
 8001000:	f001 ff14 	bl	8002e2c <ssd1306_UpdateScreen>
				 if (ok==1){
 8001004:	4b54      	ldr	r3, [pc, #336]	; (8001158 <main+0xd18>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b01      	cmp	r3, #1
 800100c:	f040 8104 	bne.w	8001218 <main+0xdd8>
					 ok=0;
 8001010:	4b51      	ldr	r3, [pc, #324]	; (8001158 <main+0xd18>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
					 set=1;
 8001016:	4b51      	ldr	r3, [pc, #324]	; (800115c <main+0xd1c>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
					 while (ok==0){
 800101c:	e0e2      	b.n	80011e4 <main+0xda4>
						 if (controdoc==2 && controngang==1) {
 800101e:	4b44      	ldr	r3, [pc, #272]	; (8001130 <main+0xcf0>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d12d      	bne.n	8001082 <main+0xc42>
 8001026:	4b45      	ldr	r3, [pc, #276]	; (800113c <main+0xcfc>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d129      	bne.n	8001082 <main+0xc42>
							 timealrm[1]=doc(&tren,&duoi);//gio
 800102e:	493e      	ldr	r1, [pc, #248]	; (8001128 <main+0xce8>)
 8001030:	483e      	ldr	r0, [pc, #248]	; (800112c <main+0xcec>)
 8001032:	f7ff f99b 	bl	800036c <doc>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <main+0xcdc>)
 800103c:	705a      	strb	r2, [r3, #1]
							 if (timealrm[1]>23) timealrm[1]=0;
 800103e:	4b37      	ldr	r3, [pc, #220]	; (800111c <main+0xcdc>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	2b17      	cmp	r3, #23
 8001044:	d902      	bls.n	800104c <main+0xc0c>
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <main+0xcdc>)
 8001048:	2200      	movs	r2, #0
 800104a:	705a      	strb	r2, [r3, #1]
							 if (timealrm[1]<0) timealrm[1]=23;
							 giophut_a[0]=((timealrm[1])/10) +48;//gio
 800104c:	4b33      	ldr	r3, [pc, #204]	; (800111c <main+0xcdc>)
 800104e:	785b      	ldrb	r3, [r3, #1]
 8001050:	4a33      	ldr	r2, [pc, #204]	; (8001120 <main+0xce0>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	08db      	lsrs	r3, r3, #3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	3330      	adds	r3, #48	; 0x30
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <main+0xce4>)
 8001060:	701a      	strb	r2, [r3, #0]
							 giophut_a[1]=((timealrm[1])%10) +48;
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <main+0xcdc>)
 8001064:	785a      	ldrb	r2, [r3, #1]
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <main+0xce0>)
 8001068:	fba3 1302 	umull	r1, r3, r3, r2
 800106c:	08d9      	lsrs	r1, r3, #3
 800106e:	460b      	mov	r3, r1
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	3330      	adds	r3, #48	; 0x30
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b29      	ldr	r3, [pc, #164]	; (8001124 <main+0xce4>)
 8001080:	705a      	strb	r2, [r3, #1]
						 }
						 if (controdoc==2 && controngang==4) {
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <main+0xcf0>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d12d      	bne.n	80010e6 <main+0xca6>
 800108a:	4b2c      	ldr	r3, [pc, #176]	; (800113c <main+0xcfc>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b04      	cmp	r3, #4
 8001090:	d129      	bne.n	80010e6 <main+0xca6>
							 timealrm[0]=doc(&tren,&duoi);//phut
 8001092:	4925      	ldr	r1, [pc, #148]	; (8001128 <main+0xce8>)
 8001094:	4825      	ldr	r0, [pc, #148]	; (800112c <main+0xcec>)
 8001096:	f7ff f969 	bl	800036c <doc>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <main+0xcdc>)
 80010a0:	701a      	strb	r2, [r3, #0]
							 if (timealrm[0]>59) timealrm[0]=0;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <main+0xcdc>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b3b      	cmp	r3, #59	; 0x3b
 80010a8:	d902      	bls.n	80010b0 <main+0xc70>
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <main+0xcdc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
							 if (timealrm[0]<0) timealrm[0]=59;
							 giophut_a[3]=((timealrm[0])/10) +48;//phut
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <main+0xcdc>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4a1a      	ldr	r2, [pc, #104]	; (8001120 <main+0xce0>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	08db      	lsrs	r3, r3, #3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	3330      	adds	r3, #48	; 0x30
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <main+0xce4>)
 80010c4:	70da      	strb	r2, [r3, #3]
							 giophut_a[4]=((timealrm[0])%10) +48;
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <main+0xcdc>)
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <main+0xce0>)
 80010cc:	fba3 1302 	umull	r1, r3, r3, r2
 80010d0:	08d9      	lsrs	r1, r3, #3
 80010d2:	460b      	mov	r3, r1
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	3330      	adds	r3, #48	; 0x30
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <main+0xce4>)
 80010e4:	711a      	strb	r2, [r3, #4]
						 }
						 if (mode==0 && controdoc==1){
 80010e6:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <main+0xd20>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d13f      	bne.n	8001170 <main+0xd30>
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <main+0xcf0>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d13b      	bne.n	8001170 <main+0xd30>
							 set=0;
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <main+0xd1c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
							 tat=0;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <main+0xcd8>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
							 write_sd("","tb.txt",ghi,timealrm,2);
 8001104:	2302      	movs	r3, #2
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <main+0xcdc>)
 800110a:	4a16      	ldr	r2, [pc, #88]	; (8001164 <main+0xd24>)
 800110c:	4916      	ldr	r1, [pc, #88]	; (8001168 <main+0xd28>)
 800110e:	4817      	ldr	r0, [pc, #92]	; (800116c <main+0xd2c>)
 8001110:	f000 ff82 	bl	8002018 <write_sd>
							 break;
 8001114:	e06c      	b.n	80011f0 <main+0xdb0>
 8001116:	bf00      	nop
 8001118:	20000342 	.word	0x20000342
 800111c:	20000338 	.word	0x20000338
 8001120:	cccccccd 	.word	0xcccccccd
 8001124:	20000040 	.word	0x20000040
 8001128:	2000034b 	.word	0x2000034b
 800112c:	2000034a 	.word	0x2000034a
 8001130:	20000344 	.word	0x20000344
 8001134:	20000349 	.word	0x20000349
 8001138:	20000348 	.word	0x20000348
 800113c:	20000346 	.word	0x20000346
 8001140:	20000088 	.word	0x20000088
 8001144:	0800a980 	.word	0x0800a980
 8001148:	20000080 	.word	0x20000080
 800114c:	0800a9ec 	.word	0x0800a9ec
 8001150:	0800aa00 	.word	0x0800aa00
 8001154:	0800a9b4 	.word	0x0800a9b4
 8001158:	20000347 	.word	0x20000347
 800115c:	20000341 	.word	0x20000341
 8001160:	20000343 	.word	0x20000343
 8001164:	2000034c 	.word	0x2000034c
 8001168:	0800a960 	.word	0x0800a960
 800116c:	0800a968 	.word	0x0800a968
						 }
						 ssd1306_SetCursor(0,0);
 8001170:	2100      	movs	r1, #0
 8001172:	2000      	movs	r0, #0
 8001174:	f001 ff82 	bl	800307c <ssd1306_SetCursor>
						 ssd1306_WriteString("Time Set",Font_11x18,White);
 8001178:	4a2d      	ldr	r2, [pc, #180]	; (8001230 <main+0xdf0>)
 800117a:	2301      	movs	r3, #1
 800117c:	ca06      	ldmia	r2, {r1, r2}
 800117e:	482d      	ldr	r0, [pc, #180]	; (8001234 <main+0xdf4>)
 8001180:	f001 ff56 	bl	8003030 <ssd1306_WriteString>
						 ssd1306_UpdateScreen();
 8001184:	f001 fe52 	bl	8002e2c <ssd1306_UpdateScreen>
						 ssd1306_SetCursor(0,18);
 8001188:	2112      	movs	r1, #18
 800118a:	2000      	movs	r0, #0
 800118c:	f001 ff76 	bl	800307c <ssd1306_SetCursor>
						 ssd1306_WriteString("X-Man hinh chinh",Font_7x10,White);
 8001190:	4a29      	ldr	r2, [pc, #164]	; (8001238 <main+0xdf8>)
 8001192:	2301      	movs	r3, #1
 8001194:	ca06      	ldmia	r2, {r1, r2}
 8001196:	4829      	ldr	r0, [pc, #164]	; (800123c <main+0xdfc>)
 8001198:	f001 ff4a 	bl	8003030 <ssd1306_WriteString>
						 ssd1306_SetCursor(0,28);
 800119c:	211c      	movs	r1, #28
 800119e:	2000      	movs	r0, #0
 80011a0:	f001 ff6c 	bl	800307c <ssd1306_SetCursor>
						 ssd1306_WriteString(giophut_a,Font_7x10,White);
 80011a4:	4a24      	ldr	r2, [pc, #144]	; (8001238 <main+0xdf8>)
 80011a6:	2301      	movs	r3, #1
 80011a8:	ca06      	ldmia	r2, {r1, r2}
 80011aa:	4825      	ldr	r0, [pc, #148]	; (8001240 <main+0xe00>)
 80011ac:	f001 ff40 	bl	8003030 <ssd1306_WriteString>
						 ssd1306_UpdateScreen();
 80011b0:	f001 fe3c 	bl	8002e2c <ssd1306_UpdateScreen>
						 ssd1306_SetCursor(0,38);
 80011b4:	2126      	movs	r1, #38	; 0x26
 80011b6:	2000      	movs	r0, #0
 80011b8:	f001 ff60 	bl	800307c <ssd1306_SetCursor>
						 ssd1306_WriteString("Dang cai dat     ",Font_7x10,White);
 80011bc:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <main+0xdf8>)
 80011be:	2301      	movs	r3, #1
 80011c0:	ca06      	ldmia	r2, {r1, r2}
 80011c2:	4820      	ldr	r0, [pc, #128]	; (8001244 <main+0xe04>)
 80011c4:	f001 ff34 	bl	8003030 <ssd1306_WriteString>
						 ssd1306_UpdateScreen();
 80011c8:	f001 fe30 	bl	8002e2c <ssd1306_UpdateScreen>
						 ssd1306_SetCursor(0,48);
 80011cc:	2130      	movs	r1, #48	; 0x30
 80011ce:	2000      	movs	r0, #0
 80011d0:	f001 ff54 	bl	800307c <ssd1306_SetCursor>
						 ssd1306_WriteString("                 ",Font_7x10,White);
 80011d4:	4a18      	ldr	r2, [pc, #96]	; (8001238 <main+0xdf8>)
 80011d6:	2301      	movs	r3, #1
 80011d8:	ca06      	ldmia	r2, {r1, r2}
 80011da:	481b      	ldr	r0, [pc, #108]	; (8001248 <main+0xe08>)
 80011dc:	f001 ff28 	bl	8003030 <ssd1306_WriteString>
						 ssd1306_UpdateScreen();
 80011e0:	f001 fe24 	bl	8002e2c <ssd1306_UpdateScreen>
					 while (ok==0){
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <main+0xe0c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f43f af17 	beq.w	800101e <main+0xbde>
					 }//while
					 tat=0;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <main+0xe10>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
					 write_sd("","tb.txt",ghi,timealrm,2);
 80011f6:	2302      	movs	r3, #2
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <main+0xe14>)
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <main+0xe18>)
 80011fe:	4917      	ldr	r1, [pc, #92]	; (800125c <main+0xe1c>)
 8001200:	4817      	ldr	r0, [pc, #92]	; (8001260 <main+0xe20>)
 8001202:	f000 ff09 	bl	8002018 <write_sd>
					 ok=0;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <main+0xe0c>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
					 set=0;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <main+0xe24>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
					 controdoc = 1;
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <main+0xe28>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
			 while (mode==4){
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <main+0xe2c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b04      	cmp	r3, #4
 8001220:	f43f ae52 	beq.w	8000ec8 <main+0xa88>
				 }
			 }
			 ssd1306_Init();
 8001224:	f001 fd80 	bl	8002d28 <ssd1306_Init>
			 break;
 8001228:	bf00      	nop
	switch (mode){
 800122a:	f7ff b94c 	b.w	80004c6 <main+0x86>
 800122e:	bf00      	nop
 8001230:	20000088 	.word	0x20000088
 8001234:	0800a980 	.word	0x0800a980
 8001238:	20000080 	.word	0x20000080
 800123c:	0800aa14 	.word	0x0800aa14
 8001240:	20000040 	.word	0x20000040
 8001244:	0800aa28 	.word	0x0800aa28
 8001248:	0800a98c 	.word	0x0800a98c
 800124c:	20000347 	.word	0x20000347
 8001250:	20000342 	.word	0x20000342
 8001254:	20000338 	.word	0x20000338
 8001258:	2000034c 	.word	0x2000034c
 800125c:	0800a960 	.word	0x0800a960
 8001260:	0800a968 	.word	0x0800a968
 8001264:	20000341 	.word	0x20000341
 8001268:	20000344 	.word	0x20000344
 800126c:	20000343 	.word	0x20000343

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b090      	sub	sp, #64	; 0x40
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	2228      	movs	r2, #40	; 0x28
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f009 fb5a 	bl	800a938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a0:	2301      	movs	r3, #1
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a4:	2302      	movs	r3, #2
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 fb95 	bl	80059e8 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012c4:	f000 fad4 	bl	8001870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	2302      	movs	r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2102      	movs	r1, #2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fe02 	bl	8005eec <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012ee:	f000 fabf 	bl	8001870 <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3740      	adds	r7, #64	; 0x40
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_I2C1_Init+0x50>)
 8001302:	4a13      	ldr	r2, [pc, #76]	; (8001350 <MX_I2C1_Init+0x54>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_I2C1_Init+0x50>)
 8001308:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_I2C1_Init+0x58>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_I2C1_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_I2C1_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_I2C1_Init+0x50>)
 800131a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800131e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <MX_I2C1_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_I2C1_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_I2C1_Init+0x50>)
 800133a:	f002 fb37 	bl	80039ac <HAL_I2C_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001344:	f000 fa94 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200000c8 	.word	0x200000c8
 8001350:	40005400 	.word	0x40005400
 8001354:	000186a0 	.word	0x000186a0

08001358 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_I2C2_Init+0x50>)
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <MX_I2C2_Init+0x54>)
 8001360:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_I2C2_Init+0x50>)
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_I2C2_Init+0x58>)
 8001366:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_I2C2_Init+0x50>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_I2C2_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_I2C2_Init+0x50>)
 8001376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800137a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <MX_I2C2_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_I2C2_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <MX_I2C2_Init+0x50>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_I2C2_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <MX_I2C2_Init+0x50>)
 8001396:	f002 fb09 	bl	80039ac <HAL_I2C_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013a0:	f000 fa66 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000011c 	.word	0x2000011c
 80013ac:	40005800 	.word	0x40005800
 80013b0:	000186a0 	.word	0x000186a0

080013b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_SPI1_Init+0x64>)
 80013ba:	4a18      	ldr	r2, [pc, #96]	; (800141c <MX_SPI1_Init+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_SPI1_Init+0x64>)
 80013c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_SPI1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_SPI1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_SPI1_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_SPI1_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_SPI1_Init+0x64>)
 80013e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_SPI1_Init+0x64>)
 80013e8:	2208      	movs	r2, #8
 80013ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_SPI1_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_SPI1_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <MX_SPI1_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_SPI1_Init+0x64>)
 8001400:	220a      	movs	r2, #10
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_SPI1_Init+0x64>)
 8001406:	f004 feeb 	bl	80061e0 <HAL_SPI_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001410:	f000 fa2e 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000170 	.word	0x20000170
 800141c:	40013000 	.word	0x40013000

08001420 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_SPI2_Init+0x64>)
 8001426:	4a18      	ldr	r2, [pc, #96]	; (8001488 <MX_SPI2_Init+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_SPI2_Init+0x64>)
 800142c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001430:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_SPI2_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_SPI2_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_SPI2_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_SPI2_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_SPI2_Init+0x64>)
 800144c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001450:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_SPI2_Init+0x64>)
 8001454:	2208      	movs	r2, #8
 8001456:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_SPI2_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_SPI2_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_SPI2_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_SPI2_Init+0x64>)
 800146c:	220a      	movs	r2, #10
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_SPI2_Init+0x64>)
 8001472:	f004 feb5 	bl	80061e0 <HAL_SPI_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800147c:	f000 f9f8 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200001c8 	.word	0x200001c8
 8001488:	40003800 	.word	0x40003800

0800148c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	; 0x38
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014bc:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <MX_TIM2_Init+0xe4>)
 80014be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <MX_TIM2_Init+0xe4>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <MX_TIM2_Init+0xe4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_TIM2_Init+0xe4>)
 80014d2:	22ff      	movs	r2, #255	; 0xff
 80014d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_TIM2_Init+0xe4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_TIM2_Init+0xe4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e2:	4823      	ldr	r0, [pc, #140]	; (8001570 <MX_TIM2_Init+0xe4>)
 80014e4:	f005 fbaa 	bl	8006c3c <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80014ee:	f000 f9bf 	bl	8001870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fc:	4619      	mov	r1, r3
 80014fe:	481c      	ldr	r0, [pc, #112]	; (8001570 <MX_TIM2_Init+0xe4>)
 8001500:	f005 ff30 	bl	8007364 <HAL_TIM_ConfigClockSource>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800150a:	f000 f9b1 	bl	8001870 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800150e:	4818      	ldr	r0, [pc, #96]	; (8001570 <MX_TIM2_Init+0xe4>)
 8001510:	f005 fc64 	bl	8006ddc <HAL_TIM_PWM_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800151a:	f000 f9a9 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	4619      	mov	r1, r3
 800152c:	4810      	ldr	r0, [pc, #64]	; (8001570 <MX_TIM2_Init+0xe4>)
 800152e:	f006 faa9 	bl	8007a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001538:	f000 f99a 	bl	8001870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153c:	2360      	movs	r3, #96	; 0x60
 800153e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	4619      	mov	r1, r3
 8001552:	4807      	ldr	r0, [pc, #28]	; (8001570 <MX_TIM2_Init+0xe4>)
 8001554:	f005 fe44 	bl	80071e0 <HAL_TIM_PWM_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800155e:	f000 f987 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <MX_TIM2_Init+0xe4>)
 8001564:	f000 fb12 	bl	8001b8c <HAL_TIM_MspPostInit>

}
 8001568:	bf00      	nop
 800156a:	3738      	adds	r7, #56	; 0x38
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000220 	.word	0x20000220

08001574 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_TIM3_Init+0x90>)
 8001592:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <MX_TIM3_Init+0x94>)
 8001594:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_TIM3_Init+0x90>)
 8001598:	2224      	movs	r2, #36	; 0x24
 800159a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_TIM3_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 125;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_TIM3_Init+0x90>)
 80015a4:	227d      	movs	r2, #125	; 0x7d
 80015a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_TIM3_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_TIM3_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b4:	4813      	ldr	r0, [pc, #76]	; (8001604 <MX_TIM3_Init+0x90>)
 80015b6:	f005 fb41 	bl	8006c3c <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80015c0:	f000 f956 	bl	8001870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <MX_TIM3_Init+0x90>)
 80015d2:	f005 fec7 	bl	8007364 <HAL_TIM_ConfigClockSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80015dc:	f000 f948 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_TIM3_Init+0x90>)
 80015ee:	f006 fa49 	bl	8007a84 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80015f8:	f000 f93a 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000268 	.word	0x20000268
 8001608:	40000400 	.word	0x40000400

0800160c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_TIM4_Init+0x94>)
 800162a:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <MX_TIM4_Init+0x98>)
 800162c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001630:	2247      	movs	r2, #71	; 0x47
 8001632:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_TIM4_Init+0x94>)
 800163c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001640:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_TIM4_Init+0x94>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800164e:	4814      	ldr	r0, [pc, #80]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001650:	f005 faf4 	bl	8006c3c <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800165a:	f000 f909 	bl	8001870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001662:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	4619      	mov	r1, r3
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <MX_TIM4_Init+0x94>)
 800166c:	f005 fe7a 	bl	8007364 <HAL_TIM_ConfigClockSource>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001676:	f000 f8fb 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001682:	463b      	mov	r3, r7
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001688:	f006 f9fc 	bl	8007a84 <HAL_TIMEx_MasterConfigSynchronization>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001692:	f000 f8ed 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200002b0 	.word	0x200002b0
 80016a4:	40000800 	.word	0x40000800

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016bc:	4b67      	ldr	r3, [pc, #412]	; (800185c <MX_GPIO_Init+0x1b4>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a66      	ldr	r2, [pc, #408]	; (800185c <MX_GPIO_Init+0x1b4>)
 80016c2:	f043 0310 	orr.w	r3, r3, #16
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b64      	ldr	r3, [pc, #400]	; (800185c <MX_GPIO_Init+0x1b4>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d4:	4b61      	ldr	r3, [pc, #388]	; (800185c <MX_GPIO_Init+0x1b4>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a60      	ldr	r2, [pc, #384]	; (800185c <MX_GPIO_Init+0x1b4>)
 80016da:	f043 0320 	orr.w	r3, r3, #32
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b5e      	ldr	r3, [pc, #376]	; (800185c <MX_GPIO_Init+0x1b4>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0320 	and.w	r3, r3, #32
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b5b      	ldr	r3, [pc, #364]	; (800185c <MX_GPIO_Init+0x1b4>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a5a      	ldr	r2, [pc, #360]	; (800185c <MX_GPIO_Init+0x1b4>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b58      	ldr	r3, [pc, #352]	; (800185c <MX_GPIO_Init+0x1b4>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001704:	4b55      	ldr	r3, [pc, #340]	; (800185c <MX_GPIO_Init+0x1b4>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a54      	ldr	r2, [pc, #336]	; (800185c <MX_GPIO_Init+0x1b4>)
 800170a:	f043 0308 	orr.w	r3, r3, #8
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b52      	ldr	r3, [pc, #328]	; (800185c <MX_GPIO_Init+0x1b4>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001722:	484f      	ldr	r0, [pc, #316]	; (8001860 <MX_GPIO_Init+0x1b8>)
 8001724:	f002 f912 	bl	800394c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cs_Pin|GPIO_PIN_8|DHT11_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 800172e:	484d      	ldr	r0, [pc, #308]	; (8001864 <MX_GPIO_Init+0x1bc>)
 8001730:	f002 f90c 	bl	800394c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, dc_Pin|rs_Pin|SD_CARD_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f241 0103 	movw	r1, #4099	; 0x1003
 800173a:	484b      	ldr	r0, [pc, #300]	; (8001868 <MX_GPIO_Init+0x1c0>)
 800173c:	f002 f906 	bl	800394c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2302      	movs	r3, #2
 8001750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	4619      	mov	r1, r3
 8001758:	4841      	ldr	r0, [pc, #260]	; (8001860 <MX_GPIO_Init+0x1b8>)
 800175a:	f001 ff73 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : OK_Pin TRAI_Pin PHAI_Pin */
  GPIO_InitStruct.Pin = OK_Pin|TRAI_Pin|PHAI_Pin;
 800175e:	230e      	movs	r3, #14
 8001760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001762:	4b42      	ldr	r3, [pc, #264]	; (800186c <MX_GPIO_Init+0x1c4>)
 8001764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001766:	2301      	movs	r3, #1
 8001768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	4619      	mov	r1, r3
 8001770:	483c      	ldr	r0, [pc, #240]	; (8001864 <MX_GPIO_Init+0x1bc>)
 8001772:	f001 ff67 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pin : cs_Pin */
  GPIO_InitStruct.Pin = cs_Pin;
 8001776:	2310      	movs	r3, #16
 8001778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(cs_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	4619      	mov	r1, r3
 800178c:	4835      	ldr	r0, [pc, #212]	; (8001864 <MX_GPIO_Init+0x1bc>)
 800178e:	f001 ff59 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : dc_Pin rs_Pin */
  GPIO_InitStruct.Pin = dc_Pin|rs_Pin;
 8001792:	2303      	movs	r3, #3
 8001794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4619      	mov	r1, r3
 80017a8:	482f      	ldr	r0, [pc, #188]	; (8001868 <MX_GPIO_Init+0x1c0>)
 80017aa:	f001 ff4b 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CARD_Pin */
  GPIO_InitStruct.Pin = SD_CARD_Pin;
 80017ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2302      	movs	r3, #2
 80017be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CARD_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4619      	mov	r1, r3
 80017c6:	4828      	ldr	r0, [pc, #160]	; (8001868 <MX_GPIO_Init+0x1c0>)
 80017c8:	f001 ff3c 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 DHT11_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|DHT11_Pin;
 80017cc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80017d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2302      	movs	r3, #2
 80017dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	4619      	mov	r1, r3
 80017e4:	481f      	ldr	r0, [pc, #124]	; (8001864 <MX_GPIO_Init+0x1bc>)
 80017e6:	f001 ff2d 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : DUOI_Pin TREN_Pin */
  GPIO_InitStruct.Pin = DUOI_Pin|TREN_Pin;
 80017ea:	2330      	movs	r3, #48	; 0x30
 80017ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_GPIO_Init+0x1c4>)
 80017f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4619      	mov	r1, r3
 80017fc:	481a      	ldr	r0, [pc, #104]	; (8001868 <MX_GPIO_Init+0x1c0>)
 80017fe:	f001 ff21 	bl	8003644 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2101      	movs	r1, #1
 8001806:	2007      	movs	r0, #7
 8001808:	f001 fe5f 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800180c:	2007      	movs	r0, #7
 800180e:	f001 fe78 	bl	8003502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2101      	movs	r1, #1
 8001816:	2008      	movs	r0, #8
 8001818:	f001 fe57 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800181c:	2008      	movs	r0, #8
 800181e:	f001 fe70 	bl	8003502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2101      	movs	r1, #1
 8001826:	2009      	movs	r0, #9
 8001828:	f001 fe4f 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800182c:	2009      	movs	r0, #9
 800182e:	f001 fe68 	bl	8003502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2101      	movs	r1, #1
 8001836:	200a      	movs	r0, #10
 8001838:	f001 fe47 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800183c:	200a      	movs	r0, #10
 800183e:	f001 fe60 	bl	8003502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2101      	movs	r1, #1
 8001846:	2017      	movs	r0, #23
 8001848:	f001 fe3f 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800184c:	2017      	movs	r0, #23
 800184e:	f001 fe58 	bl	8003502 <HAL_NVIC_EnableIRQ>

}
 8001852:	bf00      	nop
 8001854:	3720      	adds	r7, #32
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	40011000 	.word	0x40011000
 8001864:	40010800 	.word	0x40010800
 8001868:	40010c00 	.word	0x40010c00
 800186c:	10210000 	.word	0x10210000

08001870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001878:	e7fe      	b.n	8001878 <Error_Handler+0x8>
	...

0800187c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_MspInit+0x5c>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <HAL_MspInit+0x5c>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6193      	str	r3, [r2, #24]
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_MspInit+0x5c>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_MspInit+0x5c>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_MspInit+0x5c>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_MspInit+0x5c>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_MspInit+0x60>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_MspInit+0x60>)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010000 	.word	0x40010000

080018e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0318 	add.w	r3, r7, #24
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a33      	ldr	r2, [pc, #204]	; (80019c8 <HAL_I2C_MspInit+0xe8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d12c      	bne.n	800195a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	4b32      	ldr	r3, [pc, #200]	; (80019cc <HAL_I2C_MspInit+0xec>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a31      	ldr	r2, [pc, #196]	; (80019cc <HAL_I2C_MspInit+0xec>)
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <HAL_I2C_MspInit+0xec>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001918:	23c0      	movs	r3, #192	; 0xc0
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191c:	2312      	movs	r3, #18
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f107 0318 	add.w	r3, r7, #24
 8001928:	4619      	mov	r1, r3
 800192a:	4829      	ldr	r0, [pc, #164]	; (80019d0 <HAL_I2C_MspInit+0xf0>)
 800192c:	f001 fe8a 	bl	8003644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001930:	4b26      	ldr	r3, [pc, #152]	; (80019cc <HAL_I2C_MspInit+0xec>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	4a25      	ldr	r2, [pc, #148]	; (80019cc <HAL_I2C_MspInit+0xec>)
 8001936:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800193a:	61d3      	str	r3, [r2, #28]
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <HAL_I2C_MspInit+0xec>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2102      	movs	r1, #2
 800194c:	201f      	movs	r0, #31
 800194e:	f001 fdbc 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001952:	201f      	movs	r0, #31
 8001954:	f001 fdd5 	bl	8003502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001958:	e031      	b.n	80019be <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_I2C_MspInit+0xf4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d12c      	bne.n	80019be <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_I2C_MspInit+0xec>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a18      	ldr	r2, [pc, #96]	; (80019cc <HAL_I2C_MspInit+0xec>)
 800196a:	f043 0308 	orr.w	r3, r3, #8
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <HAL_I2C_MspInit+0xec>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800197c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001982:	2312      	movs	r3, #18
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 0318 	add.w	r3, r7, #24
 800198e:	4619      	mov	r1, r3
 8001990:	480f      	ldr	r0, [pc, #60]	; (80019d0 <HAL_I2C_MspInit+0xf0>)
 8001992:	f001 fe57 	bl	8003644 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_I2C_MspInit+0xec>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <HAL_I2C_MspInit+0xec>)
 800199c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_I2C_MspInit+0xec>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 2, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2102      	movs	r1, #2
 80019b2:	2021      	movs	r0, #33	; 0x21
 80019b4:	f001 fd89 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80019b8:	2021      	movs	r0, #33	; 0x21
 80019ba:	f001 fda2 	bl	8003502 <HAL_NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40005400 	.word	0x40005400
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010c00 	.word	0x40010c00
 80019d4:	40005800 	.word	0x40005800

080019d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a3b      	ldr	r2, [pc, #236]	; (8001ae0 <HAL_SPI_MspInit+0x108>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d130      	bne.n	8001a5a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019f8:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <HAL_SPI_MspInit+0x10c>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a39      	ldr	r2, [pc, #228]	; (8001ae4 <HAL_SPI_MspInit+0x10c>)
 80019fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_SPI_MspInit+0x10c>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a10:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <HAL_SPI_MspInit+0x10c>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	4a33      	ldr	r2, [pc, #204]	; (8001ae4 <HAL_SPI_MspInit+0x10c>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6193      	str	r3, [r2, #24]
 8001a1c:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <HAL_SPI_MspInit+0x10c>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a28:	23a0      	movs	r3, #160	; 0xa0
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	482b      	ldr	r0, [pc, #172]	; (8001ae8 <HAL_SPI_MspInit+0x110>)
 8001a3c:	f001 fe02 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a40:	2340      	movs	r3, #64	; 0x40
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 0318 	add.w	r3, r7, #24
 8001a50:	4619      	mov	r1, r3
 8001a52:	4825      	ldr	r0, [pc, #148]	; (8001ae8 <HAL_SPI_MspInit+0x110>)
 8001a54:	f001 fdf6 	bl	8003644 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a58:	e03e      	b.n	8001ad8 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a23      	ldr	r2, [pc, #140]	; (8001aec <HAL_SPI_MspInit+0x114>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d139      	bne.n	8001ad8 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <HAL_SPI_MspInit+0x10c>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <HAL_SPI_MspInit+0x10c>)
 8001a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6e:	61d3      	str	r3, [r2, #28]
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_SPI_MspInit+0x10c>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_SPI_MspInit+0x10c>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <HAL_SPI_MspInit+0x10c>)
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_SPI_MspInit+0x10c>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a94:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa2:	f107 0318 	add.w	r3, r7, #24
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4811      	ldr	r0, [pc, #68]	; (8001af0 <HAL_SPI_MspInit+0x118>)
 8001aaa:	f001 fdcb 	bl	8003644 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001aae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 0318 	add.w	r3, r7, #24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480b      	ldr	r0, [pc, #44]	; (8001af0 <HAL_SPI_MspInit+0x118>)
 8001ac4:	f001 fdbe 	bl	8003644 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2102      	movs	r1, #2
 8001acc:	2024      	movs	r0, #36	; 0x24
 8001ace:	f001 fcfc 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001ad2:	2024      	movs	r0, #36	; 0x24
 8001ad4:	f001 fd15 	bl	8003502 <HAL_NVIC_EnableIRQ>
}
 8001ad8:	bf00      	nop
 8001ada:	3728      	adds	r7, #40	; 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40013000 	.word	0x40013000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	40003800 	.word	0x40003800
 8001af0:	40010c00 	.word	0x40010c00

08001af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b04:	d10c      	bne.n	8001b20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_TIM_Base_MspInit+0x8c>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <HAL_TIM_Base_MspInit+0x8c>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	61d3      	str	r3, [r2, #28]
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_TIM_Base_MspInit+0x8c>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b1e:	e02a      	b.n	8001b76 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_TIM_Base_MspInit+0x90>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d114      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_TIM_Base_MspInit+0x8c>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <HAL_TIM_Base_MspInit+0x8c>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_TIM_Base_MspInit+0x8c>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2102      	movs	r1, #2
 8001b46:	201d      	movs	r0, #29
 8001b48:	f001 fcbf 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b4c:	201d      	movs	r0, #29
 8001b4e:	f001 fcd8 	bl	8003502 <HAL_NVIC_EnableIRQ>
}
 8001b52:	e010      	b.n	8001b76 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_TIM_Base_MspInit+0x94>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10b      	bne.n	8001b76 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_TIM_Base_MspInit+0x8c>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_TIM_Base_MspInit+0x8c>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	61d3      	str	r3, [r2, #28]
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_TIM_Base_MspInit+0x8c>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800

08001b8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001baa:	d12a      	bne.n	8001c02 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_TIM_MspPostInit+0x80>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <HAL_TIM_MspPostInit+0x80>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_TIM_MspPostInit+0x80>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480d      	ldr	r0, [pc, #52]	; (8001c10 <HAL_TIM_MspPostInit+0x84>)
 8001bda:	f001 fd33 	bl	8003644 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_TIM_MspPostInit+0x88>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <HAL_TIM_MspPostInit+0x88>)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010800 	.word	0x40010800
 8001c14:	40010000 	.word	0x40010000

08001c18 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <SDTimer_Handler+0x3c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <SDTimer_Handler+0x1c>
    Timer1--;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <SDTimer_Handler+0x3c>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <SDTimer_Handler+0x3c>)
 8001c32:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <SDTimer_Handler+0x40>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d006      	beq.n	8001c4c <SDTimer_Handler+0x34>
    Timer2--;
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <SDTimer_Handler+0x40>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <SDTimer_Handler+0x40>)
 8001c4a:	701a      	strb	r2, [r3, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	200009af 	.word	0x200009af
 8001c58:	200009b0 	.word	0x200009b0

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <NMI_Handler+0x4>

08001c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler+0x4>

08001c6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
	...

08001ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <SysTick_Handler+0x30>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <SysTick_Handler+0x30>)
 8001cb0:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <SysTick_Handler+0x30>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b09      	cmp	r3, #9
 8001cba:	d904      	bls.n	8001cc6 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <SysTick_Handler+0x30>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8001cc2:	f7ff ffa9 	bl	8001c18 <SDTimer_Handler>
		  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc6:	f001 fae9 	bl	800329c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200009ae 	.word	0x200009ae

08001cd4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OK_Pin);
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f001 fe4f 	bl	800397c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TRAI_Pin);
 8001ce6:	2004      	movs	r0, #4
 8001ce8:	f001 fe48 	bl	800397c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHAI_Pin);
 8001cf4:	2008      	movs	r0, #8
 8001cf6:	f001 fe41 	bl	800397c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DUOI_Pin);
 8001d02:	2010      	movs	r0, #16
 8001d04:	f001 fe3a 	bl	800397c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TREN_Pin);
 8001d10:	2020      	movs	r0, #32
 8001d12:	f001 fe33 	bl	800397c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <TIM3_IRQHandler+0x10>)
 8001d22:	f005 f955 	bl	8006fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000268 	.word	0x20000268

08001d30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <I2C1_EV_IRQHandler+0x10>)
 8001d36:	f002 fa23 	bl	8004180 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200000c8 	.word	0x200000c8

08001d44 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <I2C2_EV_IRQHandler+0x10>)
 8001d4a:	f002 fa19 	bl	8004180 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000011c 	.word	0x2000011c

08001d58 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <SPI2_IRQHandler+0x10>)
 8001d5e:	f004 fdb7 	bl	80068d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200001c8 	.word	0x200001c8

08001d6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <phatnhac>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void phatnhac()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <phatnhac+0x10>)
 8001d7e:	f004 ffad 	bl	8006cdc <HAL_TIM_Base_Start_IT>
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000268 	.word	0x20000268

08001d8c <readsdtxt>:
void readsdtxt(const TCHAR* fodler,const TCHAR* txt,char *buffer,uint8_t size)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	70fb      	strb	r3, [r7, #3]
	fresult = f_mount(&fs, fodler, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	4819      	ldr	r0, [pc, #100]	; (8001e04 <readsdtxt+0x78>)
 8001da0:	f007 fdde 	bl	8009960 <f_mount>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <readsdtxt+0x7c>)
 8001daa:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <readsdtxt+0x7c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <readsdtxt+0x36>
 8001db4:	2201      	movs	r2, #1
 8001db6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dba:	4814      	ldr	r0, [pc, #80]	; (8001e0c <readsdtxt+0x80>)
 8001dbc:	f001 fdc6 	bl	800394c <HAL_GPIO_WritePin>
 8001dc0:	e005      	b.n	8001dce <readsdtxt+0x42>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc8:	4810      	ldr	r0, [pc, #64]	; (8001e0c <readsdtxt+0x80>)
 8001dca:	f001 fdbf 	bl	800394c <HAL_GPIO_WritePin>
	fresult = f_open(&fil, txt, FA_READ);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	480f      	ldr	r0, [pc, #60]	; (8001e10 <readsdtxt+0x84>)
 8001dd4:	f007 fe0c 	bl	80099f0 <f_open>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <readsdtxt+0x7c>)
 8001dde:	701a      	strb	r2, [r3, #0]
	f_gets(buffer,size,&fil);
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <readsdtxt+0x84>)
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f008 fc75 	bl	800a6d6 <f_gets>
	fresult = f_close(&fil);
 8001dec:	4808      	ldr	r0, [pc, #32]	; (8001e10 <readsdtxt+0x84>)
 8001dee:	f008 fc4a 	bl	800a686 <f_close>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <readsdtxt+0x7c>)
 8001df8:	701a      	strb	r2, [r3, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200009b4 	.word	0x200009b4
 8001e08:	20000e10 	.word	0x20000e10
 8001e0c:	40011000 	.word	0x40011000
 8001e10:	20000be4 	.word	0x20000be4

08001e14 <str2uint8t>:
void str2uint8t(char *str, uint8_t *mang, uint8_t size)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	71fb      	strb	r3, [r7, #7]
	for (int i=0;i<size;i++){
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	e01a      	b.n	8001e5e <str2uint8t+0x4a>
		*(mang+i)=(*(str +i*2)-48)*16+(*(str +i*2+1)-48);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4413      	add	r3, r2
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	3b30      	subs	r3, #48	; 0x30
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	3301      	adds	r3, #1
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	440b      	add	r3, r1
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	440b      	add	r3, r1
 8001e52:	3a30      	subs	r2, #48	; 0x30
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<size;i++){
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	dbe0      	blt.n	8001e28 <str2uint8t+0x14>
	}
}
 8001e66:	bf00      	nop
 8001e68:	bf00      	nop
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
	...

08001e74 <readline>:
void readline(const TCHAR* fodler,const TCHAR* txt,char *buffer,uint8_t *mang, uint16_t size,uint32_t *a,uint8_t *mode)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]

	fresult = f_mount(&fs, fodler, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	68f9      	ldr	r1, [r7, #12]
 8001e86:	4831      	ldr	r0, [pc, #196]	; (8001f4c <readline+0xd8>)
 8001e88:	f007 fd6a 	bl	8009960 <f_mount>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <readline+0xdc>)
 8001e92:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <readline+0xdc>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <readline+0x36>
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea2:	482c      	ldr	r0, [pc, #176]	; (8001f54 <readline+0xe0>)
 8001ea4:	f001 fd52 	bl	800394c <HAL_GPIO_WritePin>
 8001ea8:	e005      	b.n	8001eb6 <readline+0x42>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eb0:	4828      	ldr	r0, [pc, #160]	; (8001f54 <readline+0xe0>)
 8001eb2:	f001 fd4b 	bl	800394c <HAL_GPIO_WritePin>
	fresult = f_open(&fil, txt, FA_READ);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	4827      	ldr	r0, [pc, #156]	; (8001f58 <readline+0xe4>)
 8001ebc:	f007 fd98 	bl	80099f0 <f_open>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <readline+0xdc>)
 8001ec6:	701a      	strb	r2, [r3, #0]
	while ((f_gets(buffer,size*2+1 , &fil) != NULL ))
 8001ec8:	e030      	b.n	8001f2c <readline+0xb8>
	{
		for (int i=0;i<size;i++){
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e01a      	b.n	8001f06 <readline+0x92>
			*(mang + i)=(*(buffer + i*2)-48)*16+(*(buffer+i*2+1)-48);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	3b30      	subs	r3, #48	; 0x30
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	3301      	adds	r3, #1
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	440b      	add	r3, r1
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	6839      	ldr	r1, [r7, #0]
 8001ef8:	440b      	add	r3, r1
 8001efa:	3a30      	subs	r2, #48	; 0x30
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<size;i++){
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3301      	adds	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	8c3b      	ldrh	r3, [r7, #32]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dbe0      	blt.n	8001ed0 <readline+0x5c>
		}
		phatnhac();
 8001f0e:	f7ff ff33 	bl	8001d78 <phatnhac>
		while (*a!=1);
 8001f12:	bf00      	nop
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d1fb      	bne.n	8001f14 <readline+0xa0>
		if (*mode!=0) {
 8001f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <readline+0xb8>
			*mode=0;
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
			break;
 8001f2a:	e00b      	b.n	8001f44 <readline+0xd0>
	while ((f_gets(buffer,size*2+1 , &fil) != NULL ))
 8001f2c:	8c3b      	ldrh	r3, [r7, #32]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	3301      	adds	r3, #1
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <readline+0xe4>)
 8001f34:	4619      	mov	r1, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f008 fbcd 	bl	800a6d6 <f_gets>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1c3      	bne.n	8001eca <readline+0x56>
		}
	}
//	fresult = f_close(&fil);
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200009b4 	.word	0x200009b4
 8001f50:	20000e10 	.word	0x20000e10
 8001f54:	40011000 	.word	0x40011000
 8001f58:	20000be4 	.word	0x20000be4

08001f5c <readdanhsachnhac>:
void readdanhsachnhac(const TCHAR* fodler,const TCHAR* txt,char *buffer)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
	uint8_t a;
	a=0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	75fb      	strb	r3, [r7, #23]
	fresult = f_mount(&fs, fodler, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	68f9      	ldr	r1, [r7, #12]
 8001f70:	4824      	ldr	r0, [pc, #144]	; (8002004 <readdanhsachnhac+0xa8>)
 8001f72:	f007 fcf5 	bl	8009960 <f_mount>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b23      	ldr	r3, [pc, #140]	; (8002008 <readdanhsachnhac+0xac>)
 8001f7c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <readdanhsachnhac+0xac>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <readdanhsachnhac+0x38>
 8001f86:	2200      	movs	r2, #0
 8001f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8c:	481f      	ldr	r0, [pc, #124]	; (800200c <readdanhsachnhac+0xb0>)
 8001f8e:	f001 fcdd 	bl	800394c <HAL_GPIO_WritePin>
 8001f92:	e005      	b.n	8001fa0 <readdanhsachnhac+0x44>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001f94:	2201      	movs	r2, #1
 8001f96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f9a:	481c      	ldr	r0, [pc, #112]	; (800200c <readdanhsachnhac+0xb0>)
 8001f9c:	f001 fcd6 	bl	800394c <HAL_GPIO_WritePin>
	fresult = f_open(&fil, txt, FA_READ);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	481a      	ldr	r0, [pc, #104]	; (8002010 <readdanhsachnhac+0xb4>)
 8001fa6:	f007 fd23 	bl	80099f0 <f_open>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <readdanhsachnhac+0xac>)
 8001fb0:	701a      	strb	r2, [r3, #0]
	while ((f_gets(buffer,50 , &fil) != NULL )||((a+18+10)>64))
 8001fb2:	e011      	b.n	8001fd8 <readdanhsachnhac+0x7c>
	{
		ssd1306_SetCursor(0,18+a);
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	3312      	adds	r3, #18
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	4619      	mov	r1, r3
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f001 f85d 	bl	800307c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer,Font_7x10,White);
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <readdanhsachnhac+0xb8>)
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	ca06      	ldmia	r2, {r1, r2}
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f001 f831 	bl	8003030 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001fce:	f000 ff2d 	bl	8002e2c <ssd1306_UpdateScreen>
		a+=10;
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	330a      	adds	r3, #10
 8001fd6:	75fb      	strb	r3, [r7, #23]
	while ((f_gets(buffer,50 , &fil) != NULL )||((a+18+10)>64))
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <readdanhsachnhac+0xb4>)
 8001fda:	2132      	movs	r1, #50	; 0x32
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f008 fb7a 	bl	800a6d6 <f_gets>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1e5      	bne.n	8001fb4 <readdanhsachnhac+0x58>
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	2b24      	cmp	r3, #36	; 0x24
 8001fec:	d8e2      	bhi.n	8001fb4 <readdanhsachnhac+0x58>
	}
	fresult = f_close(&fil);
 8001fee:	4808      	ldr	r0, [pc, #32]	; (8002010 <readdanhsachnhac+0xb4>)
 8001ff0:	f008 fb49 	bl	800a686 <f_close>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <readdanhsachnhac+0xac>)
 8001ffa:	701a      	strb	r2, [r3, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200009b4 	.word	0x200009b4
 8002008:	20000e10 	.word	0x20000e10
 800200c:	40011000 	.word	0x40011000
 8002010:	20000be4 	.word	0x20000be4
 8002014:	20000080 	.word	0x20000080

08002018 <write_sd>:

void write_sd(const TCHAR* fodler,const TCHAR* txt,char *buffer, uint8_t *bt,uint8_t size)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
	fresult = f_mount(&fs, fodler, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	482c      	ldr	r0, [pc, #176]	; (80020dc <write_sd+0xc4>)
 800202c:	f007 fc98 	bl	8009960 <f_mount>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <write_sd+0xc8>)
 8002036:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002038:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <write_sd+0xc8>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <write_sd+0x36>
 8002040:	2200      	movs	r2, #0
 8002042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002046:	4827      	ldr	r0, [pc, #156]	; (80020e4 <write_sd+0xcc>)
 8002048:	f001 fc80 	bl	800394c <HAL_GPIO_WritePin>
 800204c:	e005      	b.n	800205a <write_sd+0x42>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002054:	4823      	ldr	r0, [pc, #140]	; (80020e4 <write_sd+0xcc>)
 8002056:	f001 fc79 	bl	800394c <HAL_GPIO_WritePin>
	fresult = f_open(&fil, txt, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800205a:	2213      	movs	r2, #19
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	4822      	ldr	r0, [pc, #136]	; (80020e8 <write_sd+0xd0>)
 8002060:	f007 fcc6 	bl	80099f0 <f_open>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <write_sd+0xc8>)
 800206a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<size;i++){
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e01f      	b.n	80020b2 <write_sd+0x9a>
		*(buffer+2*i)=(*(bt+i)/16) +48;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	b2da      	uxtb	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4619      	mov	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	440b      	add	r3, r1
 8002088:	3230      	adds	r2, #48	; 0x30
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]
		*(buffer+2*i+1)=(*(bt+i)%16 )+48;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	4413      	add	r3, r2
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	b2da      	uxtb	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	3301      	adds	r3, #1
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	440b      	add	r3, r1
 80020a6:	3230      	adds	r2, #48	; 0x30
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<size;i++){
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3301      	adds	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	dbda      	blt.n	8002072 <write_sd+0x5a>
	}
	f_puts(buffer, &fil);
 80020bc:	490a      	ldr	r1, [pc, #40]	; (80020e8 <write_sd+0xd0>)
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f008 fb83 	bl	800a7ca <f_puts>
	fresult = f_close(&fil);
 80020c4:	4808      	ldr	r0, [pc, #32]	; (80020e8 <write_sd+0xd0>)
 80020c6:	f008 fade 	bl	800a686 <f_close>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <write_sd+0xc8>)
 80020d0:	701a      	strb	r2, [r3, #0]
}
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200009b4 	.word	0x200009b4
 80020e0:	20000e10 	.word	0x20000e10
 80020e4:	40011000 	.word	0x40011000
 80020e8:	20000be4 	.word	0x20000be4

080020ec <readtime>:




void readtime(uint8_t *u8_revBuffer,uint8_t id)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Read_IT(&hi2c1,id,0x00, 0x01U, u8_revBuffer,7 );
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	b299      	uxth	r1, r3
 80020fc:	2307      	movs	r3, #7
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2301      	movs	r3, #1
 8002106:	2200      	movs	r2, #0
 8002108:	4803      	ldr	r0, [pc, #12]	; (8002118 <readtime+0x2c>)
 800210a:	f001 fe53 	bl	8003db4 <HAL_I2C_Mem_Read_IT>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200000c8 	.word	0x200000c8

0800211c <BCD2DEC>:

uint8_t BCD2DEC(uint8_t date)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
	return (date>>4)*10+ (date&0x0f);
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	0092      	lsls	r2, r2, #2
 8002130:	4413      	add	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	b2da      	uxtb	r2, r3
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	b2db      	uxtb	r3, r3
 800213e:	4413      	add	r3, r2
 8002140:	b2db      	uxtb	r3, r3
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <DEC2BCD>:

uint8_t DEC2BCD(uint8_t date)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
	return (date/10)<<4|(date%10);
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <DEC2BCD+0x44>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	08db      	lsrs	r3, r3, #3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	b258      	sxtb	r0, r3
 8002166:	79fa      	ldrb	r2, [r7, #7]
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <DEC2BCD+0x44>)
 800216a:	fba3 1302 	umull	r1, r3, r3, r2
 800216e:	08d9      	lsrs	r1, r3, #3
 8002170:	460b      	mov	r3, r1
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	b25b      	sxtb	r3, r3
 800217e:	4303      	orrs	r3, r0
 8002180:	b25b      	sxtb	r3, r3
 8002182:	b2db      	uxtb	r3, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	cccccccd 	.word	0xcccccccd

08002194 <stactusTX>:

uint8_t stactusTX(){
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
	uint8_t id;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800219a:	2200      	movs	r2, #0
 800219c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021a0:	4811      	ldr	r0, [pc, #68]	; (80021e8 <stactusTX+0x54>)
 80021a2:	f001 fbd3 	bl	800394c <HAL_GPIO_WritePin>
  for (uint8_t i=0; i<255; i++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	71bb      	strb	r3, [r7, #6]
 80021aa:	e014      	b.n	80021d6 <stactusTX+0x42>
  {
	  if (HAL_I2C_IsDeviceReady(&hi2c1, i,1 ,10)==HAL_OK)
 80021ac:	79bb      	ldrb	r3, [r7, #6]
 80021ae:	b299      	uxth	r1, r3
 80021b0:	230a      	movs	r3, #10
 80021b2:	2201      	movs	r2, #1
 80021b4:	480d      	ldr	r0, [pc, #52]	; (80021ec <stactusTX+0x58>)
 80021b6:	f001 feb5 	bl	8003f24 <HAL_I2C_IsDeviceReady>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <stactusTX+0x3c>
	  {
		  id =i;
 80021c0:	79bb      	ldrb	r3, [r7, #6]
 80021c2:	71fb      	strb	r3, [r7, #7]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80021c4:	2201      	movs	r2, #1
 80021c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ca:	4807      	ldr	r0, [pc, #28]	; (80021e8 <stactusTX+0x54>)
 80021cc:	f001 fbbe 	bl	800394c <HAL_GPIO_WritePin>
  for (uint8_t i=0; i<255; i++)
 80021d0:	79bb      	ldrb	r3, [r7, #6]
 80021d2:	3301      	adds	r3, #1
 80021d4:	71bb      	strb	r3, [r7, #6]
 80021d6:	79bb      	ldrb	r3, [r7, #6]
 80021d8:	2bff      	cmp	r3, #255	; 0xff
 80021da:	d1e7      	bne.n	80021ac <stactusTX+0x18>

	  }
  }
  return id;
 80021dc:	79fb      	ldrb	r3, [r7, #7]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40011000 	.word	0x40011000
 80021ec:	200000c8 	.word	0x200000c8

080021f0 <settime>:
void settime(uint8_t *TX, uint8_t id)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]

			*(TX +0)=DEC2BCD(*(TX +0));//s
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ffa3 	bl	800214c <DEC2BCD>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	701a      	strb	r2, [r3, #0]
			*(TX +1)=DEC2BCD(*(TX +1));//min
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3301      	adds	r3, #1
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	1c5c      	adds	r4, r3, #1
 8002218:	4610      	mov	r0, r2
 800221a:	f7ff ff97 	bl	800214c <DEC2BCD>
 800221e:	4603      	mov	r3, r0
 8002220:	7023      	strb	r3, [r4, #0]
			*(TX +2)=DEC2BCD(*(TX +2));//hour
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3302      	adds	r3, #2
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	1c9c      	adds	r4, r3, #2
 800222c:	4610      	mov	r0, r2
 800222e:	f7ff ff8d 	bl	800214c <DEC2BCD>
 8002232:	4603      	mov	r3, r0
 8002234:	7023      	strb	r3, [r4, #0]
			*(TX +3)=DEC2BCD(*(TX +3));//thu
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3303      	adds	r3, #3
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	1cdc      	adds	r4, r3, #3
 8002240:	4610      	mov	r0, r2
 8002242:	f7ff ff83 	bl	800214c <DEC2BCD>
 8002246:	4603      	mov	r3, r0
 8002248:	7023      	strb	r3, [r4, #0]
			*(TX +4)=DEC2BCD(*(TX +4));//ngay
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	1d1c      	adds	r4, r3, #4
 8002254:	4610      	mov	r0, r2
 8002256:	f7ff ff79 	bl	800214c <DEC2BCD>
 800225a:	4603      	mov	r3, r0
 800225c:	7023      	strb	r3, [r4, #0]
			*(TX +5)=DEC2BCD(*(TX +5));//thang
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3305      	adds	r3, #5
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	1d5c      	adds	r4, r3, #5
 8002268:	4610      	mov	r0, r2
 800226a:	f7ff ff6f 	bl	800214c <DEC2BCD>
 800226e:	4603      	mov	r3, r0
 8002270:	7023      	strb	r3, [r4, #0]
			*(TX +6)=DEC2BCD(*(TX +6));//nam
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3306      	adds	r3, #6
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	1d9c      	adds	r4, r3, #6
 800227c:	4610      	mov	r0, r2
 800227e:	f7ff ff65 	bl	800214c <DEC2BCD>
 8002282:	4603      	mov	r3, r0
 8002284:	7023      	strb	r3, [r4, #0]
	  	    HAL_I2C_Mem_Write_IT(&hi2c1,id,0x00, 0x00000001U, TX,7);
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	b299      	uxth	r1, r3
 800228a:	2307      	movs	r3, #7
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2301      	movs	r3, #1
 8002294:	2200      	movs	r2, #0
 8002296:	4803      	ldr	r0, [pc, #12]	; (80022a4 <settime+0xb4>)
 8002298:	f001 fce0 	bl	8003c5c <HAL_I2C_Mem_Write_IT>
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}
 80022a4:	200000c8 	.word	0x200000c8

080022a8 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_12

/* SPI Chip Select */
static void SELECT(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80022ac:	2200      	movs	r2, #0
 80022ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b2:	4802      	ldr	r0, [pc, #8]	; (80022bc <SELECT+0x14>)
 80022b4:	f001 fb4a 	bl	800394c <HAL_GPIO_WritePin>
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40010c00 	.word	0x40010c00

080022c0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80022c4:	2201      	movs	r2, #1
 80022c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ca:	4802      	ldr	r0, [pc, #8]	; (80022d4 <DESELECT+0x14>)
 80022cc:	f001 fb3e 	bl	800394c <HAL_GPIO_WritePin>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40010c00 	.word	0x40010c00

080022d8 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80022e2:	bf00      	nop
 80022e4:	4808      	ldr	r0, [pc, #32]	; (8002308 <SPI_TxByte+0x30>)
 80022e6:	f004 fbe2 	bl	8006aae <HAL_SPI_GetState>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d1f9      	bne.n	80022e4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80022f0:	1df9      	adds	r1, r7, #7
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	2201      	movs	r2, #1
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <SPI_TxByte+0x30>)
 80022fa:	f003 fff5 	bl	80062e8 <HAL_SPI_Transmit>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200001c8 	.word	0x200001c8

0800230c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8002312:	23ff      	movs	r3, #255	; 0xff
 8002314:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 800231a:	bf00      	nop
 800231c:	4809      	ldr	r0, [pc, #36]	; (8002344 <SPI_RxByte+0x38>)
 800231e:	f004 fbc6 	bl	8006aae <HAL_SPI_GetState>
 8002322:	4603      	mov	r3, r0
 8002324:	2b01      	cmp	r3, #1
 8002326:	d1f9      	bne.n	800231c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8002328:	1dba      	adds	r2, r7, #6
 800232a:	1df9      	adds	r1, r7, #7
 800232c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2301      	movs	r3, #1
 8002334:	4803      	ldr	r0, [pc, #12]	; (8002344 <SPI_RxByte+0x38>)
 8002336:	f004 f91a 	bl	800656e <HAL_SPI_TransmitReceive>

  return data;
 800233a:	79bb      	ldrb	r3, [r7, #6]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200001c8 	.word	0x200001c8

08002348 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002350:	f7ff ffdc 	bl	800230c <SPI_RxByte>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	701a      	strb	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <SD_ReadyWait+0x34>)
 800236c:	2232      	movs	r2, #50	; 0x32
 800236e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8002370:	f7ff ffcc 	bl	800230c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8002374:	f7ff ffca 	bl	800230c <SPI_RxByte>
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	2bff      	cmp	r3, #255	; 0xff
 8002380:	d004      	beq.n	800238c <SD_ReadyWait+0x28>
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SD_ReadyWait+0x34>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f3      	bne.n	8002374 <SD_ReadyWait+0x10>

  return res;
 800238c:	79fb      	ldrb	r3, [r7, #7]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200009b0 	.word	0x200009b0

0800239c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80023a2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80023a6:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80023a8:	f7ff ff8a 	bl	80022c0 <DESELECT>

  for(int i = 0; i < 10; i++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	e005      	b.n	80023be <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80023b2:	20ff      	movs	r0, #255	; 0xff
 80023b4:	f7ff ff90 	bl	80022d8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	3301      	adds	r3, #1
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b09      	cmp	r3, #9
 80023c2:	ddf6      	ble.n	80023b2 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80023c4:	f7ff ff70 	bl	80022a8 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80023c8:	2340      	movs	r3, #64	; 0x40
 80023ca:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80023dc:	2395      	movs	r3, #149	; 0x95
 80023de:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e009      	b.n	80023fa <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80023e6:	1d3a      	adds	r2, r7, #4
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff72 	bl	80022d8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3301      	adds	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	ddf2      	ble.n	80023e6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8002400:	e002      	b.n	8002408 <SD_PowerOn+0x6c>
  {
    Count--;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3b01      	subs	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8002408:	f7ff ff80 	bl	800230c <SPI_RxByte>
 800240c:	4603      	mov	r3, r0
 800240e:	2b01      	cmp	r3, #1
 8002410:	d002      	beq.n	8002418 <SD_PowerOn+0x7c>
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f4      	bne.n	8002402 <SD_PowerOn+0x66>
  }

  DESELECT();
 8002418:	f7ff ff52 	bl	80022c0 <DESELECT>
  SPI_TxByte(0XFF);
 800241c:	20ff      	movs	r0, #255	; 0xff
 800241e:	f7ff ff5b 	bl	80022d8 <SPI_TxByte>

  PowerFlag = 1;
 8002422:	4b03      	ldr	r3, [pc, #12]	; (8002430 <SD_PowerOn+0x94>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000e12 	.word	0x20000e12

08002434 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <SD_PowerOff+0x14>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000e12 	.word	0x20000e12

0800244c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8002450:	4b02      	ldr	r3, [pc, #8]	; (800245c <SD_CheckPower+0x10>)
 8002452:	781b      	ldrb	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	20000e12 	.word	0x20000e12

08002460 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800246a:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <SD_RxDataBlock+0x68>)
 800246c:	220a      	movs	r2, #10
 800246e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8002470:	f7ff ff4c 	bl	800230c <SPI_RxByte>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2bff      	cmp	r3, #255	; 0xff
 800247c:	d104      	bne.n	8002488 <SD_RxDataBlock+0x28>
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <SD_RxDataBlock+0x68>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f3      	bne.n	8002470 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2bfe      	cmp	r3, #254	; 0xfe
 800248c:	d001      	beq.n	8002492 <SD_RxDataBlock+0x32>
    return FALSE;
 800248e:	2300      	movs	r3, #0
 8002490:	e016      	b.n	80024c0 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff55 	bl	8002348 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff4f 	bl	8002348 <SPI_RxBytePtr>
  } while(btr -= 2);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	3b02      	subs	r3, #2
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1ed      	bne.n	8002492 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80024b6:	f7ff ff29 	bl	800230c <SPI_RxByte>
  SPI_RxByte();
 80024ba:	f7ff ff27 	bl	800230c <SPI_RxByte>

  return TRUE;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	200009af 	.word	0x200009af

080024cc <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80024dc:	f7ff ff42 	bl	8002364 <SD_ReadyWait>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2bff      	cmp	r3, #255	; 0xff
 80024e4:	d001      	beq.n	80024ea <SD_TxDataBlock+0x1e>
    return FALSE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e040      	b.n	800256c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fef3 	bl	80022d8 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	2bfd      	cmp	r3, #253	; 0xfd
 80024f6:	d031      	beq.n	800255c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fee7 	bl	80022d8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fee0 	bl	80022d8 <SPI_TxByte>
    } while (--wc);
 8002518:	7bbb      	ldrb	r3, [r7, #14]
 800251a:	3b01      	subs	r3, #1
 800251c:	73bb      	strb	r3, [r7, #14]
 800251e:	7bbb      	ldrb	r3, [r7, #14]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1eb      	bne.n	80024fc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8002524:	f7ff fef2 	bl	800230c <SPI_RxByte>
    SPI_RxByte();
 8002528:	f7ff fef0 	bl	800230c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 800252c:	e00b      	b.n	8002546 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800252e:	f7ff feed 	bl	800230c <SPI_RxByte>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	2b05      	cmp	r3, #5
 800253e:	d006      	beq.n	800254e <SD_TxDataBlock+0x82>
        break;

      i++;
 8002540:	7b7b      	ldrb	r3, [r7, #13]
 8002542:	3301      	adds	r3, #1
 8002544:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8002546:	7b7b      	ldrb	r3, [r7, #13]
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d9f0      	bls.n	800252e <SD_TxDataBlock+0x62>
 800254c:	e000      	b.n	8002550 <SD_TxDataBlock+0x84>
        break;
 800254e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8002550:	bf00      	nop
 8002552:	f7ff fedb 	bl	800230c <SPI_RxByte>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0fa      	beq.n	8002552 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	2b05      	cmp	r3, #5
 8002564:	d101      	bne.n	800256a <SD_TxDataBlock+0x9e>
    return TRUE;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002580:	f7ff fef0 	bl	8002364 <SD_ReadyWait>
 8002584:	4603      	mov	r3, r0
 8002586:	2bff      	cmp	r3, #255	; 0xff
 8002588:	d001      	beq.n	800258e <SD_SendCmd+0x1a>
    return 0xFF;
 800258a:	23ff      	movs	r3, #255	; 0xff
 800258c:	e040      	b.n	8002610 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fea1 	bl	80022d8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	0e1b      	lsrs	r3, r3, #24
 800259a:	b2db      	uxtb	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fe9b 	bl	80022d8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fe95 	bl	80022d8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fe8f 	bl	80022d8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fe8a 	bl	80022d8 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	2b40      	cmp	r3, #64	; 0x40
 80025cc:	d101      	bne.n	80025d2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80025ce:	2395      	movs	r3, #149	; 0x95
 80025d0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	2b48      	cmp	r3, #72	; 0x48
 80025d6:	d101      	bne.n	80025dc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80025d8:	2387      	movs	r3, #135	; 0x87
 80025da:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fe7a 	bl	80022d8 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	2b4c      	cmp	r3, #76	; 0x4c
 80025e8:	d101      	bne.n	80025ee <SD_SendCmd+0x7a>
    SPI_RxByte();
 80025ea:	f7ff fe8f 	bl	800230c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80025ee:	230a      	movs	r3, #10
 80025f0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80025f2:	f7ff fe8b 	bl	800230c <SPI_RxByte>
 80025f6:	4603      	mov	r3, r0
 80025f8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80025fa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	da05      	bge.n	800260e <SD_SendCmd+0x9a>
 8002602:	7bbb      	ldrb	r3, [r7, #14]
 8002604:	3b01      	subs	r3, #1
 8002606:	73bb      	strb	r3, [r7, #14]
 8002608:	7bbb      	ldrb	r3, [r7, #14]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f1      	bne.n	80025f2 <SD_SendCmd+0x7e>

  return res;
 800260e:	7b7b      	ldrb	r3, [r7, #13]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8002628:	2301      	movs	r3, #1
 800262a:	e0d5      	b.n	80027d8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 800262c:	4b6c      	ldr	r3, [pc, #432]	; (80027e0 <SD_disk_initialize+0x1c8>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <SD_disk_initialize+0x2a>
    return Stat;
 800263a:	4b69      	ldr	r3, [pc, #420]	; (80027e0 <SD_disk_initialize+0x1c8>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	e0ca      	b.n	80027d8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8002642:	f7ff feab 	bl	800239c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8002646:	f7ff fe2f 	bl	80022a8 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800264e:	2100      	movs	r1, #0
 8002650:	2040      	movs	r0, #64	; 0x40
 8002652:	f7ff ff8f 	bl	8002574 <SD_SendCmd>
 8002656:	4603      	mov	r3, r0
 8002658:	2b01      	cmp	r3, #1
 800265a:	f040 80a5 	bne.w	80027a8 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800265e:	4b61      	ldr	r3, [pc, #388]	; (80027e4 <SD_disk_initialize+0x1cc>)
 8002660:	2264      	movs	r2, #100	; 0x64
 8002662:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002664:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002668:	2048      	movs	r0, #72	; 0x48
 800266a:	f7ff ff83 	bl	8002574 <SD_SendCmd>
 800266e:	4603      	mov	r3, r0
 8002670:	2b01      	cmp	r3, #1
 8002672:	d158      	bne.n	8002726 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	e00c      	b.n	8002694 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800267a:	7bfc      	ldrb	r4, [r7, #15]
 800267c:	f7ff fe46 	bl	800230c <SPI_RxByte>
 8002680:	4603      	mov	r3, r0
 8002682:	461a      	mov	r2, r3
 8002684:	f104 0310 	add.w	r3, r4, #16
 8002688:	443b      	add	r3, r7
 800268a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	3301      	adds	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d9ef      	bls.n	800267a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800269a:	7abb      	ldrb	r3, [r7, #10]
 800269c:	2b01      	cmp	r3, #1
 800269e:	f040 8083 	bne.w	80027a8 <SD_disk_initialize+0x190>
 80026a2:	7afb      	ldrb	r3, [r7, #11]
 80026a4:	2baa      	cmp	r3, #170	; 0xaa
 80026a6:	d17f      	bne.n	80027a8 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80026a8:	2100      	movs	r1, #0
 80026aa:	2077      	movs	r0, #119	; 0x77
 80026ac:	f7ff ff62 	bl	8002574 <SD_SendCmd>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d807      	bhi.n	80026c6 <SD_disk_initialize+0xae>
 80026b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80026ba:	2069      	movs	r0, #105	; 0x69
 80026bc:	f7ff ff5a 	bl	8002574 <SD_SendCmd>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80026c6:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <SD_disk_initialize+0x1cc>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1eb      	bne.n	80026a8 <SD_disk_initialize+0x90>
 80026d0:	e000      	b.n	80026d4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80026d2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80026d4:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <SD_disk_initialize+0x1cc>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d064      	beq.n	80027a8 <SD_disk_initialize+0x190>
 80026de:	2100      	movs	r1, #0
 80026e0:	207a      	movs	r0, #122	; 0x7a
 80026e2:	f7ff ff47 	bl	8002574 <SD_SendCmd>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d15d      	bne.n	80027a8 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	e00c      	b.n	800270c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80026f2:	7bfc      	ldrb	r4, [r7, #15]
 80026f4:	f7ff fe0a 	bl	800230c <SPI_RxByte>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	f104 0310 	add.w	r3, r4, #16
 8002700:	443b      	add	r3, r7
 8002702:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	3301      	adds	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d9ef      	bls.n	80026f2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8002712:	7a3b      	ldrb	r3, [r7, #8]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <SD_disk_initialize+0x108>
 800271c:	2306      	movs	r3, #6
 800271e:	e000      	b.n	8002722 <SD_disk_initialize+0x10a>
 8002720:	2302      	movs	r3, #2
 8002722:	73bb      	strb	r3, [r7, #14]
 8002724:	e040      	b.n	80027a8 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002726:	2100      	movs	r1, #0
 8002728:	2077      	movs	r0, #119	; 0x77
 800272a:	f7ff ff23 	bl	8002574 <SD_SendCmd>
 800272e:	4603      	mov	r3, r0
 8002730:	2b01      	cmp	r3, #1
 8002732:	d808      	bhi.n	8002746 <SD_disk_initialize+0x12e>
 8002734:	2100      	movs	r1, #0
 8002736:	2069      	movs	r0, #105	; 0x69
 8002738:	f7ff ff1c 	bl	8002574 <SD_SendCmd>
 800273c:	4603      	mov	r3, r0
 800273e:	2b01      	cmp	r3, #1
 8002740:	d801      	bhi.n	8002746 <SD_disk_initialize+0x12e>
 8002742:	2302      	movs	r3, #2
 8002744:	e000      	b.n	8002748 <SD_disk_initialize+0x130>
 8002746:	2301      	movs	r3, #1
 8002748:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800274a:	7bbb      	ldrb	r3, [r7, #14]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d10e      	bne.n	800276e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002750:	2100      	movs	r1, #0
 8002752:	2077      	movs	r0, #119	; 0x77
 8002754:	f7ff ff0e 	bl	8002574 <SD_SendCmd>
 8002758:	4603      	mov	r3, r0
 800275a:	2b01      	cmp	r3, #1
 800275c:	d80e      	bhi.n	800277c <SD_disk_initialize+0x164>
 800275e:	2100      	movs	r1, #0
 8002760:	2069      	movs	r0, #105	; 0x69
 8002762:	f7ff ff07 	bl	8002574 <SD_SendCmd>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d107      	bne.n	800277c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800276c:	e00d      	b.n	800278a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800276e:	2100      	movs	r1, #0
 8002770:	2041      	movs	r0, #65	; 0x41
 8002772:	f7ff feff 	bl	8002574 <SD_SendCmd>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <SD_disk_initialize+0x1cc>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1e1      	bne.n	800274a <SD_disk_initialize+0x132>
 8002786:	e000      	b.n	800278a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002788:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800278a:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <SD_disk_initialize+0x1cc>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <SD_disk_initialize+0x18c>
 8002794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002798:	2050      	movs	r0, #80	; 0x50
 800279a:	f7ff feeb 	bl	8002574 <SD_SendCmd>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80027a8:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <SD_disk_initialize+0x1d0>)
 80027aa:	7bbb      	ldrb	r3, [r7, #14]
 80027ac:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80027ae:	f7ff fd87 	bl	80022c0 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80027b2:	f7ff fdab 	bl	800230c <SPI_RxByte>

  if (type)
 80027b6:	7bbb      	ldrb	r3, [r7, #14]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <SD_disk_initialize+0x1c8>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <SD_disk_initialize+0x1c8>)
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e001      	b.n	80027d2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80027ce:	f7ff fe31 	bl	8002434 <SD_PowerOff>
  }

  return Stat;
 80027d2:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <SD_disk_initialize+0x1c8>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b2db      	uxtb	r3, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd90      	pop	{r4, r7, pc}
 80027e0:	2000007c 	.word	0x2000007c
 80027e4:	200009af 	.word	0x200009af
 80027e8:	20000e11 	.word	0x20000e11

080027ec <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <SD_disk_status+0x14>
    return STA_NOINIT;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e002      	b.n	8002806 <SD_disk_status+0x1a>

  return Stat;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <SD_disk_status+0x24>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	2000007c 	.word	0x2000007c

08002814 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <SD_disk_read+0x1c>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <SD_disk_read+0x20>
    return RES_PARERR;
 8002830:	2304      	movs	r3, #4
 8002832:	e051      	b.n	80028d8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8002834:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <SD_disk_read+0xcc>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002842:	2303      	movs	r3, #3
 8002844:	e048      	b.n	80028d8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <SD_disk_read+0xd0>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	025b      	lsls	r3, r3, #9
 8002856:	607b      	str	r3, [r7, #4]

  SELECT();
 8002858:	f7ff fd26 	bl	80022a8 <SELECT>

  if (count == 1)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d111      	bne.n	8002886 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	2051      	movs	r0, #81	; 0x51
 8002866:	f7ff fe85 	bl	8002574 <SD_SendCmd>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d129      	bne.n	80028c4 <SD_disk_read+0xb0>
 8002870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002874:	68b8      	ldr	r0, [r7, #8]
 8002876:	f7ff fdf3 	bl	8002460 <SD_RxDataBlock>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d021      	beq.n	80028c4 <SD_disk_read+0xb0>
      count = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	e01e      	b.n	80028c4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	2052      	movs	r0, #82	; 0x52
 800288a:	f7ff fe73 	bl	8002574 <SD_SendCmd>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d117      	bne.n	80028c4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002898:	68b8      	ldr	r0, [r7, #8]
 800289a:	f7ff fde1 	bl	8002460 <SD_RxDataBlock>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <SD_disk_read+0xa6>
          break;

        buff += 512;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80028aa:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ed      	bne.n	8002894 <SD_disk_read+0x80>
 80028b8:	e000      	b.n	80028bc <SD_disk_read+0xa8>
          break;
 80028ba:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80028bc:	2100      	movs	r1, #0
 80028be:	204c      	movs	r0, #76	; 0x4c
 80028c0:	f7ff fe58 	bl	8002574 <SD_SendCmd>
    }
  }

  DESELECT();
 80028c4:	f7ff fcfc 	bl	80022c0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80028c8:	f7ff fd20 	bl	800230c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	bf14      	ite	ne
 80028d2:	2301      	movne	r3, #1
 80028d4:	2300      	moveq	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	2000007c 	.word	0x2000007c
 80028e4:	20000e11 	.word	0x20000e11

080028e8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	4603      	mov	r3, r0
 80028f6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <SD_disk_write+0x1c>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <SD_disk_write+0x20>
    return RES_PARERR;
 8002904:	2304      	movs	r3, #4
 8002906:	e06b      	b.n	80029e0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8002908:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <SD_disk_write+0x100>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002916:	2303      	movs	r3, #3
 8002918:	e062      	b.n	80029e0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800291a:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <SD_disk_write+0x100>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <SD_disk_write+0x44>
    return RES_WRPRT;
 8002928:	2302      	movs	r3, #2
 800292a:	e059      	b.n	80029e0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800292c:	4b2f      	ldr	r3, [pc, #188]	; (80029ec <SD_disk_write+0x104>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	025b      	lsls	r3, r3, #9
 800293c:	607b      	str	r3, [r7, #4]

  SELECT();
 800293e:	f7ff fcb3 	bl	80022a8 <SELECT>

  if (count == 1)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d110      	bne.n	800296a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	2058      	movs	r0, #88	; 0x58
 800294c:	f7ff fe12 	bl	8002574 <SD_SendCmd>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d13a      	bne.n	80029cc <SD_disk_write+0xe4>
 8002956:	21fe      	movs	r1, #254	; 0xfe
 8002958:	68b8      	ldr	r0, [r7, #8]
 800295a:	f7ff fdb7 	bl	80024cc <SD_TxDataBlock>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d033      	beq.n	80029cc <SD_disk_write+0xe4>
      count = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	e030      	b.n	80029cc <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <SD_disk_write+0x104>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002976:	2100      	movs	r1, #0
 8002978:	2077      	movs	r0, #119	; 0x77
 800297a:	f7ff fdfb 	bl	8002574 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800297e:	6839      	ldr	r1, [r7, #0]
 8002980:	2057      	movs	r0, #87	; 0x57
 8002982:	f7ff fdf7 	bl	8002574 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	2059      	movs	r0, #89	; 0x59
 800298a:	f7ff fdf3 	bl	8002574 <SD_SendCmd>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d11b      	bne.n	80029cc <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002994:	21fc      	movs	r1, #252	; 0xfc
 8002996:	68b8      	ldr	r0, [r7, #8]
 8002998:	f7ff fd98 	bl	80024cc <SD_TxDataBlock>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80029a8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1ee      	bne.n	8002994 <SD_disk_write+0xac>
 80029b6:	e000      	b.n	80029ba <SD_disk_write+0xd2>
          break;
 80029b8:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80029ba:	21fd      	movs	r1, #253	; 0xfd
 80029bc:	2000      	movs	r0, #0
 80029be:	f7ff fd85 	bl	80024cc <SD_TxDataBlock>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <SD_disk_write+0xe4>
      {
        count = 1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80029cc:	f7ff fc78 	bl	80022c0 <DESELECT>
  SPI_RxByte();
 80029d0:	f7ff fc9c 	bl	800230c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf14      	ite	ne
 80029da:	2301      	movne	r3, #1
 80029dc:	2300      	moveq	r3, #0
 80029de:	b2db      	uxtb	r3, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	2000007c 	.word	0x2000007c
 80029ec:	20000e11 	.word	0x20000e11

080029f0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b08b      	sub	sp, #44	; 0x2c
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	603a      	str	r2, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
 80029fc:	460b      	mov	r3, r1
 80029fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e11b      	b.n	8002c46 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8002a14:	79bb      	ldrb	r3, [r7, #6]
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d129      	bne.n	8002a6e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d017      	beq.n	8002a52 <SD_disk_ioctl+0x62>
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	dc1f      	bgt.n	8002a66 <SD_disk_ioctl+0x76>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <SD_disk_ioctl+0x40>
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d00b      	beq.n	8002a46 <SD_disk_ioctl+0x56>
 8002a2e:	e01a      	b.n	8002a66 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002a30:	f7ff fd0c 	bl	800244c <SD_CheckPower>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002a3a:	f7ff fcfb 	bl	8002434 <SD_PowerOff>
      res = RES_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002a44:	e0fd      	b.n	8002c42 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8002a46:	f7ff fca9 	bl	800239c <SD_PowerOn>
      res = RES_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002a50:	e0f7      	b.n	8002c42 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	1c5c      	adds	r4, r3, #1
 8002a56:	f7ff fcf9 	bl	800244c <SD_CheckPower>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002a64:	e0ed      	b.n	8002c42 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002a66:	2304      	movs	r3, #4
 8002a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a6c:	e0e9      	b.n	8002c42 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8002a6e:	4b78      	ldr	r3, [pc, #480]	; (8002c50 <SD_disk_ioctl+0x260>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0e2      	b.n	8002c46 <SD_disk_ioctl+0x256>

    SELECT();
 8002a80:	f7ff fc12 	bl	80022a8 <SELECT>

    switch (ctrl)
 8002a84:	79bb      	ldrb	r3, [r7, #6]
 8002a86:	2b0d      	cmp	r3, #13
 8002a88:	f200 80cc 	bhi.w	8002c24 <SD_disk_ioctl+0x234>
 8002a8c:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <SD_disk_ioctl+0xa4>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002b8f 	.word	0x08002b8f
 8002a98:	08002acd 	.word	0x08002acd
 8002a9c:	08002b7f 	.word	0x08002b7f
 8002aa0:	08002c25 	.word	0x08002c25
 8002aa4:	08002c25 	.word	0x08002c25
 8002aa8:	08002c25 	.word	0x08002c25
 8002aac:	08002c25 	.word	0x08002c25
 8002ab0:	08002c25 	.word	0x08002c25
 8002ab4:	08002c25 	.word	0x08002c25
 8002ab8:	08002c25 	.word	0x08002c25
 8002abc:	08002c25 	.word	0x08002c25
 8002ac0:	08002ba1 	.word	0x08002ba1
 8002ac4:	08002bc5 	.word	0x08002bc5
 8002ac8:	08002be9 	.word	0x08002be9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002acc:	2100      	movs	r1, #0
 8002ace:	2049      	movs	r0, #73	; 0x49
 8002ad0:	f7ff fd50 	bl	8002574 <SD_SendCmd>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 80a8 	bne.w	8002c2c <SD_disk_ioctl+0x23c>
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	2110      	movs	r1, #16
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fcbc 	bl	8002460 <SD_RxDataBlock>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 809e 	beq.w	8002c2c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8002af0:	7b3b      	ldrb	r3, [r7, #12]
 8002af2:	099b      	lsrs	r3, r3, #6
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10e      	bne.n	8002b18 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002afa:	7d7b      	ldrb	r3, [r7, #21]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	7d3b      	ldrb	r3, [r7, #20]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002b0e:	8bfb      	ldrh	r3, [r7, #30]
 8002b10:	029a      	lsls	r2, r3, #10
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e02e      	b.n	8002b76 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002b18:	7c7b      	ldrb	r3, [r7, #17]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	7dbb      	ldrb	r3, [r7, #22]
 8002b22:	09db      	lsrs	r3, r3, #7
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	7d7b      	ldrb	r3, [r7, #21]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f003 0306 	and.w	r3, r3, #6
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002b40:	7d3b      	ldrb	r3, [r7, #20]
 8002b42:	099b      	lsrs	r3, r3, #6
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	7cbb      	ldrb	r3, [r7, #18]
 8002b56:	029b      	lsls	r3, r3, #10
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002b68:	8bfa      	ldrh	r2, [r7, #30]
 8002b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b6e:	3b09      	subs	r3, #9
 8002b70:	409a      	lsls	r2, r3
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8002b7c:	e056      	b.n	8002c2c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b84:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002b8c:	e055      	b.n	8002c3a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002b8e:	f7ff fbe9 	bl	8002364 <SD_ReadyWait>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2bff      	cmp	r3, #255	; 0xff
 8002b96:	d14b      	bne.n	8002c30 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002b9e:	e047      	b.n	8002c30 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	2049      	movs	r0, #73	; 0x49
 8002ba4:	f7ff fce6 	bl	8002574 <SD_SendCmd>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d142      	bne.n	8002c34 <SD_disk_ioctl+0x244>
 8002bae:	2110      	movs	r1, #16
 8002bb0:	6a38      	ldr	r0, [r7, #32]
 8002bb2:	f7ff fc55 	bl	8002460 <SD_RxDataBlock>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d03b      	beq.n	8002c34 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002bc2:	e037      	b.n	8002c34 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	204a      	movs	r0, #74	; 0x4a
 8002bc8:	f7ff fcd4 	bl	8002574 <SD_SendCmd>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d132      	bne.n	8002c38 <SD_disk_ioctl+0x248>
 8002bd2:	2110      	movs	r1, #16
 8002bd4:	6a38      	ldr	r0, [r7, #32]
 8002bd6:	f7ff fc43 	bl	8002460 <SD_RxDataBlock>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d02b      	beq.n	8002c38 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002be6:	e027      	b.n	8002c38 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002be8:	2100      	movs	r1, #0
 8002bea:	207a      	movs	r0, #122	; 0x7a
 8002bec:	f7ff fcc2 	bl	8002574 <SD_SendCmd>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d116      	bne.n	8002c24 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002bfc:	e00b      	b.n	8002c16 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8002bfe:	6a3c      	ldr	r4, [r7, #32]
 8002c00:	1c63      	adds	r3, r4, #1
 8002c02:	623b      	str	r3, [r7, #32]
 8002c04:	f7ff fb82 	bl	800230c <SPI_RxByte>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002c0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c10:	3301      	adds	r3, #1
 8002c12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002c16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d9ef      	bls.n	8002bfe <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8002c24:	2304      	movs	r3, #4
 8002c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c2a:	e006      	b.n	8002c3a <SD_disk_ioctl+0x24a>
      break;
 8002c2c:	bf00      	nop
 8002c2e:	e004      	b.n	8002c3a <SD_disk_ioctl+0x24a>
      break;
 8002c30:	bf00      	nop
 8002c32:	e002      	b.n	8002c3a <SD_disk_ioctl+0x24a>
      break;
 8002c34:	bf00      	nop
 8002c36:	e000      	b.n	8002c3a <SD_disk_ioctl+0x24a>
      break;
 8002c38:	bf00      	nop
    }

    DESELECT();
 8002c3a:	f7ff fb41 	bl	80022c0 <DESELECT>
    SPI_RxByte();
 8002c3e:	f7ff fb65 	bl	800230c <SPI_RxByte>
  }

  return res;
 8002c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	372c      	adds	r7, #44	; 0x2c
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000007c 	.word	0x2000007c

08002c54 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2110      	movs	r1, #16
 8002c5c:	480a      	ldr	r0, [pc, #40]	; (8002c88 <ssd1306_Reset+0x34>)
 8002c5e:	f000 fe75 	bl	800394c <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2102      	movs	r1, #2
 8002c66:	4809      	ldr	r0, [pc, #36]	; (8002c8c <ssd1306_Reset+0x38>)
 8002c68:	f000 fe70 	bl	800394c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002c6c:	200a      	movs	r0, #10
 8002c6e:	f000 fb31 	bl	80032d4 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8002c72:	2201      	movs	r2, #1
 8002c74:	2102      	movs	r1, #2
 8002c76:	4805      	ldr	r0, [pc, #20]	; (8002c8c <ssd1306_Reset+0x38>)
 8002c78:	f000 fe68 	bl	800394c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002c7c:	200a      	movs	r0, #10
 8002c7e:	f000 fb29 	bl	80032d4 <HAL_Delay>
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40010800 	.word	0x40010800
 8002c8c:	40010c00 	.word	0x40010c00

08002c90 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2110      	movs	r1, #16
 8002c9e:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <ssd1306_WriteCommand+0x40>)
 8002ca0:	f000 fe54 	bl	800394c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	480a      	ldr	r0, [pc, #40]	; (8002cd4 <ssd1306_WriteCommand+0x44>)
 8002caa:	f000 fe4f 	bl	800394c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8002cae:	1df9      	adds	r1, r7, #7
 8002cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4808      	ldr	r0, [pc, #32]	; (8002cd8 <ssd1306_WriteCommand+0x48>)
 8002cb8:	f003 fb16 	bl	80062e8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	2110      	movs	r1, #16
 8002cc0:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <ssd1306_WriteCommand+0x40>)
 8002cc2:	f000 fe43 	bl	800394c <HAL_GPIO_WritePin>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40010800 	.word	0x40010800
 8002cd4:	40010c00 	.word	0x40010c00
 8002cd8:	20000170 	.word	0x20000170

08002cdc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2110      	movs	r1, #16
 8002cea:	480c      	ldr	r0, [pc, #48]	; (8002d1c <ssd1306_WriteData+0x40>)
 8002cec:	f000 fe2e 	bl	800394c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	480a      	ldr	r0, [pc, #40]	; (8002d20 <ssd1306_WriteData+0x44>)
 8002cf6:	f000 fe29 	bl	800394c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4807      	ldr	r0, [pc, #28]	; (8002d24 <ssd1306_WriteData+0x48>)
 8002d06:	f003 faef 	bl	80062e8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	2110      	movs	r1, #16
 8002d0e:	4803      	ldr	r0, [pc, #12]	; (8002d1c <ssd1306_WriteData+0x40>)
 8002d10:	f000 fe1c 	bl	800394c <HAL_GPIO_WritePin>
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40010800 	.word	0x40010800
 8002d20:	40010c00 	.word	0x40010c00
 8002d24:	20000170 	.word	0x20000170

08002d28 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002d2c:	f7ff ff92 	bl	8002c54 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002d30:	2064      	movs	r0, #100	; 0x64
 8002d32:	f000 facf 	bl	80032d4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002d36:	2000      	movs	r0, #0
 8002d38:	f000 fa26 	bl	8003188 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002d3c:	2020      	movs	r0, #32
 8002d3e:	f7ff ffa7 	bl	8002c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7ff ffa4 	bl	8002c90 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002d48:	20b0      	movs	r0, #176	; 0xb0
 8002d4a:	f7ff ffa1 	bl	8002c90 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002d4e:	20c8      	movs	r0, #200	; 0xc8
 8002d50:	f7ff ff9e 	bl	8002c90 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7ff ff9b 	bl	8002c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002d5a:	2010      	movs	r0, #16
 8002d5c:	f7ff ff98 	bl	8002c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002d60:	2040      	movs	r0, #64	; 0x40
 8002d62:	f7ff ff95 	bl	8002c90 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002d66:	20ff      	movs	r0, #255	; 0xff
 8002d68:	f000 f9fb 	bl	8003162 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002d6c:	20a1      	movs	r0, #161	; 0xa1
 8002d6e:	f7ff ff8f 	bl	8002c90 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002d72:	20a6      	movs	r0, #166	; 0xa6
 8002d74:	f7ff ff8c 	bl	8002c90 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002d78:	20a8      	movs	r0, #168	; 0xa8
 8002d7a:	f7ff ff89 	bl	8002c90 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002d7e:	203f      	movs	r0, #63	; 0x3f
 8002d80:	f7ff ff86 	bl	8002c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002d84:	20a4      	movs	r0, #164	; 0xa4
 8002d86:	f7ff ff83 	bl	8002c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002d8a:	20d3      	movs	r0, #211	; 0xd3
 8002d8c:	f7ff ff80 	bl	8002c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7ff ff7d 	bl	8002c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002d96:	20d5      	movs	r0, #213	; 0xd5
 8002d98:	f7ff ff7a 	bl	8002c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002d9c:	20f0      	movs	r0, #240	; 0xf0
 8002d9e:	f7ff ff77 	bl	8002c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002da2:	20d9      	movs	r0, #217	; 0xd9
 8002da4:	f7ff ff74 	bl	8002c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002da8:	2022      	movs	r0, #34	; 0x22
 8002daa:	f7ff ff71 	bl	8002c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002dae:	20da      	movs	r0, #218	; 0xda
 8002db0:	f7ff ff6e 	bl	8002c90 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002db4:	2012      	movs	r0, #18
 8002db6:	f7ff ff6b 	bl	8002c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002dba:	20db      	movs	r0, #219	; 0xdb
 8002dbc:	f7ff ff68 	bl	8002c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002dc0:	2020      	movs	r0, #32
 8002dc2:	f7ff ff65 	bl	8002c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002dc6:	208d      	movs	r0, #141	; 0x8d
 8002dc8:	f7ff ff62 	bl	8002c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002dcc:	2014      	movs	r0, #20
 8002dce:	f7ff ff5f 	bl	8002c90 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f000 f9d8 	bl	8003188 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f000 f80f 	bl	8002dfc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002dde:	f000 f825 	bl	8002e2c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <ssd1306_Init+0xd0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <ssd1306_Init+0xd0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002dee:	4b02      	ldr	r3, [pc, #8]	; (8002df8 <ssd1306_Init+0xd0>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	711a      	strb	r2, [r3, #4]
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20001214 	.word	0x20001214

08002dfc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <ssd1306_Fill+0x14>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <ssd1306_Fill+0x16>
 8002e10:	23ff      	movs	r3, #255	; 0xff
 8002e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e16:	4619      	mov	r1, r3
 8002e18:	4803      	ldr	r0, [pc, #12]	; (8002e28 <ssd1306_Fill+0x2c>)
 8002e1a:	f007 fd8d 	bl	800a938 <memset>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000e14 	.word	0x20000e14

08002e2c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e32:	2300      	movs	r3, #0
 8002e34:	71fb      	strb	r3, [r7, #7]
 8002e36:	e016      	b.n	8002e66 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	3b50      	subs	r3, #80	; 0x50
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff26 	bl	8002c90 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff ff23 	bl	8002c90 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002e4a:	2010      	movs	r0, #16
 8002e4c:	f7ff ff20 	bl	8002c90 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	01db      	lsls	r3, r3, #7
 8002e54:	4a08      	ldr	r2, [pc, #32]	; (8002e78 <ssd1306_UpdateScreen+0x4c>)
 8002e56:	4413      	add	r3, r2
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ff3e 	bl	8002cdc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	3301      	adds	r3, #1
 8002e64:	71fb      	strb	r3, [r7, #7]
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	2b07      	cmp	r3, #7
 8002e6a:	d9e5      	bls.n	8002e38 <ssd1306_UpdateScreen+0xc>
    }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000e14 	.word	0x20000e14

08002e7c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
 8002e86:	460b      	mov	r3, r1
 8002e88:	71bb      	strb	r3, [r7, #6]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	db3d      	blt.n	8002f12 <ssd1306_DrawPixel+0x96>
 8002e96:	79bb      	ldrb	r3, [r7, #6]
 8002e98:	2b3f      	cmp	r3, #63	; 0x3f
 8002e9a:	d83a      	bhi.n	8002f12 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002e9c:	797b      	ldrb	r3, [r7, #5]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d11a      	bne.n	8002ed8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ea2:	79fa      	ldrb	r2, [r7, #7]
 8002ea4:	79bb      	ldrb	r3, [r7, #6]
 8002ea6:	08db      	lsrs	r3, r3, #3
 8002ea8:	b2d8      	uxtb	r0, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	01db      	lsls	r3, r3, #7
 8002eae:	4413      	add	r3, r2
 8002eb0:	4a1a      	ldr	r2, [pc, #104]	; (8002f1c <ssd1306_DrawPixel+0xa0>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	b25a      	sxtb	r2, r3
 8002eb6:	79bb      	ldrb	r3, [r7, #6]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	b259      	sxtb	r1, r3
 8002ec8:	79fa      	ldrb	r2, [r7, #7]
 8002eca:	4603      	mov	r3, r0
 8002ecc:	01db      	lsls	r3, r3, #7
 8002ece:	4413      	add	r3, r2
 8002ed0:	b2c9      	uxtb	r1, r1
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <ssd1306_DrawPixel+0xa0>)
 8002ed4:	54d1      	strb	r1, [r2, r3]
 8002ed6:	e01d      	b.n	8002f14 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ed8:	79fa      	ldrb	r2, [r7, #7]
 8002eda:	79bb      	ldrb	r3, [r7, #6]
 8002edc:	08db      	lsrs	r3, r3, #3
 8002ede:	b2d8      	uxtb	r0, r3
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	01db      	lsls	r3, r3, #7
 8002ee4:	4413      	add	r3, r2
 8002ee6:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <ssd1306_DrawPixel+0xa0>)
 8002ee8:	5cd3      	ldrb	r3, [r2, r3]
 8002eea:	b25a      	sxtb	r2, r3
 8002eec:	79bb      	ldrb	r3, [r7, #6]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	b25b      	sxtb	r3, r3
 8002efe:	4013      	ands	r3, r2
 8002f00:	b259      	sxtb	r1, r3
 8002f02:	79fa      	ldrb	r2, [r7, #7]
 8002f04:	4603      	mov	r3, r0
 8002f06:	01db      	lsls	r3, r3, #7
 8002f08:	4413      	add	r3, r2
 8002f0a:	b2c9      	uxtb	r1, r1
 8002f0c:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <ssd1306_DrawPixel+0xa0>)
 8002f0e:	54d1      	strb	r1, [r2, r3]
 8002f10:	e000      	b.n	8002f14 <ssd1306_DrawPixel+0x98>
        return;
 8002f12:	bf00      	nop
    }
}
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	20000e14 	.word	0x20000e14

08002f20 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b089      	sub	sp, #36	; 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4604      	mov	r4, r0
 8002f28:	1d38      	adds	r0, r7, #4
 8002f2a:	e880 0006 	stmia.w	r0, {r1, r2}
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4623      	mov	r3, r4
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	4613      	mov	r3, r2
 8002f36:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	d902      	bls.n	8002f44 <ssd1306_WriteChar+0x24>
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	2b7e      	cmp	r3, #126	; 0x7e
 8002f42:	d901      	bls.n	8002f48 <ssd1306_WriteChar+0x28>
        return 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e06d      	b.n	8003024 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f48:	4b38      	ldr	r3, [pc, #224]	; (800302c <ssd1306_WriteChar+0x10c>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	793b      	ldrb	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	dc06      	bgt.n	8002f64 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002f56:	4b35      	ldr	r3, [pc, #212]	; (800302c <ssd1306_WriteChar+0x10c>)
 8002f58:	885b      	ldrh	r3, [r3, #2]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	797b      	ldrb	r3, [r7, #5]
 8002f5e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	dd01      	ble.n	8002f68 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e05d      	b.n	8003024 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	e04c      	b.n	8003008 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	3b20      	subs	r3, #32
 8002f74:	7979      	ldrb	r1, [r7, #5]
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	440b      	add	r3, r1
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	e034      	b.n	8002ff8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d012      	beq.n	8002fc4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f9e:	4b23      	ldr	r3, [pc, #140]	; (800302c <ssd1306_WriteChar+0x10c>)
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	b2d8      	uxtb	r0, r3
 8002fac:	4b1f      	ldr	r3, [pc, #124]	; (800302c <ssd1306_WriteChar+0x10c>)
 8002fae:	885b      	ldrh	r3, [r3, #2]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	7bba      	ldrb	r2, [r7, #14]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f7ff ff5d 	bl	8002e7c <ssd1306_DrawPixel>
 8002fc2:	e016      	b.n	8002ff2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002fc4:	4b19      	ldr	r3, [pc, #100]	; (800302c <ssd1306_WriteChar+0x10c>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	b2d8      	uxtb	r0, r3
 8002fd2:	4b16      	ldr	r3, [pc, #88]	; (800302c <ssd1306_WriteChar+0x10c>)
 8002fd4:	885b      	ldrh	r3, [r3, #2]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	b2d9      	uxtb	r1, r3
 8002fe0:	7bbb      	ldrb	r3, [r7, #14]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	f7ff ff45 	bl	8002e7c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	793b      	ldrb	r3, [r7, #4]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d3c5      	bcc.n	8002f8e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3301      	adds	r3, #1
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	797b      	ldrb	r3, [r7, #5]
 800300a:	461a      	mov	r2, r3
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	4293      	cmp	r3, r2
 8003010:	d3ad      	bcc.n	8002f6e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <ssd1306_WriteChar+0x10c>)
 8003014:	881a      	ldrh	r2, [r3, #0]
 8003016:	793b      	ldrb	r3, [r7, #4]
 8003018:	b29b      	uxth	r3, r3
 800301a:	4413      	add	r3, r2
 800301c:	b29a      	uxth	r2, r3
 800301e:	4b03      	ldr	r3, [pc, #12]	; (800302c <ssd1306_WriteChar+0x10c>)
 8003020:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3724      	adds	r7, #36	; 0x24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd90      	pop	{r4, r7, pc}
 800302c:	20001214 	.word	0x20001214

08003030 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	1d38      	adds	r0, r7, #4
 800303a:	e880 0006 	stmia.w	r0, {r1, r2}
 800303e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003040:	e012      	b.n	8003068 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	7818      	ldrb	r0, [r3, #0]
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	1d3a      	adds	r2, r7, #4
 800304a:	ca06      	ldmia	r2, {r1, r2}
 800304c:	f7ff ff68 	bl	8002f20 <ssd1306_WriteChar>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d002      	beq.n	8003062 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	e008      	b.n	8003074 <ssd1306_WriteString+0x44>
        }
        str++;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3301      	adds	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e8      	bne.n	8003042 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	781b      	ldrb	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	460a      	mov	r2, r1
 8003086:	71fb      	strb	r3, [r7, #7]
 8003088:	4613      	mov	r3, r2
 800308a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	b29a      	uxth	r2, r3
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <ssd1306_SetCursor+0x2c>)
 8003092:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003094:	79bb      	ldrb	r3, [r7, #6]
 8003096:	b29a      	uxth	r2, r3
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <ssd1306_SetCursor+0x2c>)
 800309a:	805a      	strh	r2, [r3, #2]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20001214 	.word	0x20001214

080030ac <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	603a      	str	r2, [r7, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
 80030ba:	460b      	mov	r3, r1
 80030bc:	71bb      	strb	r3, [r7, #6]
 80030be:	4613      	mov	r3, r2
 80030c0:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80030c2:	797b      	ldrb	r3, [r7, #5]
 80030c4:	3307      	adds	r3, #7
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	da00      	bge.n	80030cc <ssd1306_DrawBitmap+0x20>
 80030ca:	3307      	adds	r3, #7
 80030cc:	10db      	asrs	r3, r3, #3
 80030ce:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	db3e      	blt.n	800315a <ssd1306_DrawBitmap+0xae>
 80030dc:	79bb      	ldrb	r3, [r7, #6]
 80030de:	2b3f      	cmp	r3, #63	; 0x3f
 80030e0:	d83b      	bhi.n	800315a <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80030e2:	2300      	movs	r3, #0
 80030e4:	73bb      	strb	r3, [r7, #14]
 80030e6:	e033      	b.n	8003150 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80030e8:	2300      	movs	r3, #0
 80030ea:	737b      	strb	r3, [r7, #13]
 80030ec:	e026      	b.n	800313c <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80030ee:	7b7b      	ldrb	r3, [r7, #13]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	e00d      	b.n	800311c <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003100:	7bbb      	ldrb	r3, [r7, #14]
 8003102:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	7b7a      	ldrb	r2, [r7, #13]
 800310c:	08d2      	lsrs	r2, r2, #3
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	4413      	add	r3, r2
 8003112:	461a      	mov	r2, r3
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4413      	add	r3, r2
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 800311c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003120:	2b00      	cmp	r3, #0
 8003122:	da08      	bge.n	8003136 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8003124:	79fa      	ldrb	r2, [r7, #7]
 8003126:	7b7b      	ldrb	r3, [r7, #13]
 8003128:	4413      	add	r3, r2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	7f3a      	ldrb	r2, [r7, #28]
 800312e:	79b9      	ldrb	r1, [r7, #6]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fea3 	bl	8002e7c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8003136:	7b7b      	ldrb	r3, [r7, #13]
 8003138:	3301      	adds	r3, #1
 800313a:	737b      	strb	r3, [r7, #13]
 800313c:	7b7a      	ldrb	r2, [r7, #13]
 800313e:	797b      	ldrb	r3, [r7, #5]
 8003140:	429a      	cmp	r2, r3
 8003142:	d3d4      	bcc.n	80030ee <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8003144:	7bbb      	ldrb	r3, [r7, #14]
 8003146:	3301      	adds	r3, #1
 8003148:	73bb      	strb	r3, [r7, #14]
 800314a:	79bb      	ldrb	r3, [r7, #6]
 800314c:	3301      	adds	r3, #1
 800314e:	71bb      	strb	r3, [r7, #6]
 8003150:	7bba      	ldrb	r2, [r7, #14]
 8003152:	7e3b      	ldrb	r3, [r7, #24]
 8003154:	429a      	cmp	r2, r3
 8003156:	d3c7      	bcc.n	80030e8 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8003158:	e000      	b.n	800315c <ssd1306_DrawBitmap+0xb0>
        return;
 800315a:	bf00      	nop
}
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800316c:	2381      	movs	r3, #129	; 0x81
 800316e:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fd8c 	bl	8002c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fd88 	bl	8002c90 <ssd1306_WriteCommand>
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003198:	23af      	movs	r3, #175	; 0xaf
 800319a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <ssd1306_SetDisplayOn+0x38>)
 800319e:	2201      	movs	r2, #1
 80031a0:	715a      	strb	r2, [r3, #5]
 80031a2:	e004      	b.n	80031ae <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80031a4:	23ae      	movs	r3, #174	; 0xae
 80031a6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <ssd1306_SetDisplayOn+0x38>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fd6d 	bl	8002c90 <ssd1306_WriteCommand>
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20001214 	.word	0x20001214

080031c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031c4:	f7fe fdd2 	bl	8001d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031c8:	480b      	ldr	r0, [pc, #44]	; (80031f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80031ca:	490c      	ldr	r1, [pc, #48]	; (80031fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80031cc:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <LoopFillZerobss+0x16>)
  movs r3, #0
 80031ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d0:	e002      	b.n	80031d8 <LoopCopyDataInit>

080031d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031d6:	3304      	adds	r3, #4

080031d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031dc:	d3f9      	bcc.n	80031d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80031e0:	4c09      	ldr	r4, [pc, #36]	; (8003208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031e4:	e001      	b.n	80031ea <LoopFillZerobss>

080031e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031e8:	3204      	adds	r2, #4

080031ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031ec:	d3fb      	bcc.n	80031e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031ee:	f007 fb7f 	bl	800a8f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031f2:	f7fd f925 	bl	8000440 <main>
  bx lr
 80031f6:	4770      	bx	lr
  ldr r0, =_sdata
 80031f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031fc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8003200:	0800c034 	.word	0x0800c034
  ldr r2, =_sbss
 8003204:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8003208:	20001254 	.word	0x20001254

0800320c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800320c:	e7fe      	b.n	800320c <ADC1_2_IRQHandler>
	...

08003210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_Init+0x28>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_Init+0x28>)
 800321a:	f043 0310 	orr.w	r3, r3, #16
 800321e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003220:	2003      	movs	r0, #3
 8003222:	f000 f947 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003226:	200f      	movs	r0, #15
 8003228:	f000 f808 	bl	800323c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800322c:	f7fe fb26 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40022000 	.word	0x40022000

0800323c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_InitTick+0x54>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_InitTick+0x58>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003252:	fbb3 f3f1 	udiv	r3, r3, r1
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f95f 	bl	800351e <HAL_SYSTICK_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e00e      	b.n	8003288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0f      	cmp	r3, #15
 800326e:	d80a      	bhi.n	8003286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003270:	2200      	movs	r2, #0
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f000 f927 	bl	80034ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800327c:	4a06      	ldr	r2, [pc, #24]	; (8003298 <HAL_InitTick+0x5c>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000078 	.word	0x20000078
 8003294:	20000094 	.word	0x20000094
 8003298:	20000090 	.word	0x20000090

0800329c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_IncTick+0x1c>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_IncTick+0x20>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	4a03      	ldr	r2, [pc, #12]	; (80032bc <HAL_IncTick+0x20>)
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	20000094 	.word	0x20000094
 80032bc:	2000121c 	.word	0x2000121c

080032c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return uwTick;
 80032c4:	4b02      	ldr	r3, [pc, #8]	; (80032d0 <HAL_GetTick+0x10>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	2000121c 	.word	0x2000121c

080032d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032dc:	f7ff fff0 	bl	80032c0 <HAL_GetTick>
 80032e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d005      	beq.n	80032fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_Delay+0x44>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032fa:	bf00      	nop
 80032fc:	f7ff ffe0 	bl	80032c0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	429a      	cmp	r2, r3
 800330a:	d8f7      	bhi.n	80032fc <HAL_Delay+0x28>
  {
  }
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000094 	.word	0x20000094

0800331c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <__NVIC_SetPriorityGrouping+0x44>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003338:	4013      	ands	r3, r2
 800333a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334e:	4a04      	ldr	r2, [pc, #16]	; (8003360 <__NVIC_SetPriorityGrouping+0x44>)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	60d3      	str	r3, [r2, #12]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <__NVIC_GetPriorityGrouping+0x18>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	f003 0307 	and.w	r3, r3, #7
}
 8003372:	4618      	mov	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	2b00      	cmp	r3, #0
 8003390:	db0b      	blt.n	80033aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	f003 021f 	and.w	r2, r3, #31
 8003398:	4906      	ldr	r1, [pc, #24]	; (80033b4 <__NVIC_EnableIRQ+0x34>)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2001      	movs	r0, #1
 80033a2:	fa00 f202 	lsl.w	r2, r0, r2
 80033a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	e000e100 	.word	0xe000e100

080033b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	6039      	str	r1, [r7, #0]
 80033c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	db0a      	blt.n	80033e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	490c      	ldr	r1, [pc, #48]	; (8003404 <__NVIC_SetPriority+0x4c>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	0112      	lsls	r2, r2, #4
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	440b      	add	r3, r1
 80033dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e0:	e00a      	b.n	80033f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	4908      	ldr	r1, [pc, #32]	; (8003408 <__NVIC_SetPriority+0x50>)
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	3b04      	subs	r3, #4
 80033f0:	0112      	lsls	r2, r2, #4
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	440b      	add	r3, r1
 80033f6:	761a      	strb	r2, [r3, #24]
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	e000e100 	.word	0xe000e100
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f1c3 0307 	rsb	r3, r3, #7
 8003426:	2b04      	cmp	r3, #4
 8003428:	bf28      	it	cs
 800342a:	2304      	movcs	r3, #4
 800342c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3304      	adds	r3, #4
 8003432:	2b06      	cmp	r3, #6
 8003434:	d902      	bls.n	800343c <NVIC_EncodePriority+0x30>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3b03      	subs	r3, #3
 800343a:	e000      	b.n	800343e <NVIC_EncodePriority+0x32>
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003440:	f04f 32ff 	mov.w	r2, #4294967295
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43da      	mvns	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	401a      	ands	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003454:	f04f 31ff 	mov.w	r1, #4294967295
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	43d9      	mvns	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	4313      	orrs	r3, r2
         );
}
 8003466:	4618      	mov	r0, r3
 8003468:	3724      	adds	r7, #36	; 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003480:	d301      	bcc.n	8003486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003482:	2301      	movs	r3, #1
 8003484:	e00f      	b.n	80034a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <SysTick_Config+0x40>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348e:	210f      	movs	r1, #15
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	f7ff ff90 	bl	80033b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <SysTick_Config+0x40>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <SysTick_Config+0x40>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff2d 	bl	800331c <__NVIC_SetPriorityGrouping>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034dc:	f7ff ff42 	bl	8003364 <__NVIC_GetPriorityGrouping>
 80034e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7ff ff90 	bl	800340c <NVIC_EncodePriority>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff5f 	bl	80033b8 <__NVIC_SetPriority>
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff35 	bl	8003380 <__NVIC_EnableIRQ>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ffa2 	bl	8003470 <SysTick_Config>
 800352c:	4603      	mov	r3, r0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d005      	beq.n	800355c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2204      	movs	r2, #4
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	e051      	b.n	8003600 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 020e 	bic.w	r2, r2, #14
 800356a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a22      	ldr	r2, [pc, #136]	; (800360c <HAL_DMA_Abort_IT+0xd4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d029      	beq.n	80035da <HAL_DMA_Abort_IT+0xa2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <HAL_DMA_Abort_IT+0xd8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <HAL_DMA_Abort_IT+0x9e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1f      	ldr	r2, [pc, #124]	; (8003614 <HAL_DMA_Abort_IT+0xdc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d01a      	beq.n	80035d0 <HAL_DMA_Abort_IT+0x98>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <HAL_DMA_Abort_IT+0xe0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d012      	beq.n	80035ca <HAL_DMA_Abort_IT+0x92>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <HAL_DMA_Abort_IT+0xe4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00a      	beq.n	80035c4 <HAL_DMA_Abort_IT+0x8c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <HAL_DMA_Abort_IT+0xe8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d102      	bne.n	80035be <HAL_DMA_Abort_IT+0x86>
 80035b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035bc:	e00e      	b.n	80035dc <HAL_DMA_Abort_IT+0xa4>
 80035be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035c2:	e00b      	b.n	80035dc <HAL_DMA_Abort_IT+0xa4>
 80035c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c8:	e008      	b.n	80035dc <HAL_DMA_Abort_IT+0xa4>
 80035ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ce:	e005      	b.n	80035dc <HAL_DMA_Abort_IT+0xa4>
 80035d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d4:	e002      	b.n	80035dc <HAL_DMA_Abort_IT+0xa4>
 80035d6:	2310      	movs	r3, #16
 80035d8:	e000      	b.n	80035dc <HAL_DMA_Abort_IT+0xa4>
 80035da:	2301      	movs	r3, #1
 80035dc:	4a11      	ldr	r2, [pc, #68]	; (8003624 <HAL_DMA_Abort_IT+0xec>)
 80035de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4798      	blx	r3
    } 
  }
  return status;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40020008 	.word	0x40020008
 8003610:	4002001c 	.word	0x4002001c
 8003614:	40020030 	.word	0x40020030
 8003618:	40020044 	.word	0x40020044
 800361c:	40020058 	.word	0x40020058
 8003620:	4002006c 	.word	0x4002006c
 8003624:	40020000 	.word	0x40020000

08003628 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003636:	b2db      	uxtb	r3, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
	...

08003644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003644:	b480      	push	{r7}
 8003646:	b08b      	sub	sp, #44	; 0x2c
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003652:	2300      	movs	r3, #0
 8003654:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003656:	e169      	b.n	800392c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003658:	2201      	movs	r2, #1
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	429a      	cmp	r2, r3
 8003672:	f040 8158 	bne.w	8003926 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4a9a      	ldr	r2, [pc, #616]	; (80038e4 <HAL_GPIO_Init+0x2a0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d05e      	beq.n	800373e <HAL_GPIO_Init+0xfa>
 8003680:	4a98      	ldr	r2, [pc, #608]	; (80038e4 <HAL_GPIO_Init+0x2a0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d875      	bhi.n	8003772 <HAL_GPIO_Init+0x12e>
 8003686:	4a98      	ldr	r2, [pc, #608]	; (80038e8 <HAL_GPIO_Init+0x2a4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d058      	beq.n	800373e <HAL_GPIO_Init+0xfa>
 800368c:	4a96      	ldr	r2, [pc, #600]	; (80038e8 <HAL_GPIO_Init+0x2a4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d86f      	bhi.n	8003772 <HAL_GPIO_Init+0x12e>
 8003692:	4a96      	ldr	r2, [pc, #600]	; (80038ec <HAL_GPIO_Init+0x2a8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d052      	beq.n	800373e <HAL_GPIO_Init+0xfa>
 8003698:	4a94      	ldr	r2, [pc, #592]	; (80038ec <HAL_GPIO_Init+0x2a8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d869      	bhi.n	8003772 <HAL_GPIO_Init+0x12e>
 800369e:	4a94      	ldr	r2, [pc, #592]	; (80038f0 <HAL_GPIO_Init+0x2ac>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d04c      	beq.n	800373e <HAL_GPIO_Init+0xfa>
 80036a4:	4a92      	ldr	r2, [pc, #584]	; (80038f0 <HAL_GPIO_Init+0x2ac>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d863      	bhi.n	8003772 <HAL_GPIO_Init+0x12e>
 80036aa:	4a92      	ldr	r2, [pc, #584]	; (80038f4 <HAL_GPIO_Init+0x2b0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d046      	beq.n	800373e <HAL_GPIO_Init+0xfa>
 80036b0:	4a90      	ldr	r2, [pc, #576]	; (80038f4 <HAL_GPIO_Init+0x2b0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d85d      	bhi.n	8003772 <HAL_GPIO_Init+0x12e>
 80036b6:	2b12      	cmp	r3, #18
 80036b8:	d82a      	bhi.n	8003710 <HAL_GPIO_Init+0xcc>
 80036ba:	2b12      	cmp	r3, #18
 80036bc:	d859      	bhi.n	8003772 <HAL_GPIO_Init+0x12e>
 80036be:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <HAL_GPIO_Init+0x80>)
 80036c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c4:	0800373f 	.word	0x0800373f
 80036c8:	08003719 	.word	0x08003719
 80036cc:	0800372b 	.word	0x0800372b
 80036d0:	0800376d 	.word	0x0800376d
 80036d4:	08003773 	.word	0x08003773
 80036d8:	08003773 	.word	0x08003773
 80036dc:	08003773 	.word	0x08003773
 80036e0:	08003773 	.word	0x08003773
 80036e4:	08003773 	.word	0x08003773
 80036e8:	08003773 	.word	0x08003773
 80036ec:	08003773 	.word	0x08003773
 80036f0:	08003773 	.word	0x08003773
 80036f4:	08003773 	.word	0x08003773
 80036f8:	08003773 	.word	0x08003773
 80036fc:	08003773 	.word	0x08003773
 8003700:	08003773 	.word	0x08003773
 8003704:	08003773 	.word	0x08003773
 8003708:	08003721 	.word	0x08003721
 800370c:	08003735 	.word	0x08003735
 8003710:	4a79      	ldr	r2, [pc, #484]	; (80038f8 <HAL_GPIO_Init+0x2b4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003716:	e02c      	b.n	8003772 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	623b      	str	r3, [r7, #32]
          break;
 800371e:	e029      	b.n	8003774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	3304      	adds	r3, #4
 8003726:	623b      	str	r3, [r7, #32]
          break;
 8003728:	e024      	b.n	8003774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	3308      	adds	r3, #8
 8003730:	623b      	str	r3, [r7, #32]
          break;
 8003732:	e01f      	b.n	8003774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	330c      	adds	r3, #12
 800373a:	623b      	str	r3, [r7, #32]
          break;
 800373c:	e01a      	b.n	8003774 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d102      	bne.n	800374c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003746:	2304      	movs	r3, #4
 8003748:	623b      	str	r3, [r7, #32]
          break;
 800374a:	e013      	b.n	8003774 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003754:	2308      	movs	r3, #8
 8003756:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	611a      	str	r2, [r3, #16]
          break;
 800375e:	e009      	b.n	8003774 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003760:	2308      	movs	r3, #8
 8003762:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	615a      	str	r2, [r3, #20]
          break;
 800376a:	e003      	b.n	8003774 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800376c:	2300      	movs	r3, #0
 800376e:	623b      	str	r3, [r7, #32]
          break;
 8003770:	e000      	b.n	8003774 <HAL_GPIO_Init+0x130>
          break;
 8003772:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2bff      	cmp	r3, #255	; 0xff
 8003778:	d801      	bhi.n	800377e <HAL_GPIO_Init+0x13a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	e001      	b.n	8003782 <HAL_GPIO_Init+0x13e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2bff      	cmp	r3, #255	; 0xff
 8003788:	d802      	bhi.n	8003790 <HAL_GPIO_Init+0x14c>
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	e002      	b.n	8003796 <HAL_GPIO_Init+0x152>
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	3b08      	subs	r3, #8
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	210f      	movs	r1, #15
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	401a      	ands	r2, r3
 80037a8:	6a39      	ldr	r1, [r7, #32]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	fa01 f303 	lsl.w	r3, r1, r3
 80037b0:	431a      	orrs	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80b1 	beq.w	8003926 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037c4:	4b4d      	ldr	r3, [pc, #308]	; (80038fc <HAL_GPIO_Init+0x2b8>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	4a4c      	ldr	r2, [pc, #304]	; (80038fc <HAL_GPIO_Init+0x2b8>)
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	6193      	str	r3, [r2, #24]
 80037d0:	4b4a      	ldr	r3, [pc, #296]	; (80038fc <HAL_GPIO_Init+0x2b8>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037dc:	4a48      	ldr	r2, [pc, #288]	; (8003900 <HAL_GPIO_Init+0x2bc>)
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	089b      	lsrs	r3, r3, #2
 80037e2:	3302      	adds	r3, #2
 80037e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	220f      	movs	r2, #15
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4013      	ands	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a40      	ldr	r2, [pc, #256]	; (8003904 <HAL_GPIO_Init+0x2c0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d013      	beq.n	8003830 <HAL_GPIO_Init+0x1ec>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a3f      	ldr	r2, [pc, #252]	; (8003908 <HAL_GPIO_Init+0x2c4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00d      	beq.n	800382c <HAL_GPIO_Init+0x1e8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a3e      	ldr	r2, [pc, #248]	; (800390c <HAL_GPIO_Init+0x2c8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d007      	beq.n	8003828 <HAL_GPIO_Init+0x1e4>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a3d      	ldr	r2, [pc, #244]	; (8003910 <HAL_GPIO_Init+0x2cc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d101      	bne.n	8003824 <HAL_GPIO_Init+0x1e0>
 8003820:	2303      	movs	r3, #3
 8003822:	e006      	b.n	8003832 <HAL_GPIO_Init+0x1ee>
 8003824:	2304      	movs	r3, #4
 8003826:	e004      	b.n	8003832 <HAL_GPIO_Init+0x1ee>
 8003828:	2302      	movs	r3, #2
 800382a:	e002      	b.n	8003832 <HAL_GPIO_Init+0x1ee>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_GPIO_Init+0x1ee>
 8003830:	2300      	movs	r3, #0
 8003832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003834:	f002 0203 	and.w	r2, r2, #3
 8003838:	0092      	lsls	r2, r2, #2
 800383a:	4093      	lsls	r3, r2
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003842:	492f      	ldr	r1, [pc, #188]	; (8003900 <HAL_GPIO_Init+0x2bc>)
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	3302      	adds	r3, #2
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d006      	beq.n	800386a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800385c:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	492c      	ldr	r1, [pc, #176]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]
 8003868:	e006      	b.n	8003878 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800386a:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	43db      	mvns	r3, r3
 8003872:	4928      	ldr	r1, [pc, #160]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 8003874:	4013      	ands	r3, r2
 8003876:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d006      	beq.n	8003892 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003884:	4b23      	ldr	r3, [pc, #140]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	4922      	ldr	r1, [pc, #136]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	60cb      	str	r3, [r1, #12]
 8003890:	e006      	b.n	80038a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003892:	4b20      	ldr	r3, [pc, #128]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	43db      	mvns	r3, r3
 800389a:	491e      	ldr	r1, [pc, #120]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 800389c:	4013      	ands	r3, r2
 800389e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d006      	beq.n	80038ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038ac:	4b19      	ldr	r3, [pc, #100]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	4918      	ldr	r1, [pc, #96]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
 80038b8:	e006      	b.n	80038c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038ba:	4b16      	ldr	r3, [pc, #88]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	4914      	ldr	r1, [pc, #80]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d021      	beq.n	8003918 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	490e      	ldr	r1, [pc, #56]	; (8003914 <HAL_GPIO_Init+0x2d0>)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	4313      	orrs	r3, r2
 80038de:	600b      	str	r3, [r1, #0]
 80038e0:	e021      	b.n	8003926 <HAL_GPIO_Init+0x2e2>
 80038e2:	bf00      	nop
 80038e4:	10320000 	.word	0x10320000
 80038e8:	10310000 	.word	0x10310000
 80038ec:	10220000 	.word	0x10220000
 80038f0:	10210000 	.word	0x10210000
 80038f4:	10120000 	.word	0x10120000
 80038f8:	10110000 	.word	0x10110000
 80038fc:	40021000 	.word	0x40021000
 8003900:	40010000 	.word	0x40010000
 8003904:	40010800 	.word	0x40010800
 8003908:	40010c00 	.word	0x40010c00
 800390c:	40011000 	.word	0x40011000
 8003910:	40011400 	.word	0x40011400
 8003914:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_GPIO_Init+0x304>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	43db      	mvns	r3, r3
 8003920:	4909      	ldr	r1, [pc, #36]	; (8003948 <HAL_GPIO_Init+0x304>)
 8003922:	4013      	ands	r3, r2
 8003924:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	3301      	adds	r3, #1
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	f47f ae8e 	bne.w	8003658 <HAL_GPIO_Init+0x14>
  }
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	372c      	adds	r7, #44	; 0x2c
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	40010400 	.word	0x40010400

0800394c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	807b      	strh	r3, [r7, #2]
 8003958:	4613      	mov	r3, r2
 800395a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800395c:	787b      	ldrb	r3, [r7, #1]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003962:	887a      	ldrh	r2, [r7, #2]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003968:	e003      	b.n	8003972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800396a:	887b      	ldrh	r3, [r7, #2]
 800396c:	041a      	lsls	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	611a      	str	r2, [r3, #16]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	4013      	ands	r3, r2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d006      	beq.n	80039a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003992:	4a05      	ldr	r2, [pc, #20]	; (80039a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	4618      	mov	r0, r3
 800399c:	f7fc fbd6 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40010400 	.word	0x40010400

080039ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e12b      	b.n	8003c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd ff84 	bl	80018e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2224      	movs	r2, #36	; 0x24
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a10:	f002 fbb4 	bl	800617c <HAL_RCC_GetPCLK1Freq>
 8003a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4a81      	ldr	r2, [pc, #516]	; (8003c20 <HAL_I2C_Init+0x274>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d807      	bhi.n	8003a30 <HAL_I2C_Init+0x84>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a80      	ldr	r2, [pc, #512]	; (8003c24 <HAL_I2C_Init+0x278>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	bf94      	ite	ls
 8003a28:	2301      	movls	r3, #1
 8003a2a:	2300      	movhi	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e006      	b.n	8003a3e <HAL_I2C_Init+0x92>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a7d      	ldr	r2, [pc, #500]	; (8003c28 <HAL_I2C_Init+0x27c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	bf94      	ite	ls
 8003a38:	2301      	movls	r3, #1
 8003a3a:	2300      	movhi	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e0e7      	b.n	8003c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a78      	ldr	r2, [pc, #480]	; (8003c2c <HAL_I2C_Init+0x280>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	0c9b      	lsrs	r3, r3, #18
 8003a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	4a6a      	ldr	r2, [pc, #424]	; (8003c20 <HAL_I2C_Init+0x274>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d802      	bhi.n	8003a80 <HAL_I2C_Init+0xd4>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	e009      	b.n	8003a94 <HAL_I2C_Init+0xe8>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	4a69      	ldr	r2, [pc, #420]	; (8003c30 <HAL_I2C_Init+0x284>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	099b      	lsrs	r3, r3, #6
 8003a92:	3301      	adds	r3, #1
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003aa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	495c      	ldr	r1, [pc, #368]	; (8003c20 <HAL_I2C_Init+0x274>)
 8003ab0:	428b      	cmp	r3, r1
 8003ab2:	d819      	bhi.n	8003ae8 <HAL_I2C_Init+0x13c>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e59      	subs	r1, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac2:	1c59      	adds	r1, r3, #1
 8003ac4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ac8:	400b      	ands	r3, r1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_I2C_Init+0x138>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1e59      	subs	r1, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae2:	e051      	b.n	8003b88 <HAL_I2C_Init+0x1dc>
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	e04f      	b.n	8003b88 <HAL_I2C_Init+0x1dc>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d111      	bne.n	8003b14 <HAL_I2C_Init+0x168>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1e58      	subs	r0, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6859      	ldr	r1, [r3, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	440b      	add	r3, r1
 8003afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b02:	3301      	adds	r3, #1
 8003b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2301      	moveq	r3, #1
 8003b0e:	2300      	movne	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e012      	b.n	8003b3a <HAL_I2C_Init+0x18e>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1e58      	subs	r0, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6859      	ldr	r1, [r3, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	0099      	lsls	r1, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Init+0x196>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e022      	b.n	8003b88 <HAL_I2C_Init+0x1dc>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10e      	bne.n	8003b68 <HAL_I2C_Init+0x1bc>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1e58      	subs	r0, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6859      	ldr	r1, [r3, #4]
 8003b52:	460b      	mov	r3, r1
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	440b      	add	r3, r1
 8003b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b66:	e00f      	b.n	8003b88 <HAL_I2C_Init+0x1dc>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1e58      	subs	r0, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6859      	ldr	r1, [r3, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	0099      	lsls	r1, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	6809      	ldr	r1, [r1, #0]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69da      	ldr	r2, [r3, #28]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6911      	ldr	r1, [r2, #16]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68d2      	ldr	r2, [r2, #12]
 8003bc2:	4311      	orrs	r1, r2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	000186a0 	.word	0x000186a0
 8003c24:	001e847f 	.word	0x001e847f
 8003c28:	003d08ff 	.word	0x003d08ff
 8003c2c:	431bde83 	.word	0x431bde83
 8003c30:	10624dd3 	.word	0x10624dd3

08003c34 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d103      	bne.n	8003c52 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	611a      	str	r2, [r3, #16]
  }
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	817b      	strh	r3, [r7, #10]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	813b      	strh	r3, [r7, #8]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	f040 808a 	bne.w	8003d9c <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c88:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_I2C_Mem_Write_IT+0x14c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	08db      	lsrs	r3, r3, #3
 8003c8e:	4a47      	ldr	r2, [pc, #284]	; (8003dac <HAL_I2C_Mem_Write_IT+0x150>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	0a1a      	lsrs	r2, r3, #8
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009a      	lsls	r2, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d112      	bne.n	8003cd4 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f043 0220 	orr.w	r2, r3, #32
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e064      	b.n	8003d9e <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d0df      	beq.n	8003ca2 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_I2C_Mem_Write_IT+0x94>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e056      	b.n	8003d9e <HAL_I2C_Mem_Write_IT+0x142>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d007      	beq.n	8003d16 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d24:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2221      	movs	r2, #33	; 0x21
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2240      	movs	r2, #64	; 0x40
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a3a      	ldr	r2, [r7, #32]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4a16      	ldr	r2, [pc, #88]	; (8003db0 <HAL_I2C_Mem_Write_IT+0x154>)
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003d58:	897a      	ldrh	r2, [r7, #10]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003d5e:	893a      	ldrh	r2, [r7, #8]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003d64:	88fa      	ldrh	r2, [r7, #6]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003d96:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e000      	b.n	8003d9e <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	20000078 	.word	0x20000078
 8003dac:	14f8b589 	.word	0x14f8b589
 8003db0:	ffff0000 	.word	0xffff0000

08003db4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	817b      	strh	r3, [r7, #10]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	813b      	strh	r3, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	f040 8096 	bne.w	8003f0c <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003de0:	4b4d      	ldr	r3, [pc, #308]	; (8003f18 <HAL_I2C_Mem_Read_IT+0x164>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	08db      	lsrs	r3, r3, #3
 8003de6:	4a4d      	ldr	r2, [pc, #308]	; (8003f1c <HAL_I2C_Mem_Read_IT+0x168>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	0a1a      	lsrs	r2, r3, #8
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	009a      	lsls	r2, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d112      	bne.n	8003e2c <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f043 0220 	orr.w	r2, r3, #32
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e070      	b.n	8003f0e <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d0df      	beq.n	8003dfa <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_I2C_Mem_Read_IT+0x94>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e062      	b.n	8003f0e <HAL_I2C_Mem_Read_IT+0x15a>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d007      	beq.n	8003e6e <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e7c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2222      	movs	r2, #34	; 0x22
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2240      	movs	r2, #64	; 0x40
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a3a      	ldr	r2, [r7, #32]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4a1c      	ldr	r2, [pc, #112]	; (8003f20 <HAL_I2C_Mem_Read_IT+0x16c>)
 8003eae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003eb0:	897a      	ldrh	r2, [r7, #10]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003eb6:	893a      	ldrh	r2, [r7, #8]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003ebc:	88fa      	ldrh	r2, [r7, #6]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003f06:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e000      	b.n	8003f0e <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	20000078 	.word	0x20000078
 8003f1c:	14f8b589 	.word	0x14f8b589
 8003f20:	ffff0000 	.word	0xffff0000

08003f24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	; 0x28
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	460b      	mov	r3, r1
 8003f32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f34:	f7ff f9c4 	bl	80032c0 <HAL_GetTick>
 8003f38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	f040 8111 	bne.w	800416e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2319      	movs	r3, #25
 8003f52:	2201      	movs	r2, #1
 8003f54:	4988      	ldr	r1, [pc, #544]	; (8004178 <HAL_I2C_IsDeviceReady+0x254>)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f001 fc80 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
 8003f64:	e104      	b.n	8004170 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2C_IsDeviceReady+0x50>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e0fd      	b.n	8004170 <HAL_I2C_IsDeviceReady+0x24c>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d007      	beq.n	8003f9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2224      	movs	r2, #36	; 0x24
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a70      	ldr	r2, [pc, #448]	; (800417c <HAL_I2C_IsDeviceReady+0x258>)
 8003fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fcc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f001 fc3e 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff4:	d103      	bne.n	8003ffe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e0b6      	b.n	8004170 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004002:	897b      	ldrh	r3, [r7, #10]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004010:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004012:	f7ff f955 	bl	80032c0 <HAL_GetTick>
 8004016:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	bf0c      	ite	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	2300      	movne	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004046:	e025      	b.n	8004094 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004048:	f7ff f93a 	bl	80032c0 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d302      	bcc.n	800405e <HAL_I2C_IsDeviceReady+0x13a>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	22a0      	movs	r2, #160	; 0xa0
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b02      	cmp	r3, #2
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2ba0      	cmp	r3, #160	; 0xa0
 800409e:	d005      	beq.n	80040ac <HAL_I2C_IsDeviceReady+0x188>
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d102      	bne.n	80040ac <HAL_I2C_IsDeviceReady+0x188>
 80040a6:	7dbb      	ldrb	r3, [r7, #22]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0cd      	beq.n	8004048 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d129      	bne.n	8004116 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2319      	movs	r3, #25
 80040ee:	2201      	movs	r2, #1
 80040f0:	4921      	ldr	r1, [pc, #132]	; (8004178 <HAL_I2C_IsDeviceReady+0x254>)
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f001 fbb2 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e036      	b.n	8004170 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	e02c      	b.n	8004170 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004124:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800412e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2319      	movs	r3, #25
 8004136:	2201      	movs	r2, #1
 8004138:	490f      	ldr	r1, [pc, #60]	; (8004178 <HAL_I2C_IsDeviceReady+0x254>)
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f001 fb8e 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e012      	b.n	8004170 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	3301      	adds	r3, #1
 800414e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	f4ff af32 	bcc.w	8003fbe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	3720      	adds	r7, #32
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	00100002 	.word	0x00100002
 800417c:	ffff0000 	.word	0xffff0000

08004180 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	2b10      	cmp	r3, #16
 80041ae:	d003      	beq.n	80041b8 <HAL_I2C_EV_IRQHandler+0x38>
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	f040 80c1 	bne.w	800433a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10d      	bne.n	80041ee <HAL_I2C_EV_IRQHandler+0x6e>
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80041d8:	d003      	beq.n	80041e2 <HAL_I2C_EV_IRQHandler+0x62>
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041e0:	d101      	bne.n	80041e6 <HAL_I2C_EV_IRQHandler+0x66>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <HAL_I2C_EV_IRQHandler+0x68>
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	f000 8132 	beq.w	8004452 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00c      	beq.n	8004212 <HAL_I2C_EV_IRQHandler+0x92>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	0a5b      	lsrs	r3, r3, #9
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d006      	beq.n	8004212 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f001 fbd5 	bl	80059b4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fccd 	bl	8004baa <I2C_Master_SB>
 8004210:	e092      	b.n	8004338 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	08db      	lsrs	r3, r3, #3
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_I2C_EV_IRQHandler+0xb2>
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	0a5b      	lsrs	r3, r3, #9
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fd42 	bl	8004cb4 <I2C_Master_ADD10>
 8004230:	e082      	b.n	8004338 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_I2C_EV_IRQHandler+0xd2>
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	0a5b      	lsrs	r3, r3, #9
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fd5b 	bl	8004d06 <I2C_Master_ADDR>
 8004250:	e072      	b.n	8004338 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	089b      	lsrs	r3, r3, #2
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d03b      	beq.n	80042d6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426c:	f000 80f3 	beq.w	8004456 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	09db      	lsrs	r3, r3, #7
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00f      	beq.n	800429c <HAL_I2C_EV_IRQHandler+0x11c>
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	0a9b      	lsrs	r3, r3, #10
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_I2C_EV_IRQHandler+0x11c>
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	089b      	lsrs	r3, r3, #2
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f939 	bl	800450c <I2C_MasterTransmit_TXE>
 800429a:	e04d      	b.n	8004338 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	089b      	lsrs	r3, r3, #2
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80d6 	beq.w	8004456 <HAL_I2C_EV_IRQHandler+0x2d6>
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	0a5b      	lsrs	r3, r3, #9
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80cf 	beq.w	8004456 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80042b8:	7bbb      	ldrb	r3, [r7, #14]
 80042ba:	2b21      	cmp	r3, #33	; 0x21
 80042bc:	d103      	bne.n	80042c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f9c0 	bl	8004644 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042c4:	e0c7      	b.n	8004456 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	f040 80c4 	bne.w	8004456 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa2e 	bl	8004730 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042d4:	e0bf      	b.n	8004456 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e4:	f000 80b7 	beq.w	8004456 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	099b      	lsrs	r3, r3, #6
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00f      	beq.n	8004314 <HAL_I2C_EV_IRQHandler+0x194>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	0a9b      	lsrs	r3, r3, #10
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d009      	beq.n	8004314 <HAL_I2C_EV_IRQHandler+0x194>
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	089b      	lsrs	r3, r3, #2
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d103      	bne.n	8004314 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 faa7 	bl	8004860 <I2C_MasterReceive_RXNE>
 8004312:	e011      	b.n	8004338 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	089b      	lsrs	r3, r3, #2
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 809a 	beq.w	8004456 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	0a5b      	lsrs	r3, r3, #9
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8093 	beq.w	8004456 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fb50 	bl	80049d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004336:	e08e      	b.n	8004456 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004338:	e08d      	b.n	8004456 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	e007      	b.n	800435c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d012      	beq.n	800438e <HAL_I2C_EV_IRQHandler+0x20e>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	0a5b      	lsrs	r3, r3, #9
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00c      	beq.n	800438e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004384:	69b9      	ldr	r1, [r7, #24]
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 ff14 	bl	80051b4 <I2C_Slave_ADDR>
 800438c:	e066      	b.n	800445c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <HAL_I2C_EV_IRQHandler+0x22e>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	0a5b      	lsrs	r3, r3, #9
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 ff4e 	bl	8005248 <I2C_Slave_STOPF>
 80043ac:	e056      	b.n	800445c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043ae:	7bbb      	ldrb	r3, [r7, #14]
 80043b0:	2b21      	cmp	r3, #33	; 0x21
 80043b2:	d002      	beq.n	80043ba <HAL_I2C_EV_IRQHandler+0x23a>
 80043b4:	7bbb      	ldrb	r3, [r7, #14]
 80043b6:	2b29      	cmp	r3, #41	; 0x29
 80043b8:	d125      	bne.n	8004406 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	09db      	lsrs	r3, r3, #7
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00f      	beq.n	80043e6 <HAL_I2C_EV_IRQHandler+0x266>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	0a9b      	lsrs	r3, r3, #10
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_I2C_EV_IRQHandler+0x266>
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	089b      	lsrs	r3, r3, #2
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d103      	bne.n	80043e6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fe2c 	bl	800503c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043e4:	e039      	b.n	800445a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	089b      	lsrs	r3, r3, #2
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d033      	beq.n	800445a <HAL_I2C_EV_IRQHandler+0x2da>
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	0a5b      	lsrs	r3, r3, #9
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d02d      	beq.n	800445a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fe59 	bl	80050b6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004404:	e029      	b.n	800445a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	099b      	lsrs	r3, r3, #6
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00f      	beq.n	8004432 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	0a9b      	lsrs	r3, r3, #10
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_I2C_EV_IRQHandler+0x2b2>
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	089b      	lsrs	r3, r3, #2
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fe63 	bl	80050f6 <I2C_SlaveReceive_RXNE>
 8004430:	e014      	b.n	800445c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	089b      	lsrs	r3, r3, #2
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00e      	beq.n	800445c <HAL_I2C_EV_IRQHandler+0x2dc>
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	0a5b      	lsrs	r3, r3, #9
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fe91 	bl	8005172 <I2C_SlaveReceive_BTF>
 8004450:	e004      	b.n	800445c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004452:	bf00      	nop
 8004454:	e002      	b.n	800445c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004456:	bf00      	nop
 8004458:	e000      	b.n	800445c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800445a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	460b      	mov	r3, r1
 80044b4:	70fb      	strb	r3, [r7, #3]
 80044b6:	4613      	mov	r3, r2
 80044b8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr

080044c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr

080044d6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr

080044fa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004522:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452e:	2b00      	cmp	r3, #0
 8004530:	d150      	bne.n	80045d4 <I2C_MasterTransmit_TXE+0xc8>
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b21      	cmp	r3, #33	; 0x21
 8004536:	d14d      	bne.n	80045d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b08      	cmp	r3, #8
 800453c:	d01d      	beq.n	800457a <I2C_MasterTransmit_TXE+0x6e>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b20      	cmp	r3, #32
 8004542:	d01a      	beq.n	800457a <I2C_MasterTransmit_TXE+0x6e>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800454a:	d016      	beq.n	800457a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800455a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2211      	movs	r2, #17
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ff75 	bl	8004462 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004578:	e060      	b.n	800463c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004588:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004598:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d107      	bne.n	80045c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff8a 	bl	80044d6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045c2:	e03b      	b.n	800463c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff ff48 	bl	8004462 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045d2:	e033      	b.n	800463c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b21      	cmp	r3, #33	; 0x21
 80045d8:	d005      	beq.n	80045e6 <I2C_MasterTransmit_TXE+0xda>
 80045da:	7bbb      	ldrb	r3, [r7, #14]
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d12d      	bne.n	800463c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b22      	cmp	r3, #34	; 0x22
 80045e4:	d12a      	bne.n	800463c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d108      	bne.n	8004602 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004600:	e01c      	b.n	800463c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b40      	cmp	r3, #64	; 0x40
 800460c:	d103      	bne.n	8004616 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f88e 	bl	8004730 <I2C_MemoryTransmit_TXE_BTF>
}
 8004614:	e012      	b.n	800463c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800463a:	e7ff      	b.n	800463c <I2C_MasterTransmit_TXE+0x130>
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b21      	cmp	r3, #33	; 0x21
 800465c:	d164      	bne.n	8004728 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d012      	beq.n	800468e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800468c:	e04c      	b.n	8004728 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d01d      	beq.n	80046d0 <I2C_MasterTransmit_BTF+0x8c>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b20      	cmp	r3, #32
 8004698:	d01a      	beq.n	80046d0 <I2C_MasterTransmit_BTF+0x8c>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046a0:	d016      	beq.n	80046d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2211      	movs	r2, #17
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff feca 	bl	8004462 <HAL_I2C_MasterTxCpltCallback>
}
 80046ce:	e02b      	b.n	8004728 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d107      	bne.n	800471a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff fedf 	bl	80044d6 <HAL_I2C_MemTxCpltCallback>
}
 8004718:	e006      	b.n	8004728 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff fe9d 	bl	8004462 <HAL_I2C_MasterTxCpltCallback>
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004744:	2b00      	cmp	r3, #0
 8004746:	d11d      	bne.n	8004784 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d10b      	bne.n	8004768 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004754:	b2da      	uxtb	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	1c9a      	adds	r2, r3, #2
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004766:	e077      	b.n	8004858 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476c:	b29b      	uxth	r3, r3
 800476e:	121b      	asrs	r3, r3, #8
 8004770:	b2da      	uxtb	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004782:	e069      	b.n	8004858 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004788:	2b01      	cmp	r3, #1
 800478a:	d10b      	bne.n	80047a4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004790:	b2da      	uxtb	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047a2:	e059      	b.n	8004858 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d152      	bne.n	8004852 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b22      	cmp	r3, #34	; 0x22
 80047b0:	d10d      	bne.n	80047ce <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047cc:	e044      	b.n	8004858 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d015      	beq.n	8004804 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b21      	cmp	r3, #33	; 0x21
 80047dc:	d112      	bne.n	8004804 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004802:	e029      	b.n	8004858 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d124      	bne.n	8004858 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b21      	cmp	r3, #33	; 0x21
 8004812:	d121      	bne.n	8004858 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004822:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004832:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff fe43 	bl	80044d6 <HAL_I2C_MemTxCpltCallback>
}
 8004850:	e002      	b.n	8004858 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff f9ee 	bl	8003c34 <I2C_Flush_DR>
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b22      	cmp	r3, #34	; 0x22
 8004872:	f040 80ac 	bne.w	80049ce <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d921      	bls.n	80048c8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	f040 808c 	bne.w	80049ce <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80048c6:	e082      	b.n	80049ce <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d075      	beq.n	80049bc <I2C_MasterReceive_RXNE+0x15c>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d002      	beq.n	80048dc <I2C_MasterReceive_RXNE+0x7c>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d16f      	bne.n	80049bc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f001 f837 	bl	8005950 <I2C_WaitOnSTOPRequestThroughIT>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d142      	bne.n	800496e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004906:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d10a      	bne.n	8004958 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7fb fcb9 	bl	80002c8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004956:	e03a      	b.n	80049ce <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2212      	movs	r2, #18
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fd84 	bl	8004474 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800496c:	e02f      	b.n	80049ce <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800497c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff fd97 	bl	80044e8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80049ba:	e008      	b.n	80049ce <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ca:	605a      	str	r2, [r3, #4]
}
 80049cc:	e7ff      	b.n	80049ce <I2C_MasterReceive_RXNE+0x16e>
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d11b      	bne.n	8004a26 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004a24:	e0bd      	b.n	8004ba2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d129      	bne.n	8004a84 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d00a      	beq.n	8004a5c <I2C_MasterReceive_BTF+0x86>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d007      	beq.n	8004a5c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a82:	e08e      	b.n	8004ba2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d176      	bne.n	8004b7c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d002      	beq.n	8004a9a <I2C_MasterReceive_BTF+0xc4>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d108      	bne.n	8004aac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e019      	b.n	8004ae0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d002      	beq.n	8004ab8 <I2C_MasterReceive_BTF+0xe2>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d108      	bne.n	8004aca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e00a      	b.n	8004ae0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d007      	beq.n	8004ae0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ade:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b3a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d10a      	bne.n	8004b66 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fb fbb2 	bl	80002c8 <HAL_I2C_MemRxCpltCallback>
}
 8004b64:	e01d      	b.n	8004ba2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2212      	movs	r2, #18
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fc7d 	bl	8004474 <HAL_I2C_MasterRxCpltCallback>
}
 8004b7a:	e012      	b.n	8004ba2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ba2:	bf00      	nop
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	d117      	bne.n	8004bee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bd6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004bd8:	e067      	b.n	8004caa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	611a      	str	r2, [r3, #16]
}
 8004bec:	e05d      	b.n	8004caa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bf6:	d133      	bne.n	8004c60 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b21      	cmp	r3, #33	; 0x21
 8004c02:	d109      	bne.n	8004c18 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c14:	611a      	str	r2, [r3, #16]
 8004c16:	e008      	b.n	8004c2a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d004      	beq.n	8004c3c <I2C_Master_SB+0x92>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d108      	bne.n	8004c4e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d032      	beq.n	8004caa <I2C_Master_SB+0x100>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d02d      	beq.n	8004caa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c5c:	605a      	str	r2, [r3, #4]
}
 8004c5e:	e024      	b.n	8004caa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10e      	bne.n	8004c86 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	11db      	asrs	r3, r3, #7
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f003 0306 	and.w	r3, r3, #6
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f063 030f 	orn	r3, r3, #15
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	611a      	str	r2, [r3, #16]
}
 8004c84:	e011      	b.n	8004caa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d10d      	bne.n	8004caa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	11db      	asrs	r3, r3, #7
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f003 0306 	and.w	r3, r3, #6
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	f063 030e 	orn	r3, r3, #14
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	611a      	str	r2, [r3, #16]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <I2C_Master_ADD10+0x26>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d108      	bne.n	8004cec <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00c      	beq.n	8004cfc <I2C_Master_ADD10+0x48>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cfa:	605a      	str	r2, [r3, #4]
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr

08004d06 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b091      	sub	sp, #68	; 0x44
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b22      	cmp	r3, #34	; 0x22
 8004d2e:	f040 8174 	bne.w	800501a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10f      	bne.n	8004d5a <I2C_Master_ADDR+0x54>
 8004d3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d10b      	bne.n	8004d5a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d42:	2300      	movs	r3, #0
 8004d44:	633b      	str	r3, [r7, #48]	; 0x30
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	633b      	str	r3, [r7, #48]	; 0x30
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	e16b      	b.n	8005032 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d11d      	bne.n	8004d9e <I2C_Master_ADDR+0x98>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d6a:	d118      	bne.n	8004d9e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d90:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	651a      	str	r2, [r3, #80]	; 0x50
 8004d9c:	e149      	b.n	8005032 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d113      	bne.n	8004dd0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da8:	2300      	movs	r3, #0
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e120      	b.n	8005012 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	f040 808a 	bne.w	8004ef0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004de2:	d137      	bne.n	8004e54 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e02:	d113      	bne.n	8004e2c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e12:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e14:	2300      	movs	r3, #0
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	e0f2      	b.n	8005012 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	623b      	str	r3, [r7, #32]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e0de      	b.n	8005012 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d02e      	beq.n	8004eb8 <I2C_Master_ADDR+0x1b2>
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d02b      	beq.n	8004eb8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e62:	2b12      	cmp	r3, #18
 8004e64:	d102      	bne.n	8004e6c <I2C_Master_ADDR+0x166>
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d125      	bne.n	8004eb8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d00e      	beq.n	8004e90 <I2C_Master_ADDR+0x18a>
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d00b      	beq.n	8004e90 <I2C_Master_ADDR+0x18a>
 8004e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7a:	2b10      	cmp	r3, #16
 8004e7c:	d008      	beq.n	8004e90 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e007      	b.n	8004ea0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e9e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	61fb      	str	r3, [r7, #28]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	e0ac      	b.n	8005012 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e090      	b.n	8005012 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d158      	bne.n	8004fac <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d021      	beq.n	8004f44 <I2C_Master_ADDR+0x23e>
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d01e      	beq.n	8004f44 <I2C_Master_ADDR+0x23e>
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d01b      	beq.n	8004f44 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f1a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e012      	b.n	8004f6a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f52:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f78:	d14b      	bne.n	8005012 <I2C_Master_ADDR+0x30c>
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f80:	d00b      	beq.n	8004f9a <I2C_Master_ADDR+0x294>
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d008      	beq.n	8004f9a <I2C_Master_ADDR+0x294>
 8004f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d005      	beq.n	8004f9a <I2C_Master_ADDR+0x294>
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d002      	beq.n	8004f9a <I2C_Master_ADDR+0x294>
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d13b      	bne.n	8005012 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	e032      	b.n	8005012 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fba:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fca:	d117      	bne.n	8004ffc <I2C_Master_ADDR+0x2f6>
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fd2:	d00b      	beq.n	8004fec <I2C_Master_ADDR+0x2e6>
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d008      	beq.n	8004fec <I2C_Master_ADDR+0x2e6>
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d005      	beq.n	8004fec <I2C_Master_ADDR+0x2e6>
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d002      	beq.n	8004fec <I2C_Master_ADDR+0x2e6>
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	d107      	bne.n	8004ffc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ffa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005018:	e00b      	b.n	8005032 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]
}
 8005030:	e7ff      	b.n	8005032 <I2C_Master_ADDR+0x32c>
 8005032:	bf00      	nop
 8005034:	3744      	adds	r7, #68	; 0x44
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr

0800503c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d02b      	beq.n	80050ae <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	781a      	ldrb	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d114      	bne.n	80050ae <I2C_SlaveTransmit_TXE+0x72>
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	2b29      	cmp	r3, #41	; 0x29
 8005088:	d111      	bne.n	80050ae <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005098:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2221      	movs	r2, #33	; 0x21
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2228      	movs	r2, #40	; 0x28
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7ff f9ec 	bl	8004486 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d011      	beq.n	80050ec <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	781a      	ldrb	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr

080050f6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005104:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510a:	b29b      	uxth	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d02c      	beq.n	800516a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d114      	bne.n	800516a <I2C_SlaveReceive_RXNE+0x74>
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b2a      	cmp	r3, #42	; 0x2a
 8005144:	d111      	bne.n	800516a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005154:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2222      	movs	r2, #34	; 0x22
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2228      	movs	r2, #40	; 0x28
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff f997 	bl	8004498 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d012      	beq.n	80051aa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr

080051b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051ce:	2b28      	cmp	r3, #40	; 0x28
 80051d0:	d127      	bne.n	8005222 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	089b      	lsrs	r3, r3, #2
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80051ee:	2301      	movs	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	09db      	lsrs	r3, r3, #7
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	81bb      	strh	r3, [r7, #12]
 8005204:	e002      	b.n	800520c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005214:	89ba      	ldrh	r2, [r7, #12]
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff f945 	bl	80044aa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005220:	e00e      	b.n	8005240 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005256:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005266:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005268:	2300      	movs	r3, #0
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005294:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a4:	d172      	bne.n	800538c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b22      	cmp	r3, #34	; 0x22
 80052aa:	d002      	beq.n	80052b2 <I2C_Slave_STOPF+0x6a>
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b2a      	cmp	r3, #42	; 0x2a
 80052b0:	d135      	bne.n	800531e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f043 0204 	orr.w	r2, r3, #4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe f99c 	bl	8003628 <HAL_DMA_GetState>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d049      	beq.n	800538a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	4a69      	ldr	r2, [pc, #420]	; (80054a0 <I2C_Slave_STOPF+0x258>)
 80052fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe f918 	bl	8003538 <HAL_DMA_Abort_IT>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d03d      	beq.n	800538a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005318:	4610      	mov	r0, r2
 800531a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800531c:	e035      	b.n	800538a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	b29a      	uxth	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f043 0204 	orr.w	r2, r3, #4
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005350:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005356:	4618      	mov	r0, r3
 8005358:	f7fe f966 	bl	8003628 <HAL_DMA_GetState>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d014      	beq.n	800538c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005366:	4a4e      	ldr	r2, [pc, #312]	; (80054a0 <I2C_Slave_STOPF+0x258>)
 8005368:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe f8e2 	bl	8003538 <HAL_DMA_Abort_IT>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005384:	4610      	mov	r0, r2
 8005386:	4798      	blx	r3
 8005388:	e000      	b.n	800538c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800538a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d03e      	beq.n	8005414 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d112      	bne.n	80053ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d112      	bne.n	80053fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	f043 0204 	orr.w	r2, r3, #4
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f843 	bl	80054a8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005422:	e039      	b.n	8005498 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b2a      	cmp	r3, #42	; 0x2a
 8005428:	d109      	bne.n	800543e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2228      	movs	r2, #40	; 0x28
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff f82d 	bl	8004498 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b28      	cmp	r3, #40	; 0x28
 8005448:	d111      	bne.n	800546e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a15      	ldr	r2, [pc, #84]	; (80054a4 <I2C_Slave_STOPF+0x25c>)
 800544e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff f82c 	bl	80044c4 <HAL_I2C_ListenCpltCallback>
}
 800546c:	e014      	b.n	8005498 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	2b22      	cmp	r3, #34	; 0x22
 8005474:	d002      	beq.n	800547c <I2C_Slave_STOPF+0x234>
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b22      	cmp	r3, #34	; 0x22
 800547a:	d10d      	bne.n	8005498 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff f800 	bl	8004498 <HAL_I2C_SlaveRxCpltCallback>
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	0800570d 	.word	0x0800570d
 80054a4:	ffff0000 	.word	0xffff0000

080054a8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80054c0:	7bbb      	ldrb	r3, [r7, #14]
 80054c2:	2b10      	cmp	r3, #16
 80054c4:	d002      	beq.n	80054cc <I2C_ITError+0x24>
 80054c6:	7bbb      	ldrb	r3, [r7, #14]
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d10a      	bne.n	80054e2 <I2C_ITError+0x3a>
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b22      	cmp	r3, #34	; 0x22
 80054d0:	d107      	bne.n	80054e2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054e0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054e8:	2b28      	cmp	r3, #40	; 0x28
 80054ea:	d107      	bne.n	80054fc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2228      	movs	r2, #40	; 0x28
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054fa:	e015      	b.n	8005528 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800550a:	d00a      	beq.n	8005522 <I2C_ITError+0x7a>
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b60      	cmp	r3, #96	; 0x60
 8005510:	d007      	beq.n	8005522 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005536:	d162      	bne.n	80055fe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005546:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b01      	cmp	r3, #1
 8005554:	d020      	beq.n	8005598 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555a:	4a6a      	ldr	r2, [pc, #424]	; (8005704 <I2C_ITError+0x25c>)
 800555c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005562:	4618      	mov	r0, r3
 8005564:	f7fd ffe8 	bl	8003538 <HAL_DMA_Abort_IT>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8089 	beq.w	8005682 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0201 	bic.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005592:	4610      	mov	r0, r2
 8005594:	4798      	blx	r3
 8005596:	e074      	b.n	8005682 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	4a59      	ldr	r2, [pc, #356]	; (8005704 <I2C_ITError+0x25c>)
 800559e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fd ffc7 	bl	8003538 <HAL_DMA_Abort_IT>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d068      	beq.n	8005682 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ba:	2b40      	cmp	r3, #64	; 0x40
 80055bc:	d10b      	bne.n	80055d6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0201 	bic.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055f8:	4610      	mov	r0, r2
 80055fa:	4798      	blx	r3
 80055fc:	e041      	b.n	8005682 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b60      	cmp	r3, #96	; 0x60
 8005608:	d125      	bne.n	8005656 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d10b      	bne.n	800563e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0201 	bic.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fe ff53 	bl	80044fa <HAL_I2C_AbortCpltCallback>
 8005654:	e015      	b.n	8005682 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b40      	cmp	r3, #64	; 0x40
 8005662:	d10b      	bne.n	800567c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fe ff33 	bl	80044e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10e      	bne.n	80056b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005698:	2b00      	cmp	r3, #0
 800569a:	d109      	bne.n	80056b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d104      	bne.n	80056b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d007      	beq.n	80056c0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d113      	bne.n	80056fc <I2C_ITError+0x254>
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b28      	cmp	r3, #40	; 0x28
 80056d8:	d110      	bne.n	80056fc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a0a      	ldr	r2, [pc, #40]	; (8005708 <I2C_ITError+0x260>)
 80056de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fe fee4 	bl	80044c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056fc:	bf00      	nop
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	0800570d 	.word	0x0800570d
 8005708:	ffff0000 	.word	0xffff0000

0800570c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005724:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005726:	4b4b      	ldr	r3, [pc, #300]	; (8005854 <I2C_DMAAbort+0x148>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	08db      	lsrs	r3, r3, #3
 800572c:	4a4a      	ldr	r2, [pc, #296]	; (8005858 <I2C_DMAAbort+0x14c>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	0a1a      	lsrs	r2, r3, #8
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	00da      	lsls	r2, r3, #3
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f043 0220 	orr.w	r2, r3, #32
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005752:	e00a      	b.n	800576a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3b01      	subs	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005768:	d0ea      	beq.n	8005740 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005776:	2200      	movs	r2, #0
 8005778:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	2200      	movs	r2, #0
 8005788:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005798:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2200      	movs	r2, #0
 800579e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ac:	2200      	movs	r2, #0
 80057ae:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	2200      	movs	r2, #0
 80057be:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b60      	cmp	r3, #96	; 0x60
 80057da:	d10e      	bne.n	80057fa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2200      	movs	r2, #0
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80057f2:	6978      	ldr	r0, [r7, #20]
 80057f4:	f7fe fe81 	bl	80044fa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057f8:	e027      	b.n	800584a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057fa:	7cfb      	ldrb	r3, [r7, #19]
 80057fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005800:	2b28      	cmp	r3, #40	; 0x28
 8005802:	d117      	bne.n	8005834 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005822:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2228      	movs	r2, #40	; 0x28
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005832:	e007      	b.n	8005844 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005844:	6978      	ldr	r0, [r7, #20]
 8005846:	f7fe fe4f 	bl	80044e8 <HAL_I2C_ErrorCallback>
}
 800584a:	bf00      	nop
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000078 	.word	0x20000078
 8005858:	14f8b589 	.word	0x14f8b589

0800585c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	4613      	mov	r3, r2
 800586a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800586c:	e048      	b.n	8005900 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d044      	beq.n	8005900 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005876:	f7fd fd23 	bl	80032c0 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d302      	bcc.n	800588c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d139      	bne.n	8005900 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	0c1b      	lsrs	r3, r3, #16
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b01      	cmp	r3, #1
 8005894:	d10d      	bne.n	80058b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	43da      	mvns	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4013      	ands	r3, r2
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf0c      	ite	eq
 80058a8:	2301      	moveq	r3, #1
 80058aa:	2300      	movne	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	e00c      	b.n	80058cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	43da      	mvns	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4013      	ands	r3, r2
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d116      	bne.n	8005900 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	f043 0220 	orr.w	r2, r3, #32
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e023      	b.n	8005948 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b01      	cmp	r3, #1
 8005908:	d10d      	bne.n	8005926 <I2C_WaitOnFlagUntilTimeout+0xca>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	43da      	mvns	r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	4013      	ands	r3, r2
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	bf0c      	ite	eq
 800591c:	2301      	moveq	r3, #1
 800591e:	2300      	movne	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	461a      	mov	r2, r3
 8005924:	e00c      	b.n	8005940 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	43da      	mvns	r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4013      	ands	r3, r2
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	bf0c      	ite	eq
 8005938:	2301      	moveq	r3, #1
 800593a:	2300      	movne	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	429a      	cmp	r2, r3
 8005944:	d093      	beq.n	800586e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800595c:	4b13      	ldr	r3, [pc, #76]	; (80059ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	08db      	lsrs	r3, r3, #3
 8005962:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005964:	fba2 2303 	umull	r2, r3, r2, r3
 8005968:	0a1a      	lsrs	r2, r3, #8
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3b01      	subs	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d107      	bne.n	800598e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f043 0220 	orr.w	r2, r3, #32
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e008      	b.n	80059a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800599c:	d0e9      	beq.n	8005972 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000078 	.word	0x20000078
 80059b0:	14f8b589 	.word	0x14f8b589

080059b4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80059c4:	d103      	bne.n	80059ce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80059cc:	e007      	b.n	80059de <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80059d6:	d102      	bne.n	80059de <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2208      	movs	r2, #8
 80059dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e272      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 8087 	beq.w	8005b16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a08:	4b92      	ldr	r3, [pc, #584]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f003 030c 	and.w	r3, r3, #12
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d00c      	beq.n	8005a2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a14:	4b8f      	ldr	r3, [pc, #572]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f003 030c 	and.w	r3, r3, #12
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d112      	bne.n	8005a46 <HAL_RCC_OscConfig+0x5e>
 8005a20:	4b8c      	ldr	r3, [pc, #560]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2c:	d10b      	bne.n	8005a46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a2e:	4b89      	ldr	r3, [pc, #548]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d06c      	beq.n	8005b14 <HAL_RCC_OscConfig+0x12c>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d168      	bne.n	8005b14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e24c      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4e:	d106      	bne.n	8005a5e <HAL_RCC_OscConfig+0x76>
 8005a50:	4b80      	ldr	r3, [pc, #512]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a7f      	ldr	r2, [pc, #508]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	e02e      	b.n	8005abc <HAL_RCC_OscConfig+0xd4>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10c      	bne.n	8005a80 <HAL_RCC_OscConfig+0x98>
 8005a66:	4b7b      	ldr	r3, [pc, #492]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a7a      	ldr	r2, [pc, #488]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	4b78      	ldr	r3, [pc, #480]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a77      	ldr	r2, [pc, #476]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	e01d      	b.n	8005abc <HAL_RCC_OscConfig+0xd4>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a88:	d10c      	bne.n	8005aa4 <HAL_RCC_OscConfig+0xbc>
 8005a8a:	4b72      	ldr	r3, [pc, #456]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a71      	ldr	r2, [pc, #452]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	4b6f      	ldr	r3, [pc, #444]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a6e      	ldr	r2, [pc, #440]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	e00b      	b.n	8005abc <HAL_RCC_OscConfig+0xd4>
 8005aa4:	4b6b      	ldr	r3, [pc, #428]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a6a      	ldr	r2, [pc, #424]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	4b68      	ldr	r3, [pc, #416]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a67      	ldr	r2, [pc, #412]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d013      	beq.n	8005aec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac4:	f7fd fbfc 	bl	80032c0 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005acc:	f7fd fbf8 	bl	80032c0 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b64      	cmp	r3, #100	; 0x64
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e200      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ade:	4b5d      	ldr	r3, [pc, #372]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0f0      	beq.n	8005acc <HAL_RCC_OscConfig+0xe4>
 8005aea:	e014      	b.n	8005b16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aec:	f7fd fbe8 	bl	80032c0 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005af4:	f7fd fbe4 	bl	80032c0 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b64      	cmp	r3, #100	; 0x64
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e1ec      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b06:	4b53      	ldr	r3, [pc, #332]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f0      	bne.n	8005af4 <HAL_RCC_OscConfig+0x10c>
 8005b12:	e000      	b.n	8005b16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d063      	beq.n	8005bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b22:	4b4c      	ldr	r3, [pc, #304]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f003 030c 	and.w	r3, r3, #12
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00b      	beq.n	8005b46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b2e:	4b49      	ldr	r3, [pc, #292]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f003 030c 	and.w	r3, r3, #12
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d11c      	bne.n	8005b74 <HAL_RCC_OscConfig+0x18c>
 8005b3a:	4b46      	ldr	r3, [pc, #280]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d116      	bne.n	8005b74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b46:	4b43      	ldr	r3, [pc, #268]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d005      	beq.n	8005b5e <HAL_RCC_OscConfig+0x176>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d001      	beq.n	8005b5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e1c0      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b5e:	4b3d      	ldr	r3, [pc, #244]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	4939      	ldr	r1, [pc, #228]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b72:	e03a      	b.n	8005bea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d020      	beq.n	8005bbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b7c:	4b36      	ldr	r3, [pc, #216]	; (8005c58 <HAL_RCC_OscConfig+0x270>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b82:	f7fd fb9d 	bl	80032c0 <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b8a:	f7fd fb99 	bl	80032c0 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e1a1      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9c:	4b2d      	ldr	r3, [pc, #180]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f0      	beq.n	8005b8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba8:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	4927      	ldr	r1, [pc, #156]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	600b      	str	r3, [r1, #0]
 8005bbc:	e015      	b.n	8005bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bbe:	4b26      	ldr	r3, [pc, #152]	; (8005c58 <HAL_RCC_OscConfig+0x270>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc4:	f7fd fb7c 	bl	80032c0 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bcc:	f7fd fb78 	bl	80032c0 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e180      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bde:	4b1d      	ldr	r3, [pc, #116]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f0      	bne.n	8005bcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d03a      	beq.n	8005c6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d019      	beq.n	8005c32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bfe:	4b17      	ldr	r3, [pc, #92]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005c00:	2201      	movs	r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c04:	f7fd fb5c 	bl	80032c0 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c0c:	f7fd fb58 	bl	80032c0 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e160      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <HAL_RCC_OscConfig+0x26c>)
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f0      	beq.n	8005c0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	f000 faba 	bl	80061a4 <RCC_Delay>
 8005c30:	e01c      	b.n	8005c6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c32:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c38:	f7fd fb42 	bl	80032c0 <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c3e:	e00f      	b.n	8005c60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c40:	f7fd fb3e 	bl	80032c0 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d908      	bls.n	8005c60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e146      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
 8005c52:	bf00      	nop
 8005c54:	40021000 	.word	0x40021000
 8005c58:	42420000 	.word	0x42420000
 8005c5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c60:	4b92      	ldr	r3, [pc, #584]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e9      	bne.n	8005c40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80a6 	beq.w	8005dc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c7e:	4b8b      	ldr	r3, [pc, #556]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10d      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c8a:	4b88      	ldr	r3, [pc, #544]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	4a87      	ldr	r2, [pc, #540]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c94:	61d3      	str	r3, [r2, #28]
 8005c96:	4b85      	ldr	r3, [pc, #532]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	60bb      	str	r3, [r7, #8]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca6:	4b82      	ldr	r3, [pc, #520]	; (8005eb0 <HAL_RCC_OscConfig+0x4c8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d118      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cb2:	4b7f      	ldr	r3, [pc, #508]	; (8005eb0 <HAL_RCC_OscConfig+0x4c8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a7e      	ldr	r2, [pc, #504]	; (8005eb0 <HAL_RCC_OscConfig+0x4c8>)
 8005cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cbe:	f7fd faff 	bl	80032c0 <HAL_GetTick>
 8005cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc6:	f7fd fafb 	bl	80032c0 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b64      	cmp	r3, #100	; 0x64
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e103      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd8:	4b75      	ldr	r3, [pc, #468]	; (8005eb0 <HAL_RCC_OscConfig+0x4c8>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0f0      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d106      	bne.n	8005cfa <HAL_RCC_OscConfig+0x312>
 8005cec:	4b6f      	ldr	r3, [pc, #444]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	4a6e      	ldr	r2, [pc, #440]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005cf2:	f043 0301 	orr.w	r3, r3, #1
 8005cf6:	6213      	str	r3, [r2, #32]
 8005cf8:	e02d      	b.n	8005d56 <HAL_RCC_OscConfig+0x36e>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10c      	bne.n	8005d1c <HAL_RCC_OscConfig+0x334>
 8005d02:	4b6a      	ldr	r3, [pc, #424]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	4a69      	ldr	r2, [pc, #420]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	6213      	str	r3, [r2, #32]
 8005d0e:	4b67      	ldr	r3, [pc, #412]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	4a66      	ldr	r2, [pc, #408]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d14:	f023 0304 	bic.w	r3, r3, #4
 8005d18:	6213      	str	r3, [r2, #32]
 8005d1a:	e01c      	b.n	8005d56 <HAL_RCC_OscConfig+0x36e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	2b05      	cmp	r3, #5
 8005d22:	d10c      	bne.n	8005d3e <HAL_RCC_OscConfig+0x356>
 8005d24:	4b61      	ldr	r3, [pc, #388]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	4a60      	ldr	r2, [pc, #384]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d2a:	f043 0304 	orr.w	r3, r3, #4
 8005d2e:	6213      	str	r3, [r2, #32]
 8005d30:	4b5e      	ldr	r3, [pc, #376]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	4a5d      	ldr	r2, [pc, #372]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	6213      	str	r3, [r2, #32]
 8005d3c:	e00b      	b.n	8005d56 <HAL_RCC_OscConfig+0x36e>
 8005d3e:	4b5b      	ldr	r3, [pc, #364]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	4a5a      	ldr	r2, [pc, #360]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	6213      	str	r3, [r2, #32]
 8005d4a:	4b58      	ldr	r3, [pc, #352]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	4a57      	ldr	r2, [pc, #348]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d50:	f023 0304 	bic.w	r3, r3, #4
 8005d54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d015      	beq.n	8005d8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d5e:	f7fd faaf 	bl	80032c0 <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d64:	e00a      	b.n	8005d7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d66:	f7fd faab 	bl	80032c0 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e0b1      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7c:	4b4b      	ldr	r3, [pc, #300]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0ee      	beq.n	8005d66 <HAL_RCC_OscConfig+0x37e>
 8005d88:	e014      	b.n	8005db4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d8a:	f7fd fa99 	bl	80032c0 <HAL_GetTick>
 8005d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d90:	e00a      	b.n	8005da8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fd fa95 	bl	80032c0 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e09b      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da8:	4b40      	ldr	r3, [pc, #256]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ee      	bne.n	8005d92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d105      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dba:	4b3c      	ldr	r3, [pc, #240]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	4a3b      	ldr	r2, [pc, #236]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8087 	beq.w	8005ede <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dd0:	4b36      	ldr	r3, [pc, #216]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f003 030c 	and.w	r3, r3, #12
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d061      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d146      	bne.n	8005e72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de4:	4b33      	ldr	r3, [pc, #204]	; (8005eb4 <HAL_RCC_OscConfig+0x4cc>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dea:	f7fd fa69 	bl	80032c0 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df2:	f7fd fa65 	bl	80032c0 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e06d      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e04:	4b29      	ldr	r3, [pc, #164]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f0      	bne.n	8005df2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e18:	d108      	bne.n	8005e2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e1a:	4b24      	ldr	r3, [pc, #144]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	4921      	ldr	r1, [pc, #132]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e2c:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a19      	ldr	r1, [r3, #32]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	491b      	ldr	r1, [pc, #108]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e44:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <HAL_RCC_OscConfig+0x4cc>)
 8005e46:	2201      	movs	r2, #1
 8005e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e4a:	f7fd fa39 	bl	80032c0 <HAL_GetTick>
 8005e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e52:	f7fd fa35 	bl	80032c0 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e03d      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e64:	4b11      	ldr	r3, [pc, #68]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f0      	beq.n	8005e52 <HAL_RCC_OscConfig+0x46a>
 8005e70:	e035      	b.n	8005ede <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <HAL_RCC_OscConfig+0x4cc>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e78:	f7fd fa22 	bl	80032c0 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e80:	f7fd fa1e 	bl	80032c0 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e026      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e92:	4b06      	ldr	r3, [pc, #24]	; (8005eac <HAL_RCC_OscConfig+0x4c4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x498>
 8005e9e:	e01e      	b.n	8005ede <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d107      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e019      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	40007000 	.word	0x40007000
 8005eb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <HAL_RCC_OscConfig+0x500>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d106      	bne.n	8005eda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d001      	beq.n	8005ede <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40021000 	.word	0x40021000

08005eec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e0d0      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f00:	4b6a      	ldr	r3, [pc, #424]	; (80060ac <HAL_RCC_ClockConfig+0x1c0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d910      	bls.n	8005f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0e:	4b67      	ldr	r3, [pc, #412]	; (80060ac <HAL_RCC_ClockConfig+0x1c0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f023 0207 	bic.w	r2, r3, #7
 8005f16:	4965      	ldr	r1, [pc, #404]	; (80060ac <HAL_RCC_ClockConfig+0x1c0>)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1e:	4b63      	ldr	r3, [pc, #396]	; (80060ac <HAL_RCC_ClockConfig+0x1c0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e0b8      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d020      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f48:	4b59      	ldr	r3, [pc, #356]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	4a58      	ldr	r2, [pc, #352]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f60:	4b53      	ldr	r3, [pc, #332]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4a52      	ldr	r2, [pc, #328]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f6c:	4b50      	ldr	r3, [pc, #320]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	494d      	ldr	r1, [pc, #308]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d040      	beq.n	800600c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d107      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f92:	4b47      	ldr	r3, [pc, #284]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d115      	bne.n	8005fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e07f      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d107      	bne.n	8005fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005faa:	4b41      	ldr	r3, [pc, #260]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d109      	bne.n	8005fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e073      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fba:	4b3d      	ldr	r3, [pc, #244]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e06b      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fca:	4b39      	ldr	r3, [pc, #228]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f023 0203 	bic.w	r2, r3, #3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	4936      	ldr	r1, [pc, #216]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fdc:	f7fd f970 	bl	80032c0 <HAL_GetTick>
 8005fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe2:	e00a      	b.n	8005ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe4:	f7fd f96c 	bl	80032c0 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e053      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffa:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f003 020c 	and.w	r2, r3, #12
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	429a      	cmp	r2, r3
 800600a:	d1eb      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800600c:	4b27      	ldr	r3, [pc, #156]	; (80060ac <HAL_RCC_ClockConfig+0x1c0>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d210      	bcs.n	800603c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601a:	4b24      	ldr	r3, [pc, #144]	; (80060ac <HAL_RCC_ClockConfig+0x1c0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f023 0207 	bic.w	r2, r3, #7
 8006022:	4922      	ldr	r1, [pc, #136]	; (80060ac <HAL_RCC_ClockConfig+0x1c0>)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	4313      	orrs	r3, r2
 8006028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800602a:	4b20      	ldr	r3, [pc, #128]	; (80060ac <HAL_RCC_ClockConfig+0x1c0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d001      	beq.n	800603c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e032      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006048:	4b19      	ldr	r3, [pc, #100]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	4916      	ldr	r1, [pc, #88]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006056:	4313      	orrs	r3, r2
 8006058:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006066:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	490e      	ldr	r1, [pc, #56]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006076:	4313      	orrs	r3, r2
 8006078:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800607a:	f000 f821 	bl	80060c0 <HAL_RCC_GetSysClockFreq>
 800607e:	4602      	mov	r2, r0
 8006080:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	091b      	lsrs	r3, r3, #4
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	490a      	ldr	r1, [pc, #40]	; (80060b4 <HAL_RCC_ClockConfig+0x1c8>)
 800608c:	5ccb      	ldrb	r3, [r1, r3]
 800608e:	fa22 f303 	lsr.w	r3, r2, r3
 8006092:	4a09      	ldr	r2, [pc, #36]	; (80060b8 <HAL_RCC_ClockConfig+0x1cc>)
 8006094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006096:	4b09      	ldr	r3, [pc, #36]	; (80060bc <HAL_RCC_ClockConfig+0x1d0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f7fd f8ce 	bl	800323c <HAL_InitTick>

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40022000 	.word	0x40022000
 80060b0:	40021000 	.word	0x40021000
 80060b4:	0800aab8 	.word	0x0800aab8
 80060b8:	20000078 	.word	0x20000078
 80060bc:	20000090 	.word	0x20000090

080060c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	2300      	movs	r3, #0
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	2300      	movs	r3, #0
 80060d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80060da:	4b1e      	ldr	r3, [pc, #120]	; (8006154 <HAL_RCC_GetSysClockFreq+0x94>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 030c 	and.w	r3, r3, #12
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d002      	beq.n	80060f0 <HAL_RCC_GetSysClockFreq+0x30>
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d003      	beq.n	80060f6 <HAL_RCC_GetSysClockFreq+0x36>
 80060ee:	e027      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060f0:	4b19      	ldr	r3, [pc, #100]	; (8006158 <HAL_RCC_GetSysClockFreq+0x98>)
 80060f2:	613b      	str	r3, [r7, #16]
      break;
 80060f4:	e027      	b.n	8006146 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	0c9b      	lsrs	r3, r3, #18
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	4a17      	ldr	r2, [pc, #92]	; (800615c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006100:	5cd3      	ldrb	r3, [r2, r3]
 8006102:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d010      	beq.n	8006130 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800610e:	4b11      	ldr	r3, [pc, #68]	; (8006154 <HAL_RCC_GetSysClockFreq+0x94>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	0c5b      	lsrs	r3, r3, #17
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	4a11      	ldr	r2, [pc, #68]	; (8006160 <HAL_RCC_GetSysClockFreq+0xa0>)
 800611a:	5cd3      	ldrb	r3, [r2, r3]
 800611c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a0d      	ldr	r2, [pc, #52]	; (8006158 <HAL_RCC_GetSysClockFreq+0x98>)
 8006122:	fb03 f202 	mul.w	r2, r3, r2
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	fbb2 f3f3 	udiv	r3, r2, r3
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e004      	b.n	800613a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006134:	fb02 f303 	mul.w	r3, r2, r3
 8006138:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	613b      	str	r3, [r7, #16]
      break;
 800613e:	e002      	b.n	8006146 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006140:	4b05      	ldr	r3, [pc, #20]	; (8006158 <HAL_RCC_GetSysClockFreq+0x98>)
 8006142:	613b      	str	r3, [r7, #16]
      break;
 8006144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006146:	693b      	ldr	r3, [r7, #16]
}
 8006148:	4618      	mov	r0, r3
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	bc80      	pop	{r7}
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40021000 	.word	0x40021000
 8006158:	007a1200 	.word	0x007a1200
 800615c:	0800bf98 	.word	0x0800bf98
 8006160:	0800bfa8 	.word	0x0800bfa8
 8006164:	003d0900 	.word	0x003d0900

08006168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800616c:	4b02      	ldr	r3, [pc, #8]	; (8006178 <HAL_RCC_GetHCLKFreq+0x10>)
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr
 8006178:	20000078 	.word	0x20000078

0800617c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006180:	f7ff fff2 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 8006184:	4602      	mov	r2, r0
 8006186:	4b05      	ldr	r3, [pc, #20]	; (800619c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	0a1b      	lsrs	r3, r3, #8
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	4903      	ldr	r1, [pc, #12]	; (80061a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006192:	5ccb      	ldrb	r3, [r1, r3]
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006198:	4618      	mov	r0, r3
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40021000 	.word	0x40021000
 80061a0:	0800aac8 	.word	0x0800aac8

080061a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <RCC_Delay+0x34>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <RCC_Delay+0x38>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	0a5b      	lsrs	r3, r3, #9
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	fb02 f303 	mul.w	r3, r2, r3
 80061be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80061c0:	bf00      	nop
  }
  while (Delay --);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1e5a      	subs	r2, r3, #1
 80061c6:	60fa      	str	r2, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1f9      	bne.n	80061c0 <RCC_Delay+0x1c>
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr
 80061d8:	20000078 	.word	0x20000078
 80061dc:	10624dd3 	.word	0x10624dd3

080061e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e076      	b.n	80062e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d108      	bne.n	800620c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006202:	d009      	beq.n	8006218 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	61da      	str	r2, [r3, #28]
 800620a:	e005      	b.n	8006218 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fb fbd0 	bl	80019d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	431a      	orrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	431a      	orrs	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629c:	ea42 0103 	orr.w	r1, r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	0c1a      	lsrs	r2, r3, #16
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f002 0204 	and.w	r2, r2, #4
 80062be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	69da      	ldr	r2, [r3, #28]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	4613      	mov	r3, r2
 80062f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_SPI_Transmit+0x22>
 8006306:	2302      	movs	r3, #2
 8006308:	e12d      	b.n	8006566 <HAL_SPI_Transmit+0x27e>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006312:	f7fc ffd5 	bl	80032c0 <HAL_GetTick>
 8006316:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	d002      	beq.n	800632e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006328:	2302      	movs	r3, #2
 800632a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800632c:	e116      	b.n	800655c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <HAL_SPI_Transmit+0x52>
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d102      	bne.n	8006340 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800633e:	e10d      	b.n	800655c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2203      	movs	r2, #3
 8006344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	88fa      	ldrh	r2, [r7, #6]
 8006358:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006386:	d10f      	bne.n	80063a8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006396:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	2b40      	cmp	r3, #64	; 0x40
 80063b4:	d007      	beq.n	80063c6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ce:	d14f      	bne.n	8006470 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_SPI_Transmit+0xf6>
 80063d8:	8afb      	ldrh	r3, [r7, #22]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d142      	bne.n	8006464 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	881a      	ldrh	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	1c9a      	adds	r2, r3, #2
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006402:	e02f      	b.n	8006464 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b02      	cmp	r3, #2
 8006410:	d112      	bne.n	8006438 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	881a      	ldrh	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	1c9a      	adds	r2, r3, #2
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	86da      	strh	r2, [r3, #54]	; 0x36
 8006436:	e015      	b.n	8006464 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006438:	f7fc ff42 	bl	80032c0 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	d803      	bhi.n	8006450 <HAL_SPI_Transmit+0x168>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644e:	d102      	bne.n	8006456 <HAL_SPI_Transmit+0x16e>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006462:	e07b      	b.n	800655c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1ca      	bne.n	8006404 <HAL_SPI_Transmit+0x11c>
 800646e:	e050      	b.n	8006512 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <HAL_SPI_Transmit+0x196>
 8006478:	8afb      	ldrh	r3, [r7, #22]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d144      	bne.n	8006508 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	330c      	adds	r3, #12
 8006488:	7812      	ldrb	r2, [r2, #0]
 800648a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800649a:	b29b      	uxth	r3, r3
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064a4:	e030      	b.n	8006508 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d113      	bne.n	80064dc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	7812      	ldrb	r2, [r2, #0]
 80064c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80064da:	e015      	b.n	8006508 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064dc:	f7fc fef0 	bl	80032c0 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d803      	bhi.n	80064f4 <HAL_SPI_Transmit+0x20c>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f2:	d102      	bne.n	80064fa <HAL_SPI_Transmit+0x212>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006506:	e029      	b.n	800655c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1c9      	bne.n	80064a6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 fb72 	bl	8006c00 <SPI_EndRxTxTransaction>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006530:	2300      	movs	r3, #0
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	77fb      	strb	r3, [r7, #31]
 8006552:	e003      	b.n	800655c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006564:	7ffb      	ldrb	r3, [r7, #31]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3720      	adds	r7, #32
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b08c      	sub	sp, #48	; 0x30
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
 800657a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800657c:	2301      	movs	r3, #1
 800657e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_SPI_TransmitReceive+0x26>
 8006590:	2302      	movs	r3, #2
 8006592:	e198      	b.n	80068c6 <HAL_SPI_TransmitReceive+0x358>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800659c:	f7fc fe90 	bl	80032c0 <HAL_GetTick>
 80065a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065b2:	887b      	ldrh	r3, [r7, #2]
 80065b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d00f      	beq.n	80065de <HAL_SPI_TransmitReceive+0x70>
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065c4:	d107      	bne.n	80065d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <HAL_SPI_TransmitReceive+0x68>
 80065ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d003      	beq.n	80065de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065d6:	2302      	movs	r3, #2
 80065d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065dc:	e16d      	b.n	80068ba <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <HAL_SPI_TransmitReceive+0x82>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <HAL_SPI_TransmitReceive+0x82>
 80065ea:	887b      	ldrh	r3, [r7, #2]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d103      	bne.n	80065f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065f6:	e160      	b.n	80068ba <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b04      	cmp	r3, #4
 8006602:	d003      	beq.n	800660c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2205      	movs	r2, #5
 8006608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	887a      	ldrh	r2, [r7, #2]
 800661c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	887a      	ldrh	r2, [r7, #2]
 8006622:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	887a      	ldrh	r2, [r7, #2]
 800662e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	887a      	ldrh	r2, [r7, #2]
 8006634:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	d007      	beq.n	8006660 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800665e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006668:	d17c      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <HAL_SPI_TransmitReceive+0x10a>
 8006672:	8b7b      	ldrh	r3, [r7, #26]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d16a      	bne.n	800674e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	881a      	ldrh	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	1c9a      	adds	r2, r3, #2
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800669c:	e057      	b.n	800674e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d11b      	bne.n	80066e4 <HAL_SPI_TransmitReceive+0x176>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d016      	beq.n	80066e4 <HAL_SPI_TransmitReceive+0x176>
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d113      	bne.n	80066e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	881a      	ldrh	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	1c9a      	adds	r2, r3, #2
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d119      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x1b8>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d014      	beq.n	8006726 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	b292      	uxth	r2, r2
 8006708:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	1c9a      	adds	r2, r3, #2
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006722:	2301      	movs	r3, #1
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006726:	f7fc fdcb 	bl	80032c0 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006732:	429a      	cmp	r2, r3
 8006734:	d80b      	bhi.n	800674e <HAL_SPI_TransmitReceive+0x1e0>
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673c:	d007      	beq.n	800674e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800674c:	e0b5      	b.n	80068ba <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1a2      	bne.n	800669e <HAL_SPI_TransmitReceive+0x130>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d19d      	bne.n	800669e <HAL_SPI_TransmitReceive+0x130>
 8006762:	e080      	b.n	8006866 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_SPI_TransmitReceive+0x204>
 800676c:	8b7b      	ldrh	r3, [r7, #26]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d16f      	bne.n	8006852 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	330c      	adds	r3, #12
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006798:	e05b      	b.n	8006852 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d11c      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x274>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d017      	beq.n	80067e2 <HAL_SPI_TransmitReceive+0x274>
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d114      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	330c      	adds	r3, #12
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d119      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x2b6>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d014      	beq.n	8006824 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006816:	b29b      	uxth	r3, r3
 8006818:	3b01      	subs	r3, #1
 800681a:	b29a      	uxth	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006820:	2301      	movs	r3, #1
 8006822:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006824:	f7fc fd4c 	bl	80032c0 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006830:	429a      	cmp	r2, r3
 8006832:	d803      	bhi.n	800683c <HAL_SPI_TransmitReceive+0x2ce>
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683a:	d102      	bne.n	8006842 <HAL_SPI_TransmitReceive+0x2d4>
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	2b00      	cmp	r3, #0
 8006840:	d107      	bne.n	8006852 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006850:	e033      	b.n	80068ba <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006856:	b29b      	uxth	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d19e      	bne.n	800679a <HAL_SPI_TransmitReceive+0x22c>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d199      	bne.n	800679a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006868:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 f9c8 	bl	8006c00 <SPI_EndRxTxTransaction>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d006      	beq.n	8006884 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006882:	e01a      	b.n	80068ba <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b0:	e003      	b.n	80068ba <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3730      	adds	r7, #48	; 0x30
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	099b      	lsrs	r3, r3, #6
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10f      	bne.n	8006914 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	099b      	lsrs	r3, r3, #6
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3
    return;
 8006912:	e0be      	b.n	8006a92 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <HAL_SPI_IRQHandler+0x66>
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	09db      	lsrs	r3, r3, #7
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
    return;
 8006934:	e0ad      	b.n	8006a92 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_SPI_IRQHandler+0x80>
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	099b      	lsrs	r3, r3, #6
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80a1 	beq.w	8006a92 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 809a 	beq.w	8006a92 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	099b      	lsrs	r3, r3, #6
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d023      	beq.n	80069b2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b03      	cmp	r3, #3
 8006974:	d011      	beq.n	800699a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697a:	f043 0204 	orr.w	r2, r3, #4
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	e00b      	b.n	80069b2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800699a:	2300      	movs	r3, #0
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	693b      	ldr	r3, [r7, #16]
        return;
 80069b0:	e06f      	b.n	8006a92 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d014      	beq.n	80069e8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c2:	f043 0201 	orr.w	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d04f      	beq.n	8006a90 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069fe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d104      	bne.n	8006a1c <HAL_SPI_IRQHandler+0x14c>
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d034      	beq.n	8006a86 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0203 	bic.w	r2, r2, #3
 8006a2a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d011      	beq.n	8006a58 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a38:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <HAL_SPI_IRQHandler+0x1c8>)
 8006a3a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fc fd79 	bl	8003538 <HAL_DMA_Abort_IT>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d016      	beq.n	8006a8e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a64:	4a0c      	ldr	r2, [pc, #48]	; (8006a98 <HAL_SPI_IRQHandler+0x1c8>)
 8006a66:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fc fd63 	bl	8003538 <HAL_DMA_Abort_IT>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00a      	beq.n	8006a8e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006a84:	e003      	b.n	8006a8e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f808 	bl	8006a9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006a8c:	e000      	b.n	8006a90 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006a8e:	bf00      	nop
    return;
 8006a90:	bf00      	nop
  }
}
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	08006ac9 	.word	0x08006ac9

08006a9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr

08006aae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006abc:	b2db      	uxtb	r3, r3
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr

08006ac8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff ffda 	bl	8006a9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	4613      	mov	r3, r2
 8006afe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b00:	f7fc fbde 	bl	80032c0 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b10:	f7fc fbd6 	bl	80032c0 <HAL_GetTick>
 8006b14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b16:	4b39      	ldr	r3, [pc, #228]	; (8006bfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	015b      	lsls	r3, r3, #5
 8006b1c:	0d1b      	lsrs	r3, r3, #20
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	fb02 f303 	mul.w	r3, r2, r3
 8006b24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b26:	e054      	b.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2e:	d050      	beq.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b30:	f7fc fbc6 	bl	80032c0 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d902      	bls.n	8006b46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d13d      	bne.n	8006bc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b5e:	d111      	bne.n	8006b84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b68:	d004      	beq.n	8006b74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b72:	d107      	bne.n	8006b84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b8c:	d10f      	bne.n	8006bae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e017      	b.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	bf0c      	ite	eq
 8006be2:	2301      	moveq	r3, #1
 8006be4:	2300      	movne	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	461a      	mov	r2, r3
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d19b      	bne.n	8006b28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000078 	.word	0x20000078

08006c00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2200      	movs	r2, #0
 8006c14:	2180      	movs	r1, #128	; 0x80
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7ff ff6a 	bl	8006af0 <SPI_WaitFlagStateUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c26:	f043 0220 	orr.w	r2, r3, #32
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e000      	b.n	8006c34 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e041      	b.n	8006cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fa ff46 	bl	8001af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f000 fc5e 	bl	800753c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d001      	beq.n	8006cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e03a      	b.n	8006d6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <HAL_TIM_Base_Start_IT+0x98>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00e      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x58>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1e:	d009      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x58>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a14      	ldr	r2, [pc, #80]	; (8006d78 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d004      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x58>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a13      	ldr	r2, [pc, #76]	; (8006d7c <HAL_TIM_Base_Start_IT+0xa0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d111      	bne.n	8006d58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b06      	cmp	r3, #6
 8006d44:	d010      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0201 	orr.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d56:	e007      	b.n	8006d68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr
 8006d74:	40012c00 	.word	0x40012c00
 8006d78:	40000400 	.word	0x40000400
 8006d7c:	40000800 	.word	0x40000800

08006d80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0201 	bic.w	r2, r2, #1
 8006d96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6a1a      	ldr	r2, [r3, #32]
 8006d9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006da2:	4013      	ands	r3, r2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10f      	bne.n	8006dc8 <HAL_TIM_Base_Stop_IT+0x48>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6a1a      	ldr	r2, [r3, #32]
 8006dae:	f240 4344 	movw	r3, #1092	; 0x444
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d107      	bne.n	8006dc8 <HAL_TIM_Base_Stop_IT+0x48>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0201 	bic.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e041      	b.n	8006e72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d106      	bne.n	8006e08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f839 	bl	8006e7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	f000 fb8e 	bl	800753c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bc80      	pop	{r7}
 8006e8a:	4770      	bx	lr

08006e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <HAL_TIM_PWM_Start+0x24>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	bf14      	ite	ne
 8006ea8:	2301      	movne	r3, #1
 8006eaa:	2300      	moveq	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	e022      	b.n	8006ef6 <HAL_TIM_PWM_Start+0x6a>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d109      	bne.n	8006eca <HAL_TIM_PWM_Start+0x3e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	bf14      	ite	ne
 8006ec2:	2301      	movne	r3, #1
 8006ec4:	2300      	moveq	r3, #0
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	e015      	b.n	8006ef6 <HAL_TIM_PWM_Start+0x6a>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d109      	bne.n	8006ee4 <HAL_TIM_PWM_Start+0x58>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	bf14      	ite	ne
 8006edc:	2301      	movne	r3, #1
 8006ede:	2300      	moveq	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	e008      	b.n	8006ef6 <HAL_TIM_PWM_Start+0x6a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	bf14      	ite	ne
 8006ef0:	2301      	movne	r3, #1
 8006ef2:	2300      	moveq	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e05e      	b.n	8006fbc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d104      	bne.n	8006f0e <HAL_TIM_PWM_Start+0x82>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f0c:	e013      	b.n	8006f36 <HAL_TIM_PWM_Start+0xaa>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	d104      	bne.n	8006f1e <HAL_TIM_PWM_Start+0x92>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f1c:	e00b      	b.n	8006f36 <HAL_TIM_PWM_Start+0xaa>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d104      	bne.n	8006f2e <HAL_TIM_PWM_Start+0xa2>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f2c:	e003      	b.n	8006f36 <HAL_TIM_PWM_Start+0xaa>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fd7c 	bl	8007a3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a1e      	ldr	r2, [pc, #120]	; (8006fc4 <HAL_TIM_PWM_Start+0x138>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d107      	bne.n	8006f5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a18      	ldr	r2, [pc, #96]	; (8006fc4 <HAL_TIM_PWM_Start+0x138>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00e      	beq.n	8006f86 <HAL_TIM_PWM_Start+0xfa>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f70:	d009      	beq.n	8006f86 <HAL_TIM_PWM_Start+0xfa>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a14      	ldr	r2, [pc, #80]	; (8006fc8 <HAL_TIM_PWM_Start+0x13c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d004      	beq.n	8006f86 <HAL_TIM_PWM_Start+0xfa>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a12      	ldr	r2, [pc, #72]	; (8006fcc <HAL_TIM_PWM_Start+0x140>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d111      	bne.n	8006faa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b06      	cmp	r3, #6
 8006f96:	d010      	beq.n	8006fba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa8:	e007      	b.n	8006fba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0201 	orr.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	40012c00 	.word	0x40012c00
 8006fc8:	40000400 	.word	0x40000400
 8006fcc:	40000800 	.word	0x40000800

08006fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d122      	bne.n	800702c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d11b      	bne.n	800702c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0202 	mvn.w	r2, #2
 8006ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa76 	bl	8007504 <HAL_TIM_IC_CaptureCallback>
 8007018:	e005      	b.n	8007026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa69 	bl	80074f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fa78 	bl	8007516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f003 0304 	and.w	r3, r3, #4
 8007036:	2b04      	cmp	r3, #4
 8007038:	d122      	bne.n	8007080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b04      	cmp	r3, #4
 8007046:	d11b      	bne.n	8007080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f06f 0204 	mvn.w	r2, #4
 8007050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2202      	movs	r2, #2
 8007056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa4c 	bl	8007504 <HAL_TIM_IC_CaptureCallback>
 800706c:	e005      	b.n	800707a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa3f 	bl	80074f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fa4e 	bl	8007516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0308 	and.w	r3, r3, #8
 800708a:	2b08      	cmp	r3, #8
 800708c:	d122      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b08      	cmp	r3, #8
 800709a:	d11b      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0208 	mvn.w	r2, #8
 80070a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2204      	movs	r2, #4
 80070aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa22 	bl	8007504 <HAL_TIM_IC_CaptureCallback>
 80070c0:	e005      	b.n	80070ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa15 	bl	80074f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fa24 	bl	8007516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	2b10      	cmp	r3, #16
 80070e0:	d122      	bne.n	8007128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b10      	cmp	r3, #16
 80070ee:	d11b      	bne.n	8007128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0210 	mvn.w	r2, #16
 80070f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2208      	movs	r2, #8
 80070fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f9f8 	bl	8007504 <HAL_TIM_IC_CaptureCallback>
 8007114:	e005      	b.n	8007122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f9eb 	bl	80074f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f9fa 	bl	8007516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b01      	cmp	r3, #1
 8007134:	d10e      	bne.n	8007154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b01      	cmp	r3, #1
 8007142:	d107      	bne.n	8007154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0201 	mvn.w	r2, #1
 800714c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7f9 f892 	bl	8000278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715e:	2b80      	cmp	r3, #128	; 0x80
 8007160:	d10e      	bne.n	8007180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716c:	2b80      	cmp	r3, #128	; 0x80
 800716e:	d107      	bne.n	8007180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fce9 	bl	8007b52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d10e      	bne.n	80071ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007198:	2b40      	cmp	r3, #64	; 0x40
 800719a:	d107      	bne.n	80071ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f9be 	bl	8007528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d10e      	bne.n	80071d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d107      	bne.n	80071d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0220 	mvn.w	r2, #32
 80071d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fcb4 	bl	8007b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071fa:	2302      	movs	r3, #2
 80071fc:	e0ae      	b.n	800735c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b0c      	cmp	r3, #12
 800720a:	f200 809f 	bhi.w	800734c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800720e:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	08007249 	.word	0x08007249
 8007218:	0800734d 	.word	0x0800734d
 800721c:	0800734d 	.word	0x0800734d
 8007220:	0800734d 	.word	0x0800734d
 8007224:	08007289 	.word	0x08007289
 8007228:	0800734d 	.word	0x0800734d
 800722c:	0800734d 	.word	0x0800734d
 8007230:	0800734d 	.word	0x0800734d
 8007234:	080072cb 	.word	0x080072cb
 8007238:	0800734d 	.word	0x0800734d
 800723c:	0800734d 	.word	0x0800734d
 8007240:	0800734d 	.word	0x0800734d
 8007244:	0800730b 	.word	0x0800730b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 f9d6 	bl	8007600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0208 	orr.w	r2, r2, #8
 8007262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0204 	bic.w	r2, r2, #4
 8007272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6999      	ldr	r1, [r3, #24]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	619a      	str	r2, [r3, #24]
      break;
 8007286:	e064      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fa1c 	bl	80076cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6999      	ldr	r1, [r3, #24]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	021a      	lsls	r2, r3, #8
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	619a      	str	r2, [r3, #24]
      break;
 80072c8:	e043      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fa65 	bl	80077a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0208 	orr.w	r2, r2, #8
 80072e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0204 	bic.w	r2, r2, #4
 80072f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69d9      	ldr	r1, [r3, #28]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	691a      	ldr	r2, [r3, #16]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	61da      	str	r2, [r3, #28]
      break;
 8007308:	e023      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 faaf 	bl	8007874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69d9      	ldr	r1, [r3, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	021a      	lsls	r2, r3, #8
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	61da      	str	r2, [r3, #28]
      break;
 800734a:	e002      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	75fb      	strb	r3, [r7, #23]
      break;
 8007350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_TIM_ConfigClockSource+0x1c>
 800737c:	2302      	movs	r3, #2
 800737e:	e0b4      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x186>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800739e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b8:	d03e      	beq.n	8007438 <HAL_TIM_ConfigClockSource+0xd4>
 80073ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073be:	f200 8087 	bhi.w	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c6:	f000 8086 	beq.w	80074d6 <HAL_TIM_ConfigClockSource+0x172>
 80073ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ce:	d87f      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d0:	2b70      	cmp	r3, #112	; 0x70
 80073d2:	d01a      	beq.n	800740a <HAL_TIM_ConfigClockSource+0xa6>
 80073d4:	2b70      	cmp	r3, #112	; 0x70
 80073d6:	d87b      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d8:	2b60      	cmp	r3, #96	; 0x60
 80073da:	d050      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x11a>
 80073dc:	2b60      	cmp	r3, #96	; 0x60
 80073de:	d877      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e0:	2b50      	cmp	r3, #80	; 0x50
 80073e2:	d03c      	beq.n	800745e <HAL_TIM_ConfigClockSource+0xfa>
 80073e4:	2b50      	cmp	r3, #80	; 0x50
 80073e6:	d873      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e8:	2b40      	cmp	r3, #64	; 0x40
 80073ea:	d058      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x13a>
 80073ec:	2b40      	cmp	r3, #64	; 0x40
 80073ee:	d86f      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073f0:	2b30      	cmp	r3, #48	; 0x30
 80073f2:	d064      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 80073f4:	2b30      	cmp	r3, #48	; 0x30
 80073f6:	d86b      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	d060      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d867      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 8007400:	2b00      	cmp	r3, #0
 8007402:	d05c      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 8007404:	2b10      	cmp	r3, #16
 8007406:	d05a      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 8007408:	e062      	b.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6818      	ldr	r0, [r3, #0]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6899      	ldr	r1, [r3, #8]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f000 faf0 	bl	80079fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800742c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	609a      	str	r2, [r3, #8]
      break;
 8007436:	e04f      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6818      	ldr	r0, [r3, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	6899      	ldr	r1, [r3, #8]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f000 fad9 	bl	80079fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800745a:	609a      	str	r2, [r3, #8]
      break;
 800745c:	e03c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6859      	ldr	r1, [r3, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	461a      	mov	r2, r3
 800746c:	f000 fa50 	bl	8007910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2150      	movs	r1, #80	; 0x50
 8007476:	4618      	mov	r0, r3
 8007478:	f000 faa7 	bl	80079ca <TIM_ITRx_SetConfig>
      break;
 800747c:	e02c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6859      	ldr	r1, [r3, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	461a      	mov	r2, r3
 800748c:	f000 fa6e 	bl	800796c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2160      	movs	r1, #96	; 0x60
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fa97 	bl	80079ca <TIM_ITRx_SetConfig>
      break;
 800749c:	e01c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	6859      	ldr	r1, [r3, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f000 fa30 	bl	8007910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2140      	movs	r1, #64	; 0x40
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fa87 	bl	80079ca <TIM_ITRx_SetConfig>
      break;
 80074bc:	e00c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4619      	mov	r1, r3
 80074c8:	4610      	mov	r0, r2
 80074ca:	f000 fa7e 	bl	80079ca <TIM_ITRx_SetConfig>
      break;
 80074ce:	e003      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	73fb      	strb	r3, [r7, #15]
      break;
 80074d4:	e000      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr

08007504 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	bc80      	pop	{r7}
 8007514:	4770      	bx	lr

08007516 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr

08007528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr
	...

0800753c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a29      	ldr	r2, [pc, #164]	; (80075f4 <TIM_Base_SetConfig+0xb8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d00b      	beq.n	800756c <TIM_Base_SetConfig+0x30>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755a:	d007      	beq.n	800756c <TIM_Base_SetConfig+0x30>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a26      	ldr	r2, [pc, #152]	; (80075f8 <TIM_Base_SetConfig+0xbc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d003      	beq.n	800756c <TIM_Base_SetConfig+0x30>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a25      	ldr	r2, [pc, #148]	; (80075fc <TIM_Base_SetConfig+0xc0>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d108      	bne.n	800757e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a1c      	ldr	r2, [pc, #112]	; (80075f4 <TIM_Base_SetConfig+0xb8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00b      	beq.n	800759e <TIM_Base_SetConfig+0x62>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758c:	d007      	beq.n	800759e <TIM_Base_SetConfig+0x62>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a19      	ldr	r2, [pc, #100]	; (80075f8 <TIM_Base_SetConfig+0xbc>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d003      	beq.n	800759e <TIM_Base_SetConfig+0x62>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a18      	ldr	r2, [pc, #96]	; (80075fc <TIM_Base_SetConfig+0xc0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d108      	bne.n	80075b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a07      	ldr	r2, [pc, #28]	; (80075f4 <TIM_Base_SetConfig+0xb8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d103      	bne.n	80075e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	615a      	str	r2, [r3, #20]
}
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800

08007600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	f023 0201 	bic.w	r2, r3, #1
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f023 0302 	bic.w	r3, r3, #2
 8007648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a1c      	ldr	r2, [pc, #112]	; (80076c8 <TIM_OC1_SetConfig+0xc8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d10c      	bne.n	8007676 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f023 0308 	bic.w	r3, r3, #8
 8007662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f023 0304 	bic.w	r3, r3, #4
 8007674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a13      	ldr	r2, [pc, #76]	; (80076c8 <TIM_OC1_SetConfig+0xc8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d111      	bne.n	80076a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800768c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	621a      	str	r2, [r3, #32]
}
 80076bc:	bf00      	nop
 80076be:	371c      	adds	r7, #28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40012c00 	.word	0x40012c00

080076cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	f023 0210 	bic.w	r2, r3, #16
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f023 0320 	bic.w	r3, r3, #32
 8007716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	4313      	orrs	r3, r2
 8007722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a1d      	ldr	r2, [pc, #116]	; (800779c <TIM_OC2_SetConfig+0xd0>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d10d      	bne.n	8007748 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4313      	orrs	r3, r2
 800773e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a14      	ldr	r2, [pc, #80]	; (800779c <TIM_OC2_SetConfig+0xd0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d113      	bne.n	8007778 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800775e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4313      	orrs	r3, r2
 800776a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	4313      	orrs	r3, r2
 8007776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	621a      	str	r2, [r3, #32]
}
 8007792:	bf00      	nop
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr
 800779c:	40012c00 	.word	0x40012c00

080077a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0303 	bic.w	r3, r3, #3
 80077d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a1d      	ldr	r2, [pc, #116]	; (8007870 <TIM_OC3_SetConfig+0xd0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d10d      	bne.n	800781a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	4313      	orrs	r3, r2
 8007810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a14      	ldr	r2, [pc, #80]	; (8007870 <TIM_OC3_SetConfig+0xd0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d113      	bne.n	800784a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	011b      	lsls	r3, r3, #4
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4313      	orrs	r3, r2
 800783c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	621a      	str	r2, [r3, #32]
}
 8007864:	bf00      	nop
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	40012c00 	.word	0x40012c00

08007874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	021b      	lsls	r3, r3, #8
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	031b      	lsls	r3, r3, #12
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a0f      	ldr	r2, [pc, #60]	; (800790c <TIM_OC4_SetConfig+0x98>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d109      	bne.n	80078e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	019b      	lsls	r3, r3, #6
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	621a      	str	r2, [r3, #32]
}
 8007902:	bf00      	nop
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	bc80      	pop	{r7}
 800790a:	4770      	bx	lr
 800790c:	40012c00 	.word	0x40012c00

08007910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	f023 0201 	bic.w	r2, r3, #1
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800793a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f023 030a 	bic.w	r3, r3, #10
 800794c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	621a      	str	r2, [r3, #32]
}
 8007962:	bf00      	nop
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	bc80      	pop	{r7}
 800796a:	4770      	bx	lr

0800796c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	f023 0210 	bic.w	r2, r3, #16
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	031b      	lsls	r3, r3, #12
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4313      	orrs	r3, r2
 80079a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	621a      	str	r2, [r3, #32]
}
 80079c0:	bf00      	nop
 80079c2:	371c      	adds	r7, #28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr

080079ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	f043 0307 	orr.w	r3, r3, #7
 80079ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	609a      	str	r2, [r3, #8]
}
 80079f4:	bf00      	nop
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bc80      	pop	{r7}
 80079fc:	4770      	bx	lr

080079fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b087      	sub	sp, #28
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
 8007a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	021a      	lsls	r2, r3, #8
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	431a      	orrs	r2, r3
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	609a      	str	r2, [r3, #8]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr

08007a3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f003 031f 	and.w	r3, r3, #31
 8007a4e:	2201      	movs	r2, #1
 8007a50:	fa02 f303 	lsl.w	r3, r2, r3
 8007a54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6a1a      	ldr	r2, [r3, #32]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	43db      	mvns	r3, r3
 8007a5e:	401a      	ands	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a1a      	ldr	r2, [r3, #32]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f003 031f 	and.w	r3, r3, #31
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	fa01 f303 	lsl.w	r3, r1, r3
 8007a74:	431a      	orrs	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	621a      	str	r2, [r3, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc80      	pop	{r7}
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d101      	bne.n	8007a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	e046      	b.n	8007b2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a16      	ldr	r2, [pc, #88]	; (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d00e      	beq.n	8007afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae8:	d009      	beq.n	8007afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a12      	ldr	r2, [pc, #72]	; (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d004      	beq.n	8007afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a10      	ldr	r2, [pc, #64]	; (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d10c      	bne.n	8007b18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr
 8007b34:	40012c00 	.word	0x40012c00
 8007b38:	40000400 	.word	0x40000400
 8007b3c:	40000800 	.word	0x40000800

08007b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr

08007b52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr

08007b64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007b68:	4904      	ldr	r1, [pc, #16]	; (8007b7c <MX_FATFS_Init+0x18>)
 8007b6a:	4805      	ldr	r0, [pc, #20]	; (8007b80 <MX_FATFS_Init+0x1c>)
 8007b6c:	f002 feb0 	bl	800a8d0 <FATFS_LinkDriver>
 8007b70:	4603      	mov	r3, r0
 8007b72:	461a      	mov	r2, r3
 8007b74:	4b03      	ldr	r3, [pc, #12]	; (8007b84 <MX_FATFS_Init+0x20>)
 8007b76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b78:	bf00      	nop
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20001224 	.word	0x20001224
 8007b80:	20000098 	.word	0x20000098
 8007b84:	20001220 	.word	0x20001220

08007b88 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007b8c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bc80      	pop	{r7}
 8007b94:	4770      	bx	lr

08007b96 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

    return SD_disk_initialize(pdrv);
 8007ba0:	79fb      	ldrb	r3, [r7, #7]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fa fd38 	bl	8002618 <SD_disk_initialize>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    return SD_disk_status(pdrv);
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fa fe13 	bl	80027ec <SD_disk_status>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	603b      	str	r3, [r7, #0]
 8007bde:	4603      	mov	r3, r0
 8007be0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv,buff,sector,count);
 8007be2:	7bf8      	ldrb	r0, [r7, #15]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	f7fa fe13 	bl	8002814 <SD_disk_read>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]
 8007c06:	4603      	mov	r3, r0
 8007c08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv,buff,sector,count);
 8007c0a:	7bf8      	ldrb	r0, [r7, #15]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	68b9      	ldr	r1, [r7, #8]
 8007c12:	f7fa fe69 	bl	80028e8 <SD_disk_write>
 8007c16:	4603      	mov	r3, r0
 8007c18:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	4603      	mov	r3, r0
 8007c2a:	603a      	str	r2, [r7, #0]
 8007c2c:	71fb      	strb	r3, [r7, #7]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv,cmd,buff);
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	79b9      	ldrb	r1, [r7, #6]
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fa fed9 	bl	80029f0 <SD_disk_ioctl>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007c56:	79fb      	ldrb	r3, [r7, #7]
 8007c58:	4a08      	ldr	r2, [pc, #32]	; (8007c7c <disk_status+0x30>)
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	79fa      	ldrb	r2, [r7, #7]
 8007c64:	4905      	ldr	r1, [pc, #20]	; (8007c7c <disk_status+0x30>)
 8007c66:	440a      	add	r2, r1
 8007c68:	7a12      	ldrb	r2, [r2, #8]
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	4798      	blx	r3
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20001248 	.word	0x20001248

08007c80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	4a0d      	ldr	r2, [pc, #52]	; (8007cc8 <disk_initialize+0x48>)
 8007c92:	5cd3      	ldrb	r3, [r2, r3]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d111      	bne.n	8007cbc <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	4a0b      	ldr	r2, [pc, #44]	; (8007cc8 <disk_initialize+0x48>)
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	4a09      	ldr	r2, [pc, #36]	; (8007cc8 <disk_initialize+0x48>)
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	79fa      	ldrb	r2, [r7, #7]
 8007cae:	4906      	ldr	r1, [pc, #24]	; (8007cc8 <disk_initialize+0x48>)
 8007cb0:	440a      	add	r2, r1
 8007cb2:	7a12      	ldrb	r2, [r2, #8]
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20001248 	.word	0x20001248

08007ccc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ccc:	b590      	push	{r4, r7, lr}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	4a0a      	ldr	r2, [pc, #40]	; (8007d08 <disk_read+0x3c>)
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	689c      	ldr	r4, [r3, #8]
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	4a07      	ldr	r2, [pc, #28]	; (8007d08 <disk_read+0x3c>)
 8007cec:	4413      	add	r3, r2
 8007cee:	7a18      	ldrb	r0, [r3, #8]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	47a0      	blx	r4
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	75fb      	strb	r3, [r7, #23]
  return res;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd90      	pop	{r4, r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20001248 	.word	0x20001248

08007d0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007d0c:	b590      	push	{r4, r7, lr}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	607a      	str	r2, [r7, #4]
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	4a0a      	ldr	r2, [pc, #40]	; (8007d48 <disk_write+0x3c>)
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	68dc      	ldr	r4, [r3, #12]
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	4a07      	ldr	r2, [pc, #28]	; (8007d48 <disk_write+0x3c>)
 8007d2c:	4413      	add	r3, r2
 8007d2e:	7a18      	ldrb	r0, [r3, #8]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	68b9      	ldr	r1, [r7, #8]
 8007d36:	47a0      	blx	r4
 8007d38:	4603      	mov	r3, r0
 8007d3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	371c      	adds	r7, #28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd90      	pop	{r4, r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20001248 	.word	0x20001248

08007d4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	603a      	str	r2, [r7, #0]
 8007d56:	71fb      	strb	r3, [r7, #7]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	4a09      	ldr	r2, [pc, #36]	; (8007d84 <disk_ioctl+0x38>)
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	79fa      	ldrb	r2, [r7, #7]
 8007d6a:	4906      	ldr	r1, [pc, #24]	; (8007d84 <disk_ioctl+0x38>)
 8007d6c:	440a      	add	r2, r1
 8007d6e:	7a10      	ldrb	r0, [r2, #8]
 8007d70:	79b9      	ldrb	r1, [r7, #6]
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	4798      	blx	r3
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]
  return res;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	20001248 	.word	0x20001248

08007d88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8007d9c:	e007      	b.n	8007dae <mem_cpy+0x26>
		*d++ = *s++;
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	1c53      	adds	r3, r2, #1
 8007da2:	613b      	str	r3, [r7, #16]
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	1c59      	adds	r1, r3, #1
 8007da8:	6179      	str	r1, [r7, #20]
 8007daa:	7812      	ldrb	r2, [r2, #0]
 8007dac:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	1e5a      	subs	r2, r3, #1
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1f2      	bne.n	8007d9e <mem_cpy+0x16>
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bc80      	pop	{r7}
 8007dc2:	4770      	bx	lr

08007dc4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8007dd4:	e005      	b.n	8007de2 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	617a      	str	r2, [r7, #20]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	1e5a      	subs	r2, r3, #1
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1f4      	bne.n	8007dd6 <mem_set+0x12>
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bc80      	pop	{r7}
 8007df6:	4770      	bx	lr

08007df8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8007df8:	b480      	push	{r7}
 8007dfa:	b089      	sub	sp, #36	; 0x24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8007e10:	bf00      	nop
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	1e5a      	subs	r2, r3, #1
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00d      	beq.n	8007e38 <mem_cmp+0x40>
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	61fa      	str	r2, [r7, #28]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	4619      	mov	r1, r3
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	61ba      	str	r2, [r7, #24]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	1acb      	subs	r3, r1, r3
 8007e30:	617b      	str	r3, [r7, #20]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0ec      	beq.n	8007e12 <mem_cmp+0x1a>
	return r;
 8007e38:	697b      	ldr	r3, [r7, #20]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3724      	adds	r7, #36	; 0x24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007e4e:	e002      	b.n	8007e56 <chk_chr+0x12>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3301      	adds	r3, #1
 8007e54:	607b      	str	r3, [r7, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <chk_chr+0x26>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d1f2      	bne.n	8007e50 <chk_chr+0xc>
	return *str;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bc80      	pop	{r7}
 8007e76:	4770      	bx	lr

08007e78 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007e82:	2300      	movs	r3, #0
 8007e84:	60bb      	str	r3, [r7, #8]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	e038      	b.n	8007efe <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8007e8c:	492f      	ldr	r1, [pc, #188]	; (8007f4c <chk_lock+0xd4>)
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4613      	mov	r3, r2
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d029      	beq.n	8007ef4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007ea0:	492a      	ldr	r1, [pc, #168]	; (8007f4c <chk_lock+0xd4>)
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d11e      	bne.n	8007ef8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8007eba:	4924      	ldr	r1, [pc, #144]	; (8007f4c <chk_lock+0xd4>)
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	3304      	adds	r3, #4
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d110      	bne.n	8007ef8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8007ed6:	491d      	ldr	r1, [pc, #116]	; (8007f4c <chk_lock+0xd4>)
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	4613      	mov	r3, r2
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	4413      	add	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	881a      	ldrh	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d102      	bne.n	8007ef8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8007ef2:	e007      	b.n	8007f04 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	3301      	adds	r3, #1
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d9c3      	bls.n	8007e8c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d109      	bne.n	8007f1e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <chk_lock+0x9e>
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d101      	bne.n	8007f1a <chk_lock+0xa2>
 8007f16:	2300      	movs	r3, #0
 8007f18:	e013      	b.n	8007f42 <chk_lock+0xca>
 8007f1a:	2312      	movs	r3, #18
 8007f1c:	e011      	b.n	8007f42 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <chk_lock+0xc4>
 8007f24:	4909      	ldr	r1, [pc, #36]	; (8007f4c <chk_lock+0xd4>)
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	4413      	add	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	440b      	add	r3, r1
 8007f32:	330a      	adds	r3, #10
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f3a:	d101      	bne.n	8007f40 <chk_lock+0xc8>
 8007f3c:	2310      	movs	r3, #16
 8007f3e:	e000      	b.n	8007f42 <chk_lock+0xca>
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr
 8007f4c:	20001230 	.word	0x20001230

08007f50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f56:	2300      	movs	r3, #0
 8007f58:	607b      	str	r3, [r7, #4]
 8007f5a:	e002      	b.n	8007f62 <enq_lock+0x12>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	607b      	str	r3, [r7, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d809      	bhi.n	8007f7c <enq_lock+0x2c>
 8007f68:	490a      	ldr	r1, [pc, #40]	; (8007f94 <enq_lock+0x44>)
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1ef      	bne.n	8007f5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	bf14      	ite	ne
 8007f82:	2301      	movne	r3, #1
 8007f84:	2300      	moveq	r3, #0
 8007f86:	b2db      	uxtb	r3, r3
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	20001230 	.word	0x20001230

08007f98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	e02b      	b.n	8008000 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8007fa8:	4955      	ldr	r1, [pc, #340]	; (8008100 <inc_lock+0x168>)
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4613      	mov	r3, r2
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d11b      	bne.n	8007ffa <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8007fc2:	494f      	ldr	r1, [pc, #316]	; (8008100 <inc_lock+0x168>)
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d10d      	bne.n	8007ffa <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8007fde:	4948      	ldr	r1, [pc, #288]	; (8008100 <inc_lock+0x168>)
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	440b      	add	r3, r1
 8007fec:	3308      	adds	r3, #8
 8007fee:	881a      	ldrh	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d006      	beq.n	8008008 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d9d0      	bls.n	8007fa8 <inc_lock+0x10>
 8008006:	e000      	b.n	800800a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8008008:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d145      	bne.n	800809c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e002      	b.n	800801c <inc_lock+0x84>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3301      	adds	r3, #1
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d809      	bhi.n	8008036 <inc_lock+0x9e>
 8008022:	4937      	ldr	r1, [pc, #220]	; (8008100 <inc_lock+0x168>)
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4613      	mov	r3, r2
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1ef      	bne.n	8008016 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b02      	cmp	r3, #2
 800803a:	d101      	bne.n	8008040 <inc_lock+0xa8>
 800803c:	2300      	movs	r3, #0
 800803e:	e05a      	b.n	80080f6 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8008046:	482e      	ldr	r0, [pc, #184]	; (8008100 <inc_lock+0x168>)
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4613      	mov	r3, r2
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	4413      	add	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4403      	add	r3, r0
 8008054:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800805c:	4828      	ldr	r0, [pc, #160]	; (8008100 <inc_lock+0x168>)
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	4613      	mov	r3, r2
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4403      	add	r3, r0
 800806a:	3304      	adds	r3, #4
 800806c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8008074:	4922      	ldr	r1, [pc, #136]	; (8008100 <inc_lock+0x168>)
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	4613      	mov	r3, r2
 800807a:	005b      	lsls	r3, r3, #1
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	440b      	add	r3, r1
 8008082:	3308      	adds	r3, #8
 8008084:	4602      	mov	r2, r0
 8008086:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8008088:	491d      	ldr	r1, [pc, #116]	; (8008100 <inc_lock+0x168>)
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4613      	mov	r3, r2
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	440b      	add	r3, r1
 8008096:	330a      	adds	r3, #10
 8008098:	2200      	movs	r2, #0
 800809a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00c      	beq.n	80080bc <inc_lock+0x124>
 80080a2:	4917      	ldr	r1, [pc, #92]	; (8008100 <inc_lock+0x168>)
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4613      	mov	r3, r2
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	4413      	add	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	440b      	add	r3, r1
 80080b0:	330a      	adds	r3, #10
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <inc_lock+0x124>
 80080b8:	2300      	movs	r3, #0
 80080ba:	e01c      	b.n	80080f6 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10b      	bne.n	80080da <inc_lock+0x142>
 80080c2:	490f      	ldr	r1, [pc, #60]	; (8008100 <inc_lock+0x168>)
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4613      	mov	r3, r2
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	330a      	adds	r3, #10
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	b299      	uxth	r1, r3
 80080d8:	e001      	b.n	80080de <inc_lock+0x146>
 80080da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80080de:	4808      	ldr	r0, [pc, #32]	; (8008100 <inc_lock+0x168>)
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4613      	mov	r3, r2
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4403      	add	r3, r0
 80080ec:	330a      	adds	r3, #10
 80080ee:	460a      	mov	r2, r1
 80080f0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3301      	adds	r3, #1
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr
 8008100:	20001230 	.word	0x20001230

08008104 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3b01      	subs	r3, #1
 8008110:	607b      	str	r3, [r7, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d82e      	bhi.n	8008176 <dec_lock+0x72>
		n = Files[i].ctr;
 8008118:	491b      	ldr	r1, [pc, #108]	; (8008188 <dec_lock+0x84>)
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	330a      	adds	r3, #10
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800812c:	89fb      	ldrh	r3, [r7, #14]
 800812e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008132:	d101      	bne.n	8008138 <dec_lock+0x34>
 8008134:	2300      	movs	r3, #0
 8008136:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8008138:	89fb      	ldrh	r3, [r7, #14]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <dec_lock+0x40>
 800813e:	89fb      	ldrh	r3, [r7, #14]
 8008140:	3b01      	subs	r3, #1
 8008142:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008144:	4910      	ldr	r1, [pc, #64]	; (8008188 <dec_lock+0x84>)
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	330a      	adds	r3, #10
 8008154:	89fa      	ldrh	r2, [r7, #14]
 8008156:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008158:	89fb      	ldrh	r3, [r7, #14]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d108      	bne.n	8008170 <dec_lock+0x6c>
 800815e:	490a      	ldr	r1, [pc, #40]	; (8008188 <dec_lock+0x84>)
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	737b      	strb	r3, [r7, #13]
 8008174:	e001      	b.n	800817a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008176:	2302      	movs	r3, #2
 8008178:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800817a:	7b7b      	ldrb	r3, [r7, #13]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	bc80      	pop	{r7}
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	20001230 	.word	0x20001230

0800818c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008194:	2300      	movs	r3, #0
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	e016      	b.n	80081c8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800819a:	4910      	ldr	r1, [pc, #64]	; (80081dc <clear_lock+0x50>)
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	4613      	mov	r3, r2
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d108      	bne.n	80081c2 <clear_lock+0x36>
 80081b0:	490a      	ldr	r1, [pc, #40]	; (80081dc <clear_lock+0x50>)
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	4613      	mov	r3, r2
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3301      	adds	r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d9e5      	bls.n	800819a <clear_lock+0xe>
	}
}
 80081ce:	bf00      	nop
 80081d0:	bf00      	nop
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bc80      	pop	{r7}
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	20001230 	.word	0x20001230

080081e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d038      	beq.n	8008268 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80081fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	2301      	movs	r3, #1
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	f7ff fd7f 	bl	8007d0c <disk_write>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8008214:	2301      	movs	r3, #1
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	e026      	b.n	8008268 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	1ad2      	subs	r2, r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008232:	429a      	cmp	r2, r3
 8008234:	d218      	bcs.n	8008268 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800823c:	613b      	str	r3, [r7, #16]
 800823e:	e010      	b.n	8008262 <sync_window+0x82>
					wsect += fs->fsize;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4413      	add	r3, r2
 800824a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	2301      	movs	r3, #1
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	f7ff fd58 	bl	8007d0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	3b01      	subs	r3, #1
 8008260:	613b      	str	r3, [r7, #16]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d8eb      	bhi.n	8008240 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d01b      	beq.n	80082c4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff ffa7 	bl	80081e0 <sync_window>
 8008292:	4603      	mov	r3, r0
 8008294:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d113      	bne.n	80082c4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	2301      	movs	r3, #1
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	f7ff fd10 	bl	8007ccc <disk_read>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d004      	beq.n	80082bc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80082b2:	f04f 33ff 	mov.w	r3, #4294967295
 80082b6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7ff ff82 	bl	80081e0 <sync_window>
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f040 809b 	bne.w	800841e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	f040 8088 	bne.w	8008404 <sync_fs+0x136>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	f040 8082 	bne.w	8008404 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008306:	2100      	movs	r1, #0
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff fd5b 	bl	8007dc4 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2255      	movs	r2, #85	; 0x55
 8008312:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	22aa      	movs	r2, #170	; 0xaa
 800831a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2252      	movs	r2, #82	; 0x52
 8008322:	701a      	strb	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2252      	movs	r2, #82	; 0x52
 8008328:	705a      	strb	r2, [r3, #1]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2261      	movs	r2, #97	; 0x61
 800832e:	709a      	strb	r2, [r3, #2]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2241      	movs	r2, #65	; 0x41
 8008334:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2272      	movs	r2, #114	; 0x72
 800833a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2272      	movs	r2, #114	; 0x72
 8008342:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2241      	movs	r2, #65	; 0x41
 800834a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2261      	movs	r2, #97	; 0x61
 8008352:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800835c:	b2da      	uxtb	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800836a:	b29b      	uxth	r3, r3
 800836c:	0a1b      	lsrs	r3, r3, #8
 800836e:	b29b      	uxth	r3, r3
 8008370:	b2da      	uxtb	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800837e:	0c1b      	lsrs	r3, r3, #16
 8008380:	b2da      	uxtb	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800838e:	0e1b      	lsrs	r3, r3, #24
 8008390:	b2da      	uxtb	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	0a1b      	lsrs	r3, r3, #8
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80083c0:	0c1b      	lsrs	r3, r3, #16
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80083d0:	0e1b      	lsrs	r3, r3, #24
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80083f6:	2301      	movs	r3, #1
 80083f8:	f7ff fc88 	bl	8007d0c <disk_write>
			fs->fsi_flag = 0;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800840a:	2200      	movs	r2, #0
 800840c:	2100      	movs	r1, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff fc9c 	bl	8007d4c <disk_ioctl>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <sync_fs+0x150>
			res = FR_DISK_ERR;
 800841a:	2301      	movs	r3, #1
 800841c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800841e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	3b02      	subs	r3, #2
 8008436:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800843e:	3b02      	subs	r3, #2
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d301      	bcc.n	800844a <clust2sect+0x22>
 8008446:	2300      	movs	r3, #0
 8008448:	e00a      	b.n	8008460 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008450:	461a      	mov	r2, r3
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	fb03 f202 	mul.w	r2, r3, r2
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800845e:	4413      	add	r3, r2
}
 8008460:	4618      	mov	r0, r3
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr

0800846a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b086      	sub	sp, #24
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d905      	bls.n	8008486 <get_fat+0x1c>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d302      	bcc.n	800848c <get_fat+0x22>
		val = 1;	/* Internal error */
 8008486:	2301      	movs	r3, #1
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	e0a3      	b.n	80085d4 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800848c:	f04f 33ff 	mov.w	r3, #4294967295
 8008490:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008498:	2b03      	cmp	r3, #3
 800849a:	d068      	beq.n	800856e <get_fat+0x104>
 800849c:	2b03      	cmp	r3, #3
 800849e:	f300 808f 	bgt.w	80085c0 <get_fat+0x156>
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d002      	beq.n	80084ac <get_fat+0x42>
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d040      	beq.n	800852c <get_fat+0xc2>
 80084aa:	e089      	b.n	80085c0 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	0a5b      	lsrs	r3, r3, #9
 80084c4:	4413      	add	r3, r2
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff fed2 	bl	8008272 <move_window>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d178      	bne.n	80085c6 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	60fa      	str	r2, [r7, #12]
 80084da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	5cd3      	ldrb	r3, [r2, r3]
 80084e2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	0a5b      	lsrs	r3, r3, #9
 80084ee:	4413      	add	r3, r2
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7ff febd 	bl	8008272 <move_window>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d165      	bne.n	80085ca <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	5cd3      	ldrb	r3, [r2, r3]
 8008508:	021b      	lsls	r3, r3, #8
 800850a:	461a      	mov	r2, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4313      	orrs	r3, r2
 8008510:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <get_fat+0xb8>
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	091b      	lsrs	r3, r3, #4
 8008520:	e002      	b.n	8008528 <get_fat+0xbe>
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008528:	617b      	str	r3, [r7, #20]
			break;
 800852a:	e053      	b.n	80085d4 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	0a1b      	lsrs	r3, r3, #8
 8008536:	4413      	add	r3, r2
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff fe99 	bl	8008272 <move_window>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d143      	bne.n	80085ce <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	4413      	add	r3, r2
 8008552:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	3301      	adds	r3, #1
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	b21a      	sxth	r2, r3
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	b21b      	sxth	r3, r3
 8008564:	4313      	orrs	r3, r2
 8008566:	b21b      	sxth	r3, r3
 8008568:	b29b      	uxth	r3, r3
 800856a:	617b      	str	r3, [r7, #20]
			break;
 800856c:	e032      	b.n	80085d4 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	09db      	lsrs	r3, r3, #7
 8008578:	4413      	add	r3, r2
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff fe78 	bl	8008272 <move_window>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d124      	bne.n	80085d2 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	3303      	adds	r3, #3
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	061a      	lsls	r2, r3, #24
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	3302      	adds	r3, #2
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	041b      	lsls	r3, r3, #16
 80085a6:	4313      	orrs	r3, r2
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	3201      	adds	r2, #1
 80085ac:	7812      	ldrb	r2, [r2, #0]
 80085ae:	0212      	lsls	r2, r2, #8
 80085b0:	4313      	orrs	r3, r2
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	7812      	ldrb	r2, [r2, #0]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80085bc:	617b      	str	r3, [r7, #20]
			break;
 80085be:	e009      	b.n	80085d4 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 80085c0:	2301      	movs	r3, #1
 80085c2:	617b      	str	r3, [r7, #20]
 80085c4:	e006      	b.n	80085d4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085c6:	bf00      	nop
 80085c8:	e004      	b.n	80085d4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085ca:	bf00      	nop
 80085cc:	e002      	b.n	80085d4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085ce:	bf00      	nop
 80085d0:	e000      	b.n	80085d4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80085d2:	bf00      	nop
		}
	}

	return val;
 80085d4:	697b      	ldr	r3, [r7, #20]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b088      	sub	sp, #32
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d905      	bls.n	80085fc <put_fat+0x1e>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d302      	bcc.n	8008602 <put_fat+0x24>
		res = FR_INT_ERR;
 80085fc:	2302      	movs	r3, #2
 80085fe:	77fb      	strb	r3, [r7, #31]
 8008600:	e0f6      	b.n	80087f0 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008608:	2b03      	cmp	r3, #3
 800860a:	f000 809e 	beq.w	800874a <put_fat+0x16c>
 800860e:	2b03      	cmp	r3, #3
 8008610:	f300 80e4 	bgt.w	80087dc <put_fat+0x1fe>
 8008614:	2b01      	cmp	r3, #1
 8008616:	d002      	beq.n	800861e <put_fat+0x40>
 8008618:	2b02      	cmp	r3, #2
 800861a:	d06f      	beq.n	80086fc <put_fat+0x11e>
 800861c:	e0de      	b.n	80087dc <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	085b      	lsrs	r3, r3, #1
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	4413      	add	r3, r2
 800862a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	0a5b      	lsrs	r3, r3, #9
 8008636:	4413      	add	r3, r2
 8008638:	4619      	mov	r1, r3
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7ff fe19 	bl	8008272 <move_window>
 8008640:	4603      	mov	r3, r0
 8008642:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008644:	7ffb      	ldrb	r3, [r7, #31]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f040 80cb 	bne.w	80087e2 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	617a      	str	r2, [r7, #20]
 8008652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	4413      	add	r3, r2
 800865a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00d      	beq.n	8008682 <put_fat+0xa4>
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	b25b      	sxtb	r3, r3
 800866c:	f003 030f 	and.w	r3, r3, #15
 8008670:	b25a      	sxtb	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	b2db      	uxtb	r3, r3
 8008676:	011b      	lsls	r3, r3, #4
 8008678:	b25b      	sxtb	r3, r3
 800867a:	4313      	orrs	r3, r2
 800867c:	b25b      	sxtb	r3, r3
 800867e:	b2db      	uxtb	r3, r3
 8008680:	e001      	b.n	8008686 <put_fat+0xa8>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	b2db      	uxtb	r3, r3
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	0a5b      	lsrs	r3, r3, #9
 800869c:	4413      	add	r3, r2
 800869e:	4619      	mov	r1, r3
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7ff fde6 	bl	8008272 <move_window>
 80086a6:	4603      	mov	r3, r0
 80086a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086aa:	7ffb      	ldrb	r3, [r7, #31]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f040 809a 	bne.w	80087e6 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	4413      	add	r3, r2
 80086bc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <put_fat+0xf2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	091b      	lsrs	r3, r3, #4
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	e00e      	b.n	80086ee <put_fat+0x110>
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	b25b      	sxtb	r3, r3
 80086d6:	f023 030f 	bic.w	r3, r3, #15
 80086da:	b25a      	sxtb	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	0a1b      	lsrs	r3, r3, #8
 80086e0:	b25b      	sxtb	r3, r3
 80086e2:	f003 030f 	and.w	r3, r3, #15
 80086e6:	b25b      	sxtb	r3, r3
 80086e8:	4313      	orrs	r3, r2
 80086ea:	b25b      	sxtb	r3, r3
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80086fa:	e079      	b.n	80087f0 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	0a1b      	lsrs	r3, r3, #8
 8008706:	4413      	add	r3, r2
 8008708:	4619      	mov	r1, r3
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f7ff fdb1 	bl	8008272 <move_window>
 8008710:	4603      	mov	r3, r0
 8008712:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008714:	7ffb      	ldrb	r3, [r7, #31]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d167      	bne.n	80087ea <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	4413      	add	r3, r2
 8008726:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	b2da      	uxtb	r2, r3
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	701a      	strb	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	b29b      	uxth	r3, r3
 8008734:	0a1b      	lsrs	r3, r3, #8
 8008736:	b29a      	uxth	r2, r3
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	3301      	adds	r3, #1
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8008748:	e052      	b.n	80087f0 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	09db      	lsrs	r3, r3, #7
 8008754:	4413      	add	r3, r2
 8008756:	4619      	mov	r1, r3
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f7ff fd8a 	bl	8008272 <move_window>
 800875e:	4603      	mov	r3, r0
 8008760:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008762:	7ffb      	ldrb	r3, [r7, #31]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d142      	bne.n	80087ee <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	3303      	adds	r3, #3
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	061a      	lsls	r2, r3, #24
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	3302      	adds	r3, #2
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	4313      	orrs	r3, r2
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	3201      	adds	r2, #1
 800878c:	7812      	ldrb	r2, [r2, #0]
 800878e:	0212      	lsls	r2, r2, #8
 8008790:	4313      	orrs	r3, r2
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	7812      	ldrb	r2, [r2, #0]
 8008796:	4313      	orrs	r3, r2
 8008798:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	4313      	orrs	r3, r2
 80087a0:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	701a      	strb	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	0a1b      	lsrs	r3, r3, #8
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	3301      	adds	r3, #1
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	0c1a      	lsrs	r2, r3, #16
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	3302      	adds	r3, #2
 80087c2:	b2d2      	uxtb	r2, r2
 80087c4:	701a      	strb	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	0e1a      	lsrs	r2, r3, #24
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	3303      	adds	r3, #3
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80087da:	e009      	b.n	80087f0 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 80087dc:	2302      	movs	r3, #2
 80087de:	77fb      	strb	r3, [r7, #31]
 80087e0:	e006      	b.n	80087f0 <put_fat+0x212>
			if (res != FR_OK) break;
 80087e2:	bf00      	nop
 80087e4:	e004      	b.n	80087f0 <put_fat+0x212>
			if (res != FR_OK) break;
 80087e6:	bf00      	nop
 80087e8:	e002      	b.n	80087f0 <put_fat+0x212>
			if (res != FR_OK) break;
 80087ea:	bf00      	nop
 80087ec:	e000      	b.n	80087f0 <put_fat+0x212>
			if (res != FR_OK) break;
 80087ee:	bf00      	nop
		}
	}

	return res;
 80087f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3720      	adds	r7, #32
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d905      	bls.n	8008816 <remove_chain+0x1c>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	d302      	bcc.n	800881c <remove_chain+0x22>
		res = FR_INT_ERR;
 8008816:	2302      	movs	r3, #2
 8008818:	73fb      	strb	r3, [r7, #15]
 800881a:	e043      	b.n	80088a4 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008820:	e036      	b.n	8008890 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff fe20 	bl	800846a <get_fat>
 800882a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d035      	beq.n	800889e <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d102      	bne.n	800883e <remove_chain+0x44>
 8008838:	2302      	movs	r3, #2
 800883a:	73fb      	strb	r3, [r7, #15]
 800883c:	e032      	b.n	80088a4 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008844:	d102      	bne.n	800884c <remove_chain+0x52>
 8008846:	2301      	movs	r3, #1
 8008848:	73fb      	strb	r3, [r7, #15]
 800884a:	e02b      	b.n	80088a4 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800884c:	2200      	movs	r2, #0
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff fec4 	bl	80085de <put_fat>
 8008856:	4603      	mov	r3, r0
 8008858:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d120      	bne.n	80088a2 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886a:	d00f      	beq.n	800888c <remove_chain+0x92>
				fs->free_clust++;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8008880:	f043 0301 	orr.w	r3, r3, #1
 8008884:	b2da      	uxtb	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d3c2      	bcc.n	8008822 <remove_chain+0x28>
 800889c:	e002      	b.n	80088a4 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800889e:	bf00      	nop
 80088a0:	e000      	b.n	80088a4 <remove_chain+0xaa>
			if (res != FR_OK) break;
 80088a2:	bf00      	nop
		}
	}

	return res;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10f      	bne.n	80088de <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80088c4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <create_chain+0x2a>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d31c      	bcc.n	8008912 <create_chain+0x64>
 80088d8:	2301      	movs	r3, #1
 80088da:	613b      	str	r3, [r7, #16]
 80088dc:	e019      	b.n	8008912 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff fdc2 	bl	800846a <get_fat>
 80088e6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d801      	bhi.n	80088f2 <create_chain+0x44>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e076      	b.n	80089e0 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f8:	d101      	bne.n	80088fe <create_chain+0x50>
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	e070      	b.n	80089e0 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	429a      	cmp	r2, r3
 8008908:	d201      	bcs.n	800890e <create_chain+0x60>
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	e068      	b.n	80089e0 <create_chain+0x132>
		scl = clst;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	3301      	adds	r3, #1
 800891a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	429a      	cmp	r2, r3
 8008926:	d307      	bcc.n	8008938 <create_chain+0x8a>
			ncl = 2;
 8008928:	2302      	movs	r3, #2
 800892a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	429a      	cmp	r2, r3
 8008932:	d901      	bls.n	8008938 <create_chain+0x8a>
 8008934:	2300      	movs	r3, #0
 8008936:	e053      	b.n	80089e0 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8008938:	6979      	ldr	r1, [r7, #20]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff fd95 	bl	800846a <get_fat>
 8008940:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00e      	beq.n	8008966 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894e:	d002      	beq.n	8008956 <create_chain+0xa8>
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d101      	bne.n	800895a <create_chain+0xac>
			return cs;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	e042      	b.n	80089e0 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	429a      	cmp	r2, r3
 8008960:	d1d9      	bne.n	8008916 <create_chain+0x68>
 8008962:	2300      	movs	r3, #0
 8008964:	e03c      	b.n	80089e0 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8008966:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8008968:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800896c:	6979      	ldr	r1, [r7, #20]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff fe35 	bl	80085de <put_fat>
 8008974:	4603      	mov	r3, r0
 8008976:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d109      	bne.n	8008992 <create_chain+0xe4>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d006      	beq.n	8008992 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff fe28 	bl	80085de <put_fat>
 800898e:	4603      	mov	r3, r0
 8008990:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d11a      	bne.n	80089ce <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089aa:	d018      	beq.n	80089de <create_chain+0x130>
			fs->free_clust--;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80089b2:	1e5a      	subs	r2, r3, #1
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80089c0:	f043 0301 	orr.w	r3, r3, #1
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80089cc:	e007      	b.n	80089de <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d102      	bne.n	80089da <create_chain+0x12c>
 80089d4:	f04f 33ff 	mov.w	r3, #4294967295
 80089d8:	e000      	b.n	80089dc <create_chain+0x12e>
 80089da:	2301      	movs	r3, #1
 80089dc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80089de:	697b      	ldr	r3, [r7, #20]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80089f8:	3304      	adds	r3, #4
 80089fa:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	0a5b      	lsrs	r3, r3, #9
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8008a06:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a0e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	1d1a      	adds	r2, r3, #4
 8008a14:	613a      	str	r2, [r7, #16]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <clmt_clust+0x3c>
 8008a20:	2300      	movs	r3, #0
 8008a22:	e010      	b.n	8008a46 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d307      	bcc.n	8008a3c <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	3304      	adds	r3, #4
 8008a38:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a3a:	e7e9      	b.n	8008a10 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8008a3c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	4413      	add	r3, r2
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc80      	pop	{r7}
 8008a4e:	4770      	bx	lr

08008a50 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008a6a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d007      	beq.n	8008a82 <dir_sdi+0x32>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d301      	bcc.n	8008a86 <dir_sdi+0x36>
		return FR_INT_ERR;
 8008a82:	2302      	movs	r3, #2
 8008a84:	e074      	b.n	8008b70 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10c      	bne.n	8008aa6 <dir_sdi+0x56>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d105      	bne.n	8008aa6 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008aa0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008aa4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d111      	bne.n	8008ad0 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ab2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d301      	bcc.n	8008ac2 <dir_sdi+0x72>
			return FR_INT_ERR;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e056      	b.n	8008b70 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ac8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008acc:	613b      	str	r3, [r7, #16]
 8008ace:	e032      	b.n	8008b36 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ad6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008ada:	011b      	lsls	r3, r3, #4
 8008adc:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8008ade:	e01e      	b.n	8008b1e <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ae6:	6979      	ldr	r1, [r7, #20]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff fcbe 	bl	800846a <get_fat>
 8008aee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d101      	bne.n	8008afc <dir_sdi+0xac>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e039      	b.n	8008b70 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d907      	bls.n	8008b12 <dir_sdi+0xc2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d301      	bcc.n	8008b16 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8008b12:	2302      	movs	r3, #2
 8008b14:	e02c      	b.n	8008b70 <dir_sdi+0x120>
			idx -= ic;
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d2dc      	bcs.n	8008ae0 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b2c:	6979      	ldr	r1, [r7, #20]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff fc7a 	bl	8008428 <clust2sect>
 8008b34:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <dir_sdi+0xf8>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e013      	b.n	8008b70 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	091a      	lsrs	r2, r3, #4
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	441a      	add	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	015b      	lsls	r3, r3, #5
 8008b66:	441a      	add	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3718      	adds	r7, #24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008b78:	b590      	push	{r4, r7, lr}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8008b88:	3301      	adds	r3, #1
 8008b8a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <dir_next+0x26>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <dir_next+0x2a>
		return FR_NO_FILE;
 8008b9e:	2304      	movs	r3, #4
 8008ba0:	e0dd      	b.n	8008d5e <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f003 030f 	and.w	r3, r3, #15
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f040 80c6 	bne.w	8008d3a <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10b      	bne.n	8008bde <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008bcc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	f0c0 80b0 	bcc.w	8008d3a <dir_next+0x1c2>
				return FR_NO_FILE;
 8008bda:	2304      	movs	r3, #4
 8008bdc:	e0bf      	b.n	8008d5e <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	091b      	lsrs	r3, r3, #4
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8008be8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008bec:	3a01      	subs	r2, #1
 8008bee:	4013      	ands	r3, r2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f040 80a2 	bne.w	8008d3a <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008c02:	4619      	mov	r1, r3
 8008c04:	4610      	mov	r0, r2
 8008c06:	f7ff fc30 	bl	800846a <get_fat>
 8008c0a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d801      	bhi.n	8008c16 <dir_next+0x9e>
 8008c12:	2302      	movs	r3, #2
 8008c14:	e0a3      	b.n	8008d5e <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1c:	d101      	bne.n	8008c22 <dir_next+0xaa>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e09d      	b.n	8008d5e <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d374      	bcc.n	8008d1c <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <dir_next+0xc4>
 8008c38:	2304      	movs	r3, #4
 8008c3a:	e090      	b.n	8008d5e <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	f7ff fe2f 	bl	80088ae <create_chain>
 8008c50:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d101      	bne.n	8008c5c <dir_next+0xe4>
 8008c58:	2307      	movs	r3, #7
 8008c5a:	e080      	b.n	8008d5e <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d101      	bne.n	8008c66 <dir_next+0xee>
 8008c62:	2302      	movs	r3, #2
 8008c64:	e07b      	b.n	8008d5e <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d101      	bne.n	8008c72 <dir_next+0xfa>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e075      	b.n	8008d5e <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff fab1 	bl	80081e0 <sync_window>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <dir_next+0x110>
 8008c84:	2301      	movs	r3, #1
 8008c86:	e06a      	b.n	8008d5e <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff f895 	bl	8007dc4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8008ca6:	6979      	ldr	r1, [r7, #20]
 8008ca8:	4610      	mov	r0, r2
 8008caa:	f7ff fbbd 	bl	8008428 <clust2sect>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	613b      	str	r3, [r7, #16]
 8008cb8:	e01b      	b.n	8008cf2 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff fa87 	bl	80081e0 <sync_window>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <dir_next+0x164>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e040      	b.n	8008d5e <dir_next+0x1e6>
						dp->fs->winsect++;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ce2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8008ce6:	3201      	adds	r2, #1
 8008ce8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	613b      	str	r3, [r7, #16]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008cf8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d3da      	bcc.n	8008cba <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d0a:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	1a8a      	subs	r2, r1, r2
 8008d18:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d2a:	6979      	ldr	r1, [r7, #20]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff fb7b 	bl	8008428 <clust2sect>
 8008d32:	4602      	mov	r2, r0
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f003 030f 	and.w	r3, r3, #15
 8008d52:	015b      	lsls	r3, r3, #5
 8008d54:	441a      	add	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd90      	pop	{r4, r7, pc}

08008d66 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8008d70:	2100      	movs	r1, #0
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff fe6c 	bl	8008a50 <dir_sdi>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d131      	bne.n	8008de6 <dir_alloc+0x80>
		n = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f7ff fa6c 	bl	8008272 <move_window>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d11f      	bne.n	8008de4 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2be5      	cmp	r3, #229	; 0xe5
 8008dae:	d005      	beq.n	8008dbc <dir_alloc+0x56>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d107      	bne.n	8008dcc <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	60bb      	str	r3, [r7, #8]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d102      	bne.n	8008dd0 <dir_alloc+0x6a>
 8008dca:	e00c      	b.n	8008de6 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008dcc:	2300      	movs	r3, #0
 8008dce:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff fed0 	bl	8008b78 <dir_next>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0d1      	beq.n	8008d86 <dir_alloc+0x20>
 8008de2:	e000      	b.n	8008de6 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8008de4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	d101      	bne.n	8008df0 <dir_alloc+0x8a>
 8008dec:	2307      	movs	r3, #7
 8008dee:	73fb      	strb	r3, [r7, #15]
	return res;
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b085      	sub	sp, #20
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	331b      	adds	r3, #27
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	021b      	lsls	r3, r3, #8
 8008e0c:	b21a      	sxth	r2, r3
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	331a      	adds	r3, #26
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	b21b      	sxth	r3, r3
 8008e16:	4313      	orrs	r3, r2
 8008e18:	b21b      	sxth	r3, r3
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d10f      	bne.n	8008e48 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	3315      	adds	r3, #21
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	b21a      	sxth	r2, r3
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	3314      	adds	r3, #20
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	b21b      	sxth	r3, r3
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	b21b      	sxth	r3, r3
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	041b      	lsls	r3, r3, #16
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	60fb      	str	r3, [r7, #12]

	return cl;
 8008e48:	68fb      	ldr	r3, [r7, #12]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bc80      	pop	{r7}
 8008e52:	4770      	bx	lr

08008e54 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	331a      	adds	r3, #26
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	701a      	strb	r2, [r3, #0]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	0a1b      	lsrs	r3, r3, #8
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	331b      	adds	r3, #27
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	0c1a      	lsrs	r2, r3, #16
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3314      	adds	r3, #20
 8008e80:	b2d2      	uxtb	r2, r2
 8008e82:	701a      	strb	r2, [r3, #0]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	0c1b      	lsrs	r3, r3, #16
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	0a1b      	lsrs	r3, r3, #8
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3315      	adds	r3, #21
 8008e92:	b2d2      	uxtb	r2, r2
 8008e94:	701a      	strb	r2, [r3, #0]
}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bc80      	pop	{r7}
 8008e9e:	4770      	bx	lr

08008ea0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff fdd0 	bl	8008a50 <dir_sdi>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <dir_find+0x1e>
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	e03b      	b.n	8008f36 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008eca:	4619      	mov	r1, r3
 8008ecc:	4610      	mov	r0, r2
 8008ece:	f7ff f9d0 	bl	8008272 <move_window>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d128      	bne.n	8008f2e <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ee2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d102      	bne.n	8008ef6 <dir_find+0x56>
 8008ef0:	2304      	movs	r3, #4
 8008ef2:	75fb      	strb	r3, [r7, #23]
 8008ef4:	e01e      	b.n	8008f34 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	330b      	adds	r3, #11
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	f003 0308 	and.w	r3, r3, #8
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10a      	bne.n	8008f1a <dir_find+0x7a>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008f0a:	220b      	movs	r2, #11
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6938      	ldr	r0, [r7, #16]
 8008f10:	f7fe ff72 	bl	8007df8 <mem_cmp>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff fe2b 	bl	8008b78 <dir_next>
 8008f22:	4603      	mov	r3, r0
 8008f24:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0c8      	beq.n	8008ebe <dir_find+0x1e>
 8008f2c:	e002      	b.n	8008f34 <dir_find+0x94>
		if (res != FR_OK) break;
 8008f2e:	bf00      	nop
 8008f30:	e000      	b.n	8008f34 <dir_find+0x94>
			break;
 8008f32:	bf00      	nop

	return res;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b084      	sub	sp, #16
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008f46:	2101      	movs	r1, #1
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff ff0c 	bl	8008d66 <dir_alloc>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d126      	bne.n	8008fa6 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f7ff f983 	bl	8008272 <move_window>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d117      	bne.n	8008fa6 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe ff1f 	bl	8007dc4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008f92:	220b      	movs	r2, #11
 8008f94:	4619      	mov	r1, r3
 8008f96:	f7fe fef7 	bl	8007d88 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b088      	sub	sp, #32
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	e002      	b.n	8008fc8 <create_name+0x18>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b2f      	cmp	r3, #47	; 0x2f
 8008fce:	d0f8      	beq.n	8008fc2 <create_name+0x12>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b5c      	cmp	r3, #92	; 0x5c
 8008fd6:	d0f4      	beq.n	8008fc2 <create_name+0x12>
	sfn = dp->fn;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008fde:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008fe0:	220b      	movs	r2, #11
 8008fe2:	2120      	movs	r1, #32
 8008fe4:	68b8      	ldr	r0, [r7, #8]
 8008fe6:	f7fe feed 	bl	8007dc4 <mem_set>
	si = i = b = 0; ni = 8;
 8008fea:	2300      	movs	r3, #0
 8008fec:	77fb      	strb	r3, [r7, #31]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	613b      	str	r3, [r7, #16]
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	617b      	str	r3, [r7, #20]
 8008ff6:	2308      	movs	r3, #8
 8008ff8:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	1c5a      	adds	r2, r3, #1
 8008ffe:	617a      	str	r2, [r7, #20]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8009008:	7fbb      	ldrb	r3, [r7, #30]
 800900a:	2b20      	cmp	r3, #32
 800900c:	d953      	bls.n	80090b6 <create_name+0x106>
 800900e:	7fbb      	ldrb	r3, [r7, #30]
 8009010:	2b2f      	cmp	r3, #47	; 0x2f
 8009012:	d050      	beq.n	80090b6 <create_name+0x106>
 8009014:	7fbb      	ldrb	r3, [r7, #30]
 8009016:	2b5c      	cmp	r3, #92	; 0x5c
 8009018:	d04d      	beq.n	80090b6 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800901a:	7fbb      	ldrb	r3, [r7, #30]
 800901c:	2b2e      	cmp	r3, #46	; 0x2e
 800901e:	d003      	beq.n	8009028 <create_name+0x78>
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	429a      	cmp	r2, r3
 8009026:	d30f      	bcc.n	8009048 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	2b08      	cmp	r3, #8
 800902c:	d102      	bne.n	8009034 <create_name+0x84>
 800902e:	7fbb      	ldrb	r3, [r7, #30]
 8009030:	2b2e      	cmp	r3, #46	; 0x2e
 8009032:	d001      	beq.n	8009038 <create_name+0x88>
 8009034:	2306      	movs	r3, #6
 8009036:	e073      	b.n	8009120 <create_name+0x170>
			i = 8; ni = 11;
 8009038:	2308      	movs	r3, #8
 800903a:	613b      	str	r3, [r7, #16]
 800903c:	230b      	movs	r3, #11
 800903e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8009040:	7ffb      	ldrb	r3, [r7, #31]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	77fb      	strb	r3, [r7, #31]
 8009046:	e035      	b.n	80090b4 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009048:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800904c:	2b00      	cmp	r3, #0
 800904e:	da08      	bge.n	8009062 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8009050:	7ffb      	ldrb	r3, [r7, #31]
 8009052:	f043 0303 	orr.w	r3, r3, #3
 8009056:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009058:	7fbb      	ldrb	r3, [r7, #30]
 800905a:	3b80      	subs	r3, #128	; 0x80
 800905c:	4a32      	ldr	r2, [pc, #200]	; (8009128 <create_name+0x178>)
 800905e:	5cd3      	ldrb	r3, [r2, r3]
 8009060:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8009062:	7fbb      	ldrb	r3, [r7, #30]
 8009064:	4619      	mov	r1, r3
 8009066:	4831      	ldr	r0, [pc, #196]	; (800912c <create_name+0x17c>)
 8009068:	f7fe feec 	bl	8007e44 <chk_chr>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <create_name+0xc6>
				return FR_INVALID_NAME;
 8009072:	2306      	movs	r3, #6
 8009074:	e054      	b.n	8009120 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8009076:	7fbb      	ldrb	r3, [r7, #30]
 8009078:	2b40      	cmp	r3, #64	; 0x40
 800907a:	d907      	bls.n	800908c <create_name+0xdc>
 800907c:	7fbb      	ldrb	r3, [r7, #30]
 800907e:	2b5a      	cmp	r3, #90	; 0x5a
 8009080:	d804      	bhi.n	800908c <create_name+0xdc>
				b |= 2;
 8009082:	7ffb      	ldrb	r3, [r7, #31]
 8009084:	f043 0302 	orr.w	r3, r3, #2
 8009088:	77fb      	strb	r3, [r7, #31]
 800908a:	e00c      	b.n	80090a6 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800908c:	7fbb      	ldrb	r3, [r7, #30]
 800908e:	2b60      	cmp	r3, #96	; 0x60
 8009090:	d909      	bls.n	80090a6 <create_name+0xf6>
 8009092:	7fbb      	ldrb	r3, [r7, #30]
 8009094:	2b7a      	cmp	r3, #122	; 0x7a
 8009096:	d806      	bhi.n	80090a6 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8009098:	7ffb      	ldrb	r3, [r7, #31]
 800909a:	f043 0301 	orr.w	r3, r3, #1
 800909e:	77fb      	strb	r3, [r7, #31]
 80090a0:	7fbb      	ldrb	r3, [r7, #30]
 80090a2:	3b20      	subs	r3, #32
 80090a4:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	1c5a      	adds	r2, r3, #1
 80090aa:	613a      	str	r2, [r7, #16]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	4413      	add	r3, r2
 80090b0:	7fba      	ldrb	r2, [r7, #30]
 80090b2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80090b4:	e7a1      	b.n	8008ffa <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	441a      	add	r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80090c0:	7fbb      	ldrb	r3, [r7, #30]
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d801      	bhi.n	80090ca <create_name+0x11a>
 80090c6:	2304      	movs	r3, #4
 80090c8:	e000      	b.n	80090cc <create_name+0x11c>
 80090ca:	2300      	movs	r3, #0
 80090cc:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <create_name+0x128>
 80090d4:	2306      	movs	r3, #6
 80090d6:	e023      	b.n	8009120 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	2be5      	cmp	r3, #229	; 0xe5
 80090de:	d102      	bne.n	80090e6 <create_name+0x136>
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2205      	movs	r2, #5
 80090e4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	2b08      	cmp	r3, #8
 80090ea:	d102      	bne.n	80090f2 <create_name+0x142>
 80090ec:	7ffb      	ldrb	r3, [r7, #31]
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80090f2:	7ffb      	ldrb	r3, [r7, #31]
 80090f4:	f003 0303 	and.w	r3, r3, #3
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d103      	bne.n	8009104 <create_name+0x154>
 80090fc:	7fbb      	ldrb	r3, [r7, #30]
 80090fe:	f043 0310 	orr.w	r3, r3, #16
 8009102:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8009104:	7ffb      	ldrb	r3, [r7, #31]
 8009106:	f003 030c 	and.w	r3, r3, #12
 800910a:	2b04      	cmp	r3, #4
 800910c:	d103      	bne.n	8009116 <create_name+0x166>
 800910e:	7fbb      	ldrb	r3, [r7, #30]
 8009110:	f043 0308 	orr.w	r3, r3, #8
 8009114:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	330b      	adds	r3, #11
 800911a:	7fba      	ldrb	r2, [r7, #30]
 800911c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800911e:	2300      	movs	r3, #0
#endif
}
 8009120:	4618      	mov	r0, r3
 8009122:	3720      	adds	r7, #32
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	0800bfac 	.word	0x0800bfac
 800912c:	0800aa3c 	.word	0x0800aa3c

08009130 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	2b2f      	cmp	r3, #47	; 0x2f
 8009140:	d003      	beq.n	800914a <follow_path+0x1a>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b5c      	cmp	r3, #92	; 0x5c
 8009148:	d102      	bne.n	8009150 <follow_path+0x20>
		path++;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	3301      	adds	r3, #1
 800914e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b1f      	cmp	r3, #31
 800915e:	d80a      	bhi.n	8009176 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8009160:	2100      	movs	r1, #0
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff fc74 	bl	8008a50 <dir_sdi>
 8009168:	4603      	mov	r3, r0
 800916a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009174:	e045      	b.n	8009202 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009176:	463b      	mov	r3, r7
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff ff18 	bl	8008fb0 <create_name>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d136      	bne.n	80091f8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff fe88 	bl	8008ea0 <dir_find>
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800919a:	7adb      	ldrb	r3, [r3, #11]
 800919c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00a      	beq.n	80091ba <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	d128      	bne.n	80091fc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	f003 0304 	and.w	r3, r3, #4
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d123      	bne.n	80091fc <follow_path+0xcc>
 80091b4:	2305      	movs	r3, #5
 80091b6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80091b8:	e020      	b.n	80091fc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	f003 0304 	and.w	r3, r3, #4
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d11d      	bne.n	8009200 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091ca:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	330b      	adds	r3, #11
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	f003 0310 	and.w	r3, r3, #16
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d102      	bne.n	80091e0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80091da:	2305      	movs	r3, #5
 80091dc:	73fb      	strb	r3, [r7, #15]
 80091de:	e010      	b.n	8009202 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091e6:	68b9      	ldr	r1, [r7, #8]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7ff fe06 	bl	8008dfa <ld_clust>
 80091ee:	4602      	mov	r2, r0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80091f6:	e7be      	b.n	8009176 <follow_path+0x46>
			if (res != FR_OK) break;
 80091f8:	bf00      	nop
 80091fa:	e002      	b.n	8009202 <follow_path+0xd2>
				break;
 80091fc:	bf00      	nop
 80091fe:	e000      	b.n	8009202 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009200:	bf00      	nop
		}
	}

	return res;
 8009202:	7bfb      	ldrb	r3, [r7, #15]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009214:	f04f 33ff 	mov.w	r3, #4294967295
 8009218:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d031      	beq.n	8009286 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	e002      	b.n	8009230 <get_ldnumber+0x24>
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	3301      	adds	r3, #1
 800922e:	617b      	str	r3, [r7, #20]
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b20      	cmp	r3, #32
 8009236:	d903      	bls.n	8009240 <get_ldnumber+0x34>
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b3a      	cmp	r3, #58	; 0x3a
 800923e:	d1f4      	bne.n	800922a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b3a      	cmp	r3, #58	; 0x3a
 8009246:	d11c      	bne.n	8009282 <get_ldnumber+0x76>
			tp = *path;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	60fa      	str	r2, [r7, #12]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	3b30      	subs	r3, #48	; 0x30
 8009258:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b09      	cmp	r3, #9
 800925e:	d80e      	bhi.n	800927e <get_ldnumber+0x72>
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	429a      	cmp	r2, r3
 8009266:	d10a      	bne.n	800927e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d107      	bne.n	800927e <get_ldnumber+0x72>
					vol = (int)i;
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	3301      	adds	r3, #1
 8009276:	617b      	str	r3, [r7, #20]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	e002      	b.n	8009288 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009282:	2300      	movs	r3, #0
 8009284:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009286:	693b      	ldr	r3, [r7, #16]
}
 8009288:	4618      	mov	r0, r3
 800928a:	371c      	adds	r7, #28
 800928c:	46bd      	mov	sp, r7
 800928e:	bc80      	pop	{r7}
 8009290:	4770      	bx	lr
	...

08009294 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ac:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7fe ffdd 	bl	8008272 <move_window>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <check_fs+0x2e>
		return 3;
 80092be:	2303      	movs	r3, #3
 80092c0:	e04a      	b.n	8009358 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80092c8:	3301      	adds	r3, #1
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	021b      	lsls	r3, r3, #8
 80092ce:	b21a      	sxth	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80092d6:	b21b      	sxth	r3, r3
 80092d8:	4313      	orrs	r3, r2
 80092da:	b21b      	sxth	r3, r3
 80092dc:	4a20      	ldr	r2, [pc, #128]	; (8009360 <check_fs+0xcc>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d001      	beq.n	80092e6 <check_fs+0x52>
		return 2;
 80092e2:	2302      	movs	r3, #2
 80092e4:	e038      	b.n	8009358 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	3336      	adds	r3, #54	; 0x36
 80092ea:	3303      	adds	r3, #3
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	061a      	lsls	r2, r3, #24
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3336      	adds	r3, #54	; 0x36
 80092f4:	3302      	adds	r3, #2
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	041b      	lsls	r3, r3, #16
 80092fa:	4313      	orrs	r3, r2
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	3236      	adds	r2, #54	; 0x36
 8009300:	3201      	adds	r2, #1
 8009302:	7812      	ldrb	r2, [r2, #0]
 8009304:	0212      	lsls	r2, r2, #8
 8009306:	4313      	orrs	r3, r2
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800930e:	4313      	orrs	r3, r2
 8009310:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009314:	4a13      	ldr	r2, [pc, #76]	; (8009364 <check_fs+0xd0>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d101      	bne.n	800931e <check_fs+0x8a>
		return 0;
 800931a:	2300      	movs	r3, #0
 800931c:	e01c      	b.n	8009358 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3352      	adds	r3, #82	; 0x52
 8009322:	3303      	adds	r3, #3
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	061a      	lsls	r2, r3, #24
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3352      	adds	r3, #82	; 0x52
 800932c:	3302      	adds	r3, #2
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	041b      	lsls	r3, r3, #16
 8009332:	4313      	orrs	r3, r2
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	3252      	adds	r2, #82	; 0x52
 8009338:	3201      	adds	r2, #1
 800933a:	7812      	ldrb	r2, [r2, #0]
 800933c:	0212      	lsls	r2, r2, #8
 800933e:	4313      	orrs	r3, r2
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8009346:	4313      	orrs	r3, r2
 8009348:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800934c:	4a05      	ldr	r2, [pc, #20]	; (8009364 <check_fs+0xd0>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d101      	bne.n	8009356 <check_fs+0xc2>
		return 0;
 8009352:	2300      	movs	r3, #0
 8009354:	e000      	b.n	8009358 <check_fs+0xc4>

	return 1;
 8009356:	2301      	movs	r3, #1
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	ffffaa55 	.word	0xffffaa55
 8009364:	00544146 	.word	0x00544146

08009368 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b096      	sub	sp, #88	; 0x58
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800937c:	68b8      	ldr	r0, [r7, #8]
 800937e:	f7ff ff45 	bl	800920c <get_ldnumber>
 8009382:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009386:	2b00      	cmp	r3, #0
 8009388:	da01      	bge.n	800938e <find_volume+0x26>
 800938a:	230b      	movs	r3, #11
 800938c:	e2a8      	b.n	80098e0 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800938e:	4a9d      	ldr	r2, [pc, #628]	; (8009604 <find_volume+0x29c>)
 8009390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009396:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <find_volume+0x3a>
 800939e:	230c      	movs	r3, #12
 80093a0:	e29e      	b.n	80098e0 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093a6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80093a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d01b      	beq.n	80093ea <find_volume+0x82>
		stat = disk_status(fs->drv);
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fe fc47 	bl	8007c4c <disk_status>
 80093be:	4603      	mov	r3, r0
 80093c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80093c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10c      	bne.n	80093ea <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d007      	beq.n	80093e6 <find_volume+0x7e>
 80093d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093da:	f003 0304 	and.w	r3, r3, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80093e2:	230a      	movs	r3, #10
 80093e4:	e27c      	b.n	80098e0 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 80093e6:	2300      	movs	r3, #0
 80093e8:	e27a      	b.n	80098e0 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80093ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80093f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fc3c 	bl	8007c80 <disk_initialize>
 8009408:	4603      	mov	r3, r0
 800940a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800940e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800941a:	2303      	movs	r3, #3
 800941c:	e260      	b.n	80098e0 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d007      	beq.n	8009434 <find_volume+0xcc>
 8009424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8009430:	230a      	movs	r3, #10
 8009432:	e255      	b.n	80098e0 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8009438:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800943a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800943c:	f7ff ff2a 	bl	8009294 <check_fs>
 8009440:	4603      	mov	r3, r0
 8009442:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8009446:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800944a:	2b01      	cmp	r3, #1
 800944c:	d153      	bne.n	80094f6 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800944e:	2300      	movs	r3, #0
 8009450:	643b      	str	r3, [r7, #64]	; 0x40
 8009452:	e028      	b.n	80094a6 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8009454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009458:	011b      	lsls	r3, r3, #4
 800945a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800945e:	4413      	add	r3, r2
 8009460:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	3304      	adds	r3, #4
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d012      	beq.n	8009492 <find_volume+0x12a>
 800946c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946e:	330b      	adds	r3, #11
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	061a      	lsls	r2, r3, #24
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	330a      	adds	r3, #10
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	041b      	lsls	r3, r3, #16
 800947c:	4313      	orrs	r3, r2
 800947e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009480:	3209      	adds	r2, #9
 8009482:	7812      	ldrb	r2, [r2, #0]
 8009484:	0212      	lsls	r2, r2, #8
 8009486:	4313      	orrs	r3, r2
 8009488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800948a:	3208      	adds	r2, #8
 800948c:	7812      	ldrb	r2, [r2, #0]
 800948e:	431a      	orrs	r2, r3
 8009490:	e000      	b.n	8009494 <find_volume+0x12c>
 8009492:	2200      	movs	r2, #0
 8009494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	3358      	adds	r3, #88	; 0x58
 800949a:	443b      	add	r3, r7
 800949c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80094a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a2:	3301      	adds	r3, #1
 80094a4:	643b      	str	r3, [r7, #64]	; 0x40
 80094a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d9d3      	bls.n	8009454 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80094ac:	2300      	movs	r3, #0
 80094ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80094b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <find_volume+0x154>
 80094b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094b8:	3b01      	subs	r3, #1
 80094ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80094bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	3358      	adds	r3, #88	; 0x58
 80094c2:	443b      	add	r3, r7
 80094c4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80094c8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80094ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <find_volume+0x174>
 80094d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094d4:	f7ff fede 	bl	8009294 <check_fs>
 80094d8:	4603      	mov	r3, r0
 80094da:	e000      	b.n	80094de <find_volume+0x176>
 80094dc:	2302      	movs	r3, #2
 80094de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80094e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d005      	beq.n	80094f6 <find_volume+0x18e>
 80094ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ec:	3301      	adds	r3, #1
 80094ee:	643b      	str	r3, [r7, #64]	; 0x40
 80094f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d9e2      	bls.n	80094bc <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80094f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d101      	bne.n	8009502 <find_volume+0x19a>
 80094fe:	2301      	movs	r3, #1
 8009500:	e1ee      	b.n	80098e0 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009502:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <find_volume+0x1a6>
 800950a:	230d      	movs	r3, #13
 800950c:	e1e8      	b.n	80098e0 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800950e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009510:	7b1b      	ldrb	r3, [r3, #12]
 8009512:	021b      	lsls	r3, r3, #8
 8009514:	b21a      	sxth	r2, r3
 8009516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009518:	7adb      	ldrb	r3, [r3, #11]
 800951a:	b21b      	sxth	r3, r3
 800951c:	4313      	orrs	r3, r2
 800951e:	b21b      	sxth	r3, r3
 8009520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009524:	d001      	beq.n	800952a <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8009526:	230d      	movs	r3, #13
 8009528:	e1da      	b.n	80098e0 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952c:	7ddb      	ldrb	r3, [r3, #23]
 800952e:	021b      	lsls	r3, r3, #8
 8009530:	b21a      	sxth	r2, r3
 8009532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009534:	7d9b      	ldrb	r3, [r3, #22]
 8009536:	b21b      	sxth	r3, r3
 8009538:	4313      	orrs	r3, r2
 800953a:	b21b      	sxth	r3, r3
 800953c:	b29b      	uxth	r3, r3
 800953e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8009540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009542:	2b00      	cmp	r3, #0
 8009544:	d112      	bne.n	800956c <find_volume+0x204>
 8009546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009548:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800954c:	061a      	lsls	r2, r3, #24
 800954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009550:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009554:	041b      	lsls	r3, r3, #16
 8009556:	4313      	orrs	r3, r2
 8009558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800955a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800955e:	0212      	lsls	r2, r2, #8
 8009560:	4313      	orrs	r3, r2
 8009562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009564:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8009568:	4313      	orrs	r3, r2
 800956a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009570:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009576:	7c1a      	ldrb	r2, [r3, #16]
 8009578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8009584:	2b01      	cmp	r3, #1
 8009586:	d006      	beq.n	8009596 <find_volume+0x22e>
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800958e:	2b02      	cmp	r3, #2
 8009590:	d001      	beq.n	8009596 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8009592:	230d      	movs	r3, #13
 8009594:	e1a4      	b.n	80098e0 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800959c:	461a      	mov	r2, r3
 800959e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a0:	fb02 f303 	mul.w	r3, r2, r3
 80095a4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80095a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a8:	7b5a      	ldrb	r2, [r3, #13]
 80095aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ac:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80095b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00a      	beq.n	80095d0 <find_volume+0x268>
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80095c0:	461a      	mov	r2, r3
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80095c8:	3b01      	subs	r3, #1
 80095ca:	4013      	ands	r3, r2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 80095d0:	230d      	movs	r3, #13
 80095d2:	e185      	b.n	80098e0 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	7c9b      	ldrb	r3, [r3, #18]
 80095d8:	021b      	lsls	r3, r3, #8
 80095da:	b21a      	sxth	r2, r3
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	7c5b      	ldrb	r3, [r3, #17]
 80095e0:	b21b      	sxth	r3, r3
 80095e2:	4313      	orrs	r3, r2
 80095e4:	b21b      	sxth	r3, r3
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ea:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80095ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80095f4:	f003 030f 	and.w	r3, r3, #15
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d004      	beq.n	8009608 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80095fe:	230d      	movs	r3, #13
 8009600:	e16e      	b.n	80098e0 <find_volume+0x578>
 8009602:	bf00      	nop
 8009604:	20001228 	.word	0x20001228

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	7d1b      	ldrb	r3, [r3, #20]
 800960c:	021b      	lsls	r3, r3, #8
 800960e:	b21a      	sxth	r2, r3
 8009610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009612:	7cdb      	ldrb	r3, [r3, #19]
 8009614:	b21b      	sxth	r3, r3
 8009616:	4313      	orrs	r3, r2
 8009618:	b21b      	sxth	r3, r3
 800961a:	b29b      	uxth	r3, r3
 800961c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800961e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009620:	2b00      	cmp	r3, #0
 8009622:	d112      	bne.n	800964a <find_volume+0x2e2>
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800962a:	061a      	lsls	r2, r3, #24
 800962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009632:	041b      	lsls	r3, r3, #16
 8009634:	4313      	orrs	r3, r2
 8009636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009638:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800963c:	0212      	lsls	r2, r2, #8
 800963e:	4313      	orrs	r3, r2
 8009640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009642:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009646:	4313      	orrs	r3, r2
 8009648:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	7bdb      	ldrb	r3, [r3, #15]
 800964e:	021b      	lsls	r3, r3, #8
 8009650:	b21a      	sxth	r2, r3
 8009652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009654:	7b9b      	ldrb	r3, [r3, #14]
 8009656:	b21b      	sxth	r3, r3
 8009658:	4313      	orrs	r3, r2
 800965a:	b21b      	sxth	r3, r3
 800965c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800965e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <find_volume+0x300>
 8009664:	230d      	movs	r3, #13
 8009666:	e13b      	b.n	80098e0 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8009668:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800966a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800966c:	4413      	add	r3, r2
 800966e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009670:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8009674:	0912      	lsrs	r2, r2, #4
 8009676:	b292      	uxth	r2, r2
 8009678:	4413      	add	r3, r2
 800967a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800967c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800967e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009680:	429a      	cmp	r2, r3
 8009682:	d201      	bcs.n	8009688 <find_volume+0x320>
 8009684:	230d      	movs	r3, #13
 8009686:	e12b      	b.n	80098e0 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8009688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800968a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009690:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009694:	fbb3 f3f2 	udiv	r3, r3, r2
 8009698:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <find_volume+0x33c>
 80096a0:	230d      	movs	r3, #13
 80096a2:	e11d      	b.n	80098e0 <find_volume+0x578>
	fmt = FS_FAT12;
 80096a4:	2301      	movs	r3, #1
 80096a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d902      	bls.n	80096ba <find_volume+0x352>
 80096b4:	2302      	movs	r3, #2
 80096b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d902      	bls.n	80096ca <find_volume+0x362>
 80096c4:	2303      	movs	r3, #3
 80096c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80096ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096cc:	1c9a      	adds	r2, r3, #2
 80096ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80096d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80096dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80096de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096e0:	441a      	add	r2, r3
 80096e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80096e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	441a      	add	r2, r3
 80096ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80096f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d121      	bne.n	8009740 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80096fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fe:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <find_volume+0x3a2>
 8009706:	230d      	movs	r3, #13
 8009708:	e0ea      	b.n	80098e0 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009710:	061a      	lsls	r2, r3, #24
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	4313      	orrs	r3, r2
 800971c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800971e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8009722:	0212      	lsls	r2, r2, #8
 8009724:	4313      	orrs	r3, r2
 8009726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009728:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800972c:	431a      	orrs	r2, r3
 800972e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009730:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	647b      	str	r3, [r7, #68]	; 0x44
 800973e:	e025      	b.n	800978c <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009742:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <find_volume+0x3e6>
 800974a:	230d      	movs	r3, #13
 800974c:	e0c8      	b.n	80098e0 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800974e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009750:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009756:	441a      	add	r2, r3
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800975e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009762:	2b02      	cmp	r3, #2
 8009764:	d104      	bne.n	8009770 <find_volume+0x408>
 8009766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009768:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	e00c      	b.n	800978a <find_volume+0x422>
 8009770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009772:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009776:	4613      	mov	r3, r2
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	4413      	add	r3, r2
 800977c:	085a      	lsrs	r2, r3, #1
 800977e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009780:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800978a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009794:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009798:	0a5b      	lsrs	r3, r3, #9
 800979a:	429a      	cmp	r2, r3
 800979c:	d201      	bcs.n	80097a2 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 800979e:	230d      	movs	r3, #13
 80097a0:	e09e      	b.n	80098e0 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	f04f 32ff 	mov.w	r2, #4294967295
 80097a8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80097b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80097b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ba:	2280      	movs	r2, #128	; 0x80
 80097bc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80097c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d177      	bne.n	80098b8 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80097ce:	021b      	lsls	r3, r3, #8
 80097d0:	b21a      	sxth	r2, r3
 80097d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097d8:	b21b      	sxth	r3, r3
 80097da:	4313      	orrs	r3, r2
 80097dc:	b21b      	sxth	r3, r3
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d16a      	bne.n	80098b8 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 80097e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097e4:	3301      	adds	r3, #1
 80097e6:	4619      	mov	r1, r3
 80097e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097ea:	f7fe fd42 	bl	8008272 <move_window>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d161      	bne.n	80098b8 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80097fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fe:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8009802:	021b      	lsls	r3, r3, #8
 8009804:	b21a      	sxth	r2, r3
 8009806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009808:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800980c:	b21b      	sxth	r3, r3
 800980e:	4313      	orrs	r3, r2
 8009810:	b21b      	sxth	r3, r3
 8009812:	4a35      	ldr	r2, [pc, #212]	; (80098e8 <find_volume+0x580>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d14f      	bne.n	80098b8 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	78db      	ldrb	r3, [r3, #3]
 800981c:	061a      	lsls	r2, r3, #24
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	789b      	ldrb	r3, [r3, #2]
 8009822:	041b      	lsls	r3, r3, #16
 8009824:	4313      	orrs	r3, r2
 8009826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009828:	7852      	ldrb	r2, [r2, #1]
 800982a:	0212      	lsls	r2, r2, #8
 800982c:	4313      	orrs	r3, r2
 800982e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009830:	7812      	ldrb	r2, [r2, #0]
 8009832:	4313      	orrs	r3, r2
 8009834:	4a2d      	ldr	r2, [pc, #180]	; (80098ec <find_volume+0x584>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d13e      	bne.n	80098b8 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800983a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8009840:	061a      	lsls	r2, r3, #24
 8009842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009844:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8009848:	041b      	lsls	r3, r3, #16
 800984a:	4313      	orrs	r3, r2
 800984c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800984e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8009852:	0212      	lsls	r2, r2, #8
 8009854:	4313      	orrs	r3, r2
 8009856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009858:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800985c:	4313      	orrs	r3, r2
 800985e:	4a24      	ldr	r2, [pc, #144]	; (80098f0 <find_volume+0x588>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d129      	bne.n	80098b8 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8009864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009866:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800986a:	061a      	lsls	r2, r3, #24
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8009872:	041b      	lsls	r3, r3, #16
 8009874:	4313      	orrs	r3, r2
 8009876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009878:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800987c:	0212      	lsls	r2, r2, #8
 800987e:	4313      	orrs	r3, r2
 8009880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009882:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8009886:	431a      	orrs	r2, r3
 8009888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800988e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009890:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8009894:	061a      	lsls	r2, r3, #24
 8009896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009898:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800989c:	041b      	lsls	r3, r3, #16
 800989e:	4313      	orrs	r3, r2
 80098a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098a2:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80098a6:	0212      	lsls	r2, r2, #8
 80098a8:	4313      	orrs	r3, r2
 80098aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098ac:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80098b0:	431a      	orrs	r2, r3
 80098b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80098be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80098c2:	4b0c      	ldr	r3, [pc, #48]	; (80098f4 <find_volume+0x58c>)
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	3301      	adds	r3, #1
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <find_volume+0x58c>)
 80098cc:	801a      	strh	r2, [r3, #0]
 80098ce:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <find_volume+0x58c>)
 80098d0:	881a      	ldrh	r2, [r3, #0]
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80098d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098da:	f7fe fc57 	bl	800818c <clear_lock>
#endif

	return FR_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3758      	adds	r7, #88	; 0x58
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	ffffaa55 	.word	0xffffaa55
 80098ec:	41615252 	.word	0x41615252
 80098f0:	61417272 	.word	0x61417272
 80098f4:	2000122c 	.word	0x2000122c

080098f8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d022      	beq.n	8009950 <validate+0x58>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01d      	beq.n	8009950 <validate+0x58>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800991a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800991e:	2b00      	cmp	r3, #0
 8009920:	d016      	beq.n	8009950 <validate+0x58>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009928:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8009932:	429a      	cmp	r2, r3
 8009934:	d10c      	bne.n	8009950 <validate+0x58>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800993c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009940:	4618      	mov	r0, r3
 8009942:	f7fe f983 	bl	8007c4c <disk_status>
 8009946:	4603      	mov	r3, r0
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8009950:	2309      	movs	r3, #9
 8009952:	e000      	b.n	8009956 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b088      	sub	sp, #32
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	4613      	mov	r3, r2
 800996c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8009972:	f107 0310 	add.w	r3, r7, #16
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff fc48 	bl	800920c <get_ldnumber>
 800997c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	2b00      	cmp	r3, #0
 8009982:	da01      	bge.n	8009988 <f_mount+0x28>
 8009984:	230b      	movs	r3, #11
 8009986:	e02d      	b.n	80099e4 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009988:	4a18      	ldr	r2, [pc, #96]	; (80099ec <f_mount+0x8c>)
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009990:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d006      	beq.n	80099a6 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8009998:	69b8      	ldr	r0, [r7, #24]
 800999a:	f7fe fbf7 	bl	800818c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	490d      	ldr	r1, [pc, #52]	; (80099ec <f_mount+0x8c>)
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <f_mount+0x6a>
 80099c4:	79fb      	ldrb	r3, [r7, #7]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d001      	beq.n	80099ce <f_mount+0x6e>
 80099ca:	2300      	movs	r3, #0
 80099cc:	e00a      	b.n	80099e4 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80099ce:	f107 0108 	add.w	r1, r7, #8
 80099d2:	f107 030c 	add.w	r3, r7, #12
 80099d6:	2200      	movs	r2, #0
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff fcc5 	bl	8009368 <find_volume>
 80099de:	4603      	mov	r3, r0
 80099e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3720      	adds	r7, #32
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	20001228 	.word	0x20001228

080099f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099fc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009a00:	6018      	str	r0, [r3, #0]
 8009a02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a06:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8009a0a:	6019      	str	r1, [r3, #0]
 8009a0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a10:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009a14:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8009a16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a1a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d101      	bne.n	8009a28 <f_open+0x38>
 8009a24:	2309      	movs	r3, #9
 8009a26:	e257      	b.n	8009ed8 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8009a28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a2c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8009a38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a3c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009a40:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8009a44:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8009a48:	7812      	ldrb	r2, [r2, #0]
 8009a4a:	f002 021f 	and.w	r2, r2, #31
 8009a4e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8009a50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a54:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	f023 0301 	bic.w	r3, r3, #1
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	f107 0108 	add.w	r1, r7, #8
 8009a64:	f107 0320 	add.w	r3, r7, #32
 8009a68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7ff fc7b 	bl	8009368 <find_volume>
 8009a72:	4603      	mov	r3, r0
 8009a74:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8009a78:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f040 8229 	bne.w	8009ed4 <f_open+0x4e4>
		INIT_BUF(dj);
 8009a82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a86:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009a8a:	f107 0214 	add.w	r2, r7, #20
 8009a8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8009a92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a96:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	f107 0320 	add.w	r3, r7, #32
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7ff fb44 	bl	8009130 <follow_path>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8009aae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ab2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009ab6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009aba:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009abe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d11d      	bne.n	8009b02 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8009ac6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d103      	bne.n	8009ad6 <f_open+0xe6>
				res = FR_INVALID_NAME;
 8009ace:	2306      	movs	r3, #6
 8009ad0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8009ad4:	e015      	b.n	8009b02 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ad6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ada:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	f023 0301 	bic.w	r3, r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	bf14      	ite	ne
 8009ae8:	2301      	movne	r3, #1
 8009aea:	2300      	moveq	r3, #0
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	461a      	mov	r2, r3
 8009af0:	f107 0320 	add.w	r3, r7, #32
 8009af4:	4611      	mov	r1, r2
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe f9be 	bl	8007e78 <chk_lock>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009b02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b06:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	f003 031c 	and.w	r3, r3, #28
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 80e6 	beq.w	8009ce2 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8009b16:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d027      	beq.n	8009b6e <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8009b1e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009b22:	2b04      	cmp	r3, #4
 8009b24:	d10e      	bne.n	8009b44 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009b26:	f7fe fa13 	bl	8007f50 <enq_lock>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d006      	beq.n	8009b3e <f_open+0x14e>
 8009b30:	f107 0320 	add.w	r3, r7, #32
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7ff fa02 	bl	8008f3e <dir_register>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	e000      	b.n	8009b40 <f_open+0x150>
 8009b3e:	2312      	movs	r3, #18
 8009b40:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009b44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b48:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009b4c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8009b50:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8009b54:	7812      	ldrb	r2, [r2, #0]
 8009b56:	f042 0208 	orr.w	r2, r2, #8
 8009b5a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8009b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b60:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009b64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b68:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8009b6c:	e017      	b.n	8009b9e <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009b6e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009b72:	330b      	adds	r3, #11
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	f003 0311 	and.w	r3, r3, #17
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <f_open+0x196>
					res = FR_DENIED;
 8009b7e:	2307      	movs	r3, #7
 8009b80:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8009b84:	e00b      	b.n	8009b9e <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8009b86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b8a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	f003 0304 	and.w	r3, r3, #4
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <f_open+0x1ae>
						res = FR_EXIST;
 8009b98:	2308      	movs	r3, #8
 8009b9a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009b9e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f040 80c1 	bne.w	8009d2a <f_open+0x33a>
 8009ba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bac:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	f003 0308 	and.w	r3, r3, #8
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 80b7 	beq.w	8009d2a <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8009bbc:	f7fd ffe4 	bl	8007b88 <get_fattime>
 8009bc0:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009bc4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009bc8:	330e      	adds	r3, #14
 8009bca:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8009bce:	b2d2      	uxtb	r2, r2
 8009bd0:	701a      	strb	r2, [r3, #0]
 8009bd2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	0a1b      	lsrs	r3, r3, #8
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009be0:	330f      	adds	r3, #15
 8009be2:	b2d2      	uxtb	r2, r2
 8009be4:	701a      	strb	r2, [r3, #0]
 8009be6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009bea:	0c1a      	lsrs	r2, r3, #16
 8009bec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009bf0:	3310      	adds	r3, #16
 8009bf2:	b2d2      	uxtb	r2, r2
 8009bf4:	701a      	strb	r2, [r3, #0]
 8009bf6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009bfa:	0e1a      	lsrs	r2, r3, #24
 8009bfc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009c00:	3311      	adds	r3, #17
 8009c02:	b2d2      	uxtb	r2, r2
 8009c04:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8009c06:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009c0a:	330b      	adds	r3, #11
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8009c10:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009c14:	331c      	adds	r3, #28
 8009c16:	2200      	movs	r2, #0
 8009c18:	701a      	strb	r2, [r3, #0]
 8009c1a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009c1e:	331d      	adds	r3, #29
 8009c20:	2200      	movs	r2, #0
 8009c22:	701a      	strb	r2, [r3, #0]
 8009c24:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009c28:	331e      	adds	r3, #30
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	701a      	strb	r2, [r3, #0]
 8009c2e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009c32:	331f      	adds	r3, #31
 8009c34:	2200      	movs	r2, #0
 8009c36:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009c38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c3c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009c40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c44:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7ff f8d6 	bl	8008dfa <ld_clust>
 8009c4e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8009c52:	2100      	movs	r1, #0
 8009c54:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8009c58:	f7ff f8fc 	bl	8008e54 <st_clust>
				dj.fs->wflag = 1;
 8009c5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c60:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009c64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8009c6e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d059      	beq.n	8009d2a <f_open+0x33a>
					dw = dj.fs->winsect;
 8009c76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c7a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009c7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c82:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009c86:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8009c8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c8e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c96:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fdad 	bl	80087fa <remove_chain>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8009ca6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d13d      	bne.n	8009d2a <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009cae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cb2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009cb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009cba:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8009cbe:	3a01      	subs	r2, #1
 8009cc0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8009cc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cc8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009ccc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009cd0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fe facc 	bl	8008272 <move_window>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8009ce0:	e023      	b.n	8009d2a <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8009ce2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d11f      	bne.n	8009d2a <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8009cea:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009cee:	330b      	adds	r3, #11
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	f003 0310 	and.w	r3, r3, #16
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d003      	beq.n	8009d02 <f_open+0x312>
					res = FR_NO_FILE;
 8009cfa:	2304      	movs	r3, #4
 8009cfc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8009d00:	e013      	b.n	8009d2a <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8009d02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d06:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00a      	beq.n	8009d2a <f_open+0x33a>
 8009d14:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009d18:	330b      	adds	r3, #11
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	f003 0301 	and.w	r3, r3, #1
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <f_open+0x33a>
						res = FR_DENIED;
 8009d24:	2307      	movs	r3, #7
 8009d26:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8009d2a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d153      	bne.n	8009dda <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009d32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d36:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	f003 0308 	and.w	r3, r3, #8
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00b      	beq.n	8009d5c <f_open+0x36c>
				mode |= FA__WRITTEN;
 8009d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d48:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009d4c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8009d50:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8009d54:	7812      	ldrb	r2, [r2, #0]
 8009d56:	f042 0220 	orr.w	r2, r2, #32
 8009d5a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d60:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009d64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d68:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009d6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d70:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8009d7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d7e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8009d88:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d90:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	f023 0301 	bic.w	r3, r3, #1
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bf14      	ite	ne
 8009d9e:	2301      	movne	r3, #1
 8009da0:	2300      	moveq	r3, #0
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	461a      	mov	r2, r3
 8009da6:	f107 0320 	add.w	r3, r7, #32
 8009daa:	4611      	mov	r1, r2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fe f8f3 	bl	8007f98 <inc_lock>
 8009db2:	4602      	mov	r2, r0
 8009db4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009db8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8009dc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dc6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d102      	bne.n	8009dda <f_open+0x3ea>
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8009dda:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d178      	bne.n	8009ed4 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8009de2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009de6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8009df0:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8009df4:	7812      	ldrb	r2, [r2, #0]
 8009df6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8009dfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dfe:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009e0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e0e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009e12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009e16:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe ffed 	bl	8008dfa <ld_clust>
 8009e20:	4602      	mov	r2, r0
 8009e22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e26:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8009e30:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009e34:	331f      	adds	r3, #31
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	061a      	lsls	r2, r3, #24
 8009e3a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009e3e:	331e      	adds	r3, #30
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	041b      	lsls	r3, r3, #16
 8009e44:	4313      	orrs	r3, r2
 8009e46:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8009e4a:	321d      	adds	r2, #29
 8009e4c:	7812      	ldrb	r2, [r2, #0]
 8009e4e:	0212      	lsls	r2, r2, #8
 8009e50:	4313      	orrs	r3, r2
 8009e52:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8009e56:	321c      	adds	r2, #28
 8009e58:	7812      	ldrb	r2, [r2, #0]
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e60:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8009e6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e6e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8009e7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e7e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8009e8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e8e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8009e9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e9e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009ea2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009ea6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009eaa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8009eb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009eb8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ec2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8009ec6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009eca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8009ed4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b08c      	sub	sp, #48	; 0x30
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	60f8      	str	r0, [r7, #12]
 8009eea:	60b9      	str	r1, [r7, #8]
 8009eec:	607a      	str	r2, [r7, #4]
 8009eee:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7ff fcfc 	bl	80098f8 <validate>
 8009f00:	4603      	mov	r3, r0
 8009f02:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009f04:	7ffb      	ldrb	r3, [r7, #31]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <f_read+0x2c>
 8009f0a:	7ffb      	ldrb	r3, [r7, #31]
 8009f0c:	e150      	b.n	800a1b0 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d003      	beq.n	8009f20 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8009f1e:	e147      	b.n	800a1b0 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009f2e:	2307      	movs	r3, #7
 8009f30:	e13e      	b.n	800a1b0 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	f240 812d 	bls.w	800a1a6 <f_read+0x2c4>
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009f50:	e129      	b.n	800a1a6 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f040 80f2 	bne.w	800a146 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009f68:	0a5b      	lsrs	r3, r3, #9
 8009f6a:	b2da      	uxtb	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009f72:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009f76:	3b01      	subs	r3, #1
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d139      	bne.n	8009ff8 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d104      	bne.n	8009f98 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f96:	e018      	b.n	8009fca <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d008      	beq.n	8009fb4 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009fa8:	4619      	mov	r1, r3
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7fe fd1c 	bl	80089e8 <clmt_clust>
 8009fb0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009fb2:	e00a      	b.n	8009fca <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	f7fe fa51 	bl	800846a <get_fat>
 8009fc8:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d805      	bhi.n	8009fdc <f_read+0xfa>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009fd8:	2302      	movs	r3, #2
 8009fda:	e0e9      	b.n	800a1b0 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe2:	d105      	bne.n	8009ff0 <f_read+0x10e>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009fec:	2301      	movs	r3, #1
 8009fee:	e0df      	b.n	800a1b0 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a004:	4619      	mov	r1, r3
 800a006:	4610      	mov	r0, r2
 800a008:	f7fe fa0e 	bl	8008428 <clust2sect>
 800a00c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d105      	bne.n	800a020 <f_read+0x13e>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2202      	movs	r2, #2
 800a018:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a01c:	2302      	movs	r3, #2
 800a01e:	e0c7      	b.n	800a1b0 <f_read+0x2ce>
			sect += csect;
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	4413      	add	r3, r2
 800a026:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	0a5b      	lsrs	r3, r3, #9
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d046      	beq.n	800a0c2 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a034:	7dfa      	ldrb	r2, [r7, #23]
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	4413      	add	r3, r2
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a040:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a044:	4293      	cmp	r3, r2
 800a046:	d908      	bls.n	800a05a <f_read+0x178>
					cc = fp->fs->csize - csect;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a04e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a052:	461a      	mov	r2, r3
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a060:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	6a39      	ldr	r1, [r7, #32]
 800a06a:	f7fd fe2f 	bl	8007ccc <disk_read>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d005      	beq.n	800a080 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a07c:	2301      	movs	r3, #1
 800a07e:	e097      	b.n	800a1b0 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d015      	beq.n	800a0ba <f_read+0x1d8>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d90d      	bls.n	800a0ba <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	025b      	lsls	r3, r3, #9
 800a0aa:	6a3a      	ldr	r2, [r7, #32]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	68f9      	ldr	r1, [r7, #12]
 800a0b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fd fe67 	bl	8007d88 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0bc:	025b      	lsls	r3, r3, #9
 800a0be:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800a0c0:	e05b      	b.n	800a17a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d037      	beq.n	800a13e <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d01d      	beq.n	800a118 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a0e2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a0e6:	68f9      	ldr	r1, [r7, #12]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f7fd fe0c 	bl	8007d0c <disk_write>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d005      	beq.n	800a106 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a102:	2301      	movs	r3, #1
 800a104:	e054      	b.n	800a1b0 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a10c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a110:	b2da      	uxtb	r2, r3
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a11e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a122:	68f9      	ldr	r1, [r7, #12]
 800a124:	2301      	movs	r3, #1
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	f7fd fdd0 	bl	8007ccc <disk_read>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d005      	beq.n	800a13e <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a13a:	2301      	movs	r3, #1
 800a13c:	e038      	b.n	800a1b0 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a150:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a154:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800a156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d901      	bls.n	800a162 <f_read+0x280>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4413      	add	r3, r2
 800a170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a172:	4619      	mov	r1, r3
 800a174:	6a38      	ldr	r0, [r7, #32]
 800a176:	f7fd fe07 	bl	8007d88 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a17a:	6a3a      	ldr	r2, [r7, #32]
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	4413      	add	r3, r2
 800a180:	623b      	str	r3, [r7, #32]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18a:	441a      	add	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a198:	441a      	add	r2, r3
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f47f aed2 	bne.w	8009f52 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3730      	adds	r7, #48	; 0x30
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08a      	sub	sp, #40	; 0x28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
 800a1c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f7ff fb91 	bl	80098f8 <validate>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a1da:	7dfb      	ldrb	r3, [r7, #23]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <f_write+0x2c>
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
 800a1e2:	e192      	b.n	800a50a <f_write+0x352>
	if (fp->err)							/* Check error */
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a1f4:	e189      	b.n	800a50a <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a1fc:	f003 0302 	and.w	r3, r3, #2
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a204:	2307      	movs	r3, #7
 800a206:	e180      	b.n	800a50a <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	441a      	add	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a218:	429a      	cmp	r2, r3
 800a21a:	f080 8158 	bcs.w	800a4ce <f_write+0x316>
 800a21e:	2300      	movs	r3, #0
 800a220:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800a222:	e154      	b.n	800a4ce <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f040 8114 	bne.w	800a45c <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a23a:	0a5b      	lsrs	r3, r3, #9
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a244:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a248:	3b01      	subs	r3, #1
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	4013      	ands	r3, r2
 800a24e:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800a250:	7dbb      	ldrb	r3, [r7, #22]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d151      	bne.n	800a2fa <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10f      	bne.n	800a280 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a266:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d121      	bne.n	800a2b2 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a274:	2100      	movs	r1, #0
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fb19 	bl	80088ae <create_chain>
 800a27c:	6278      	str	r0, [r7, #36]	; 0x24
 800a27e:	e018      	b.n	800a2b2 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a286:	2b00      	cmp	r3, #0
 800a288:	d008      	beq.n	800a29c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a290:	4619      	mov	r1, r3
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f7fe fba8 	bl	80089e8 <clmt_clust>
 800a298:	6278      	str	r0, [r7, #36]	; 0x24
 800a29a:	e00a      	b.n	800a2b2 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	f7fe faff 	bl	80088ae <create_chain>
 800a2b0:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 810f 	beq.w	800a4d8 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d105      	bne.n	800a2cc <f_write+0x114>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	e11e      	b.n	800a50a <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d2:	d105      	bne.n	800a2e0 <f_write+0x128>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e114      	b.n	800a50a <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d103      	bne.n	800a2fa <f_write+0x142>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a304:	2b00      	cmp	r3, #0
 800a306:	d01d      	beq.n	800a344 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a30e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a312:	68f9      	ldr	r1, [r7, #12]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a31a:	2301      	movs	r3, #1
 800a31c:	f7fd fcf6 	bl	8007d0c <disk_write>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d005      	beq.n	800a332 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2201      	movs	r2, #1
 800a32a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a32e:	2301      	movs	r3, #1
 800a330:	e0eb      	b.n	800a50a <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a350:	4619      	mov	r1, r3
 800a352:	4610      	mov	r0, r2
 800a354:	f7fe f868 	bl	8008428 <clust2sect>
 800a358:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d105      	bne.n	800a36c <f_write+0x1b4>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2202      	movs	r2, #2
 800a364:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a368:	2302      	movs	r3, #2
 800a36a:	e0ce      	b.n	800a50a <f_write+0x352>
			sect += csect;
 800a36c:	7dbb      	ldrb	r3, [r7, #22]
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	4413      	add	r3, r2
 800a372:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	0a5b      	lsrs	r3, r3, #9
 800a378:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d048      	beq.n	800a412 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a380:	7dba      	ldrb	r2, [r7, #22]
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	4413      	add	r3, r2
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a38c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a390:	4293      	cmp	r3, r2
 800a392:	d908      	bls.n	800a3a6 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a39a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a39e:	461a      	mov	r2, r3
 800a3a0:	7dbb      	ldrb	r3, [r7, #22]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a3ac:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	69b9      	ldr	r1, [r7, #24]
 800a3b6:	f7fd fca9 	bl	8007d0c <disk_write>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d005      	beq.n	800a3cc <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e09e      	b.n	800a50a <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	69fa      	ldr	r2, [r7, #28]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d916      	bls.n	800a40a <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	025b      	lsls	r3, r3, #9
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	f7fd fcc8 	bl	8007d88 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a3fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a402:	b2da      	uxtb	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	025b      	lsls	r3, r3, #9
 800a40e:	623b      	str	r3, [r7, #32]
				continue;
 800a410:	e047      	b.n	800a4a2 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d01a      	beq.n	800a454 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d212      	bcs.n	800a454 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a434:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a438:	68f9      	ldr	r1, [r7, #12]
 800a43a:	2301      	movs	r3, #1
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	f7fd fc45 	bl	8007ccc <disk_read>
 800a442:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800a444:	2b00      	cmp	r3, #0
 800a446:	d005      	beq.n	800a454 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a450:	2301      	movs	r3, #1
 800a452:	e05a      	b.n	800a50a <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a466:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a46a:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800a46c:	6a3a      	ldr	r2, [r7, #32]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	429a      	cmp	r2, r3
 800a472:	d901      	bls.n	800a478 <f_write+0x2c0>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	4413      	add	r3, r2
 800a486:	6a3a      	ldr	r2, [r7, #32]
 800a488:	69b9      	ldr	r1, [r7, #24]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fd fc7c 	bl	8007d88 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a49a:	b2da      	uxtb	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800a4a2:	69ba      	ldr	r2, [r7, #24]
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	61bb      	str	r3, [r7, #24]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a4b0:	6a3b      	ldr	r3, [r7, #32]
 800a4b2:	441a      	add	r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	441a      	add	r2, r3
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f47f aea7 	bne.w	800a224 <f_write+0x6c>
 800a4d6:	e000      	b.n	800a4da <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a4d8:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d905      	bls.n	800a4f6 <f_write+0x33e>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a4fc:	f043 0320 	orr.w	r3, r3, #32
 800a500:	b2da      	uxtb	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3728      	adds	r7, #40	; 0x28
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b086      	sub	sp, #24
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7ff f9ec 	bl	80098f8 <validate>
 800a520:	4603      	mov	r3, r0
 800a522:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a524:	7dfb      	ldrb	r3, [r7, #23]
 800a526:	2b00      	cmp	r3, #0
 800a528:	f040 80a8 	bne.w	800a67c <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a532:	f003 0320 	and.w	r3, r3, #32
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 80a0 	beq.w	800a67c <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a546:	2b00      	cmp	r3, #0
 800a548:	d019      	beq.n	800a57e <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a550:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a554:	6879      	ldr	r1, [r7, #4]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a55c:	2301      	movs	r3, #1
 800a55e:	f7fd fbd5 	bl	8007d0c <disk_write>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800a568:	2301      	movs	r3, #1
 800a56a:	e088      	b.n	800a67e <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a576:	b2da      	uxtb	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800a58a:	4619      	mov	r1, r3
 800a58c:	4610      	mov	r0, r2
 800a58e:	f7fd fe70 	bl	8008272 <move_window>
 800a592:	4603      	mov	r3, r0
 800a594:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d16f      	bne.n	800a67c <f_sync+0x16a>
				dir = fp->dir_ptr;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a5a2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	330b      	adds	r3, #11
 800a5a8:	781a      	ldrb	r2, [r3, #0]
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	330b      	adds	r3, #11
 800a5ae:	f042 0220 	orr.w	r2, r2, #32
 800a5b2:	b2d2      	uxtb	r2, r2
 800a5b4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	331c      	adds	r3, #28
 800a5c0:	b2d2      	uxtb	r2, r2
 800a5c2:	701a      	strb	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	0a1b      	lsrs	r3, r3, #8
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	331d      	adds	r3, #29
 800a5d4:	b2d2      	uxtb	r2, r2
 800a5d6:	701a      	strb	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a5de:	0c1a      	lsrs	r2, r3, #16
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	331e      	adds	r3, #30
 800a5e4:	b2d2      	uxtb	r2, r2
 800a5e6:	701a      	strb	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a5ee:	0e1a      	lsrs	r2, r3, #24
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	331f      	adds	r3, #31
 800a5f4:	b2d2      	uxtb	r2, r2
 800a5f6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a5fe:	4619      	mov	r1, r3
 800a600:	6938      	ldr	r0, [r7, #16]
 800a602:	f7fe fc27 	bl	8008e54 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800a606:	f7fd fabf 	bl	8007b88 <get_fattime>
 800a60a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	3316      	adds	r3, #22
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	b2d2      	uxtb	r2, r2
 800a614:	701a      	strb	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	0a1b      	lsrs	r3, r3, #8
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	3317      	adds	r3, #23
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	701a      	strb	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	0c1a      	lsrs	r2, r3, #16
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	3318      	adds	r3, #24
 800a62e:	b2d2      	uxtb	r2, r2
 800a630:	701a      	strb	r2, [r3, #0]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	0e1a      	lsrs	r2, r3, #24
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3319      	adds	r3, #25
 800a63a:	b2d2      	uxtb	r2, r2
 800a63c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	3312      	adds	r3, #18
 800a642:	2200      	movs	r2, #0
 800a644:	701a      	strb	r2, [r3, #0]
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	3313      	adds	r3, #19
 800a64a:	2200      	movs	r2, #0
 800a64c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a654:	f023 0320 	bic.w	r3, r3, #32
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a672:	4618      	mov	r0, r3
 800a674:	f7fd fe2b 	bl	80082ce <sync_fs>
 800a678:	4603      	mov	r3, r0
 800a67a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800a67c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3718      	adds	r7, #24
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff ff3f 	bl	800a512 <f_sync>
 800a694:	4603      	mov	r3, r0
 800a696:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d116      	bne.n	800a6cc <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f7ff f92a 	bl	80098f8 <validate>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10e      	bne.n	800a6cc <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fd fd25 	bl	8008104 <dec_lock>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d103      	bne.n	800a6cc <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b088      	sub	sp, #32
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a6ea:	e01b      	b.n	800a724 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a6ec:	f107 0310 	add.w	r3, r7, #16
 800a6f0:	f107 0114 	add.w	r1, r7, #20
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7ff fbf3 	bl	8009ee2 <f_read>
		if (rc != 1) break;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d116      	bne.n	800a730 <f_gets+0x5a>
		c = s[0];
 800a702:	7d3b      	ldrb	r3, [r7, #20]
 800a704:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a706:	7dfb      	ldrb	r3, [r7, #23]
 800a708:	2b0d      	cmp	r3, #13
 800a70a:	d100      	bne.n	800a70e <f_gets+0x38>
 800a70c:	e00a      	b.n	800a724 <f_gets+0x4e>
		*p++ = c;
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	1c5a      	adds	r2, r3, #1
 800a712:	61ba      	str	r2, [r7, #24]
 800a714:	7dfa      	ldrb	r2, [r7, #23]
 800a716:	701a      	strb	r2, [r3, #0]
		n++;
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	3301      	adds	r3, #1
 800a71c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	2b0a      	cmp	r3, #10
 800a722:	d007      	beq.n	800a734 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	3b01      	subs	r3, #1
 800a728:	69fa      	ldr	r2, [r7, #28]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	dbde      	blt.n	800a6ec <f_gets+0x16>
 800a72e:	e002      	b.n	800a736 <f_gets+0x60>
		if (rc != 1) break;
 800a730:	bf00      	nop
 800a732:	e000      	b.n	800a736 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a734:	bf00      	nop
	}
	*p = 0;
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	2200      	movs	r2, #0
 800a73a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <f_gets+0x70>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	e000      	b.n	800a748 <f_gets+0x72>
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3720      	adds	r7, #32
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	460b      	mov	r3, r1
 800a75a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800a75c:	78fb      	ldrb	r3, [r7, #3]
 800a75e:	2b0a      	cmp	r3, #10
 800a760:	d103      	bne.n	800a76a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a762:	210d      	movs	r1, #13
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff fff3 	bl	800a750 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2b00      	cmp	r3, #0
 800a774:	db25      	blt.n	800a7c2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	60fa      	str	r2, [r7, #12]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	4413      	add	r3, r2
 800a780:	78fa      	ldrb	r2, [r7, #3]
 800a782:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b3c      	cmp	r3, #60	; 0x3c
 800a788:	dd12      	ble.n	800a7b0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6818      	ldr	r0, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f103 010c 	add.w	r1, r3, #12
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	f107 0308 	add.w	r3, r7, #8
 800a79a:	f7ff fd0d 	bl	800a1b8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d101      	bne.n	800a7aa <putc_bfd+0x5a>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e001      	b.n	800a7ae <putc_bfd+0x5e>
 800a7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ae:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	1c5a      	adds	r2, r3, #1
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	609a      	str	r2, [r3, #8]
 800a7c0:	e000      	b.n	800a7c4 <putc_bfd+0x74>
	if (i < 0) return;
 800a7c2:	bf00      	nop
}
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a7ca:	b590      	push	{r4, r7, lr}
 800a7cc:	b097      	sub	sp, #92	; 0x5c
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	613b      	str	r3, [r7, #16]
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800a7e0:	e009      	b.n	800a7f6 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	781a      	ldrb	r2, [r3, #0]
 800a7ea:	f107 030c 	add.w	r3, r7, #12
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff ffad 	bl	800a750 <putc_bfd>
	while (*str)			/* Put the string */
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1f1      	bne.n	800a7e2 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2b00      	cmp	r3, #0
 800a802:	db15      	blt.n	800a830 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	461c      	mov	r4, r3
 800a80a:	f107 0208 	add.w	r2, r7, #8
 800a80e:	f107 030c 	add.w	r3, r7, #12
 800a812:	f103 010c 	add.w	r1, r3, #12
 800a816:	4613      	mov	r3, r2
 800a818:	4622      	mov	r2, r4
 800a81a:	f7ff fccd 	bl	800a1b8 <f_write>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d105      	bne.n	800a830 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	4293      	cmp	r3, r2
 800a82a:	d101      	bne.n	800a830 <f_puts+0x66>
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	e001      	b.n	800a834 <f_puts+0x6a>
	return EOF;
 800a830:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a834:	4618      	mov	r0, r3
 800a836:	375c      	adds	r7, #92	; 0x5c
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd90      	pop	{r4, r7, pc}

0800a83c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	4613      	mov	r3, r2
 800a848:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a84a:	2301      	movs	r3, #1
 800a84c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a852:	4b1e      	ldr	r3, [pc, #120]	; (800a8cc <FATFS_LinkDriverEx+0x90>)
 800a854:	7a5b      	ldrb	r3, [r3, #9]
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d831      	bhi.n	800a8c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a85c:	4b1b      	ldr	r3, [pc, #108]	; (800a8cc <FATFS_LinkDriverEx+0x90>)
 800a85e:	7a5b      	ldrb	r3, [r3, #9]
 800a860:	b2db      	uxtb	r3, r3
 800a862:	461a      	mov	r2, r3
 800a864:	4b19      	ldr	r3, [pc, #100]	; (800a8cc <FATFS_LinkDriverEx+0x90>)
 800a866:	2100      	movs	r1, #0
 800a868:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a86a:	4b18      	ldr	r3, [pc, #96]	; (800a8cc <FATFS_LinkDriverEx+0x90>)
 800a86c:	7a5b      	ldrb	r3, [r3, #9]
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	4a16      	ldr	r2, [pc, #88]	; (800a8cc <FATFS_LinkDriverEx+0x90>)
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4413      	add	r3, r2
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a87a:	4b14      	ldr	r3, [pc, #80]	; (800a8cc <FATFS_LinkDriverEx+0x90>)
 800a87c:	7a5b      	ldrb	r3, [r3, #9]
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	461a      	mov	r2, r3
 800a882:	4b12      	ldr	r3, [pc, #72]	; (800a8cc <FATFS_LinkDriverEx+0x90>)
 800a884:	4413      	add	r3, r2
 800a886:	79fa      	ldrb	r2, [r7, #7]
 800a888:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a88a:	4b10      	ldr	r3, [pc, #64]	; (800a8cc <FATFS_LinkDriverEx+0x90>)
 800a88c:	7a5b      	ldrb	r3, [r3, #9]
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	1c5a      	adds	r2, r3, #1
 800a892:	b2d1      	uxtb	r1, r2
 800a894:	4a0d      	ldr	r2, [pc, #52]	; (800a8cc <FATFS_LinkDriverEx+0x90>)
 800a896:	7251      	strb	r1, [r2, #9]
 800a898:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a89a:	7dbb      	ldrb	r3, [r7, #22]
 800a89c:	3330      	adds	r3, #48	; 0x30
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	223a      	movs	r2, #58	; 0x3a
 800a8aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	3302      	adds	r3, #2
 800a8b0:	222f      	movs	r2, #47	; 0x2f
 800a8b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	3303      	adds	r3, #3
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a8c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	371c      	adds	r7, #28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bc80      	pop	{r7}
 800a8ca:	4770      	bx	lr
 800a8cc:	20001248 	.word	0x20001248

0800a8d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a8da:	2200      	movs	r2, #0
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f7ff ffac 	bl	800a83c <FATFS_LinkDriverEx>
 800a8e4:	4603      	mov	r3, r0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
	...

0800a8f0 <__libc_init_array>:
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	2600      	movs	r6, #0
 800a8f4:	4d0c      	ldr	r5, [pc, #48]	; (800a928 <__libc_init_array+0x38>)
 800a8f6:	4c0d      	ldr	r4, [pc, #52]	; (800a92c <__libc_init_array+0x3c>)
 800a8f8:	1b64      	subs	r4, r4, r5
 800a8fa:	10a4      	asrs	r4, r4, #2
 800a8fc:	42a6      	cmp	r6, r4
 800a8fe:	d109      	bne.n	800a914 <__libc_init_array+0x24>
 800a900:	f000 f822 	bl	800a948 <_init>
 800a904:	2600      	movs	r6, #0
 800a906:	4d0a      	ldr	r5, [pc, #40]	; (800a930 <__libc_init_array+0x40>)
 800a908:	4c0a      	ldr	r4, [pc, #40]	; (800a934 <__libc_init_array+0x44>)
 800a90a:	1b64      	subs	r4, r4, r5
 800a90c:	10a4      	asrs	r4, r4, #2
 800a90e:	42a6      	cmp	r6, r4
 800a910:	d105      	bne.n	800a91e <__libc_init_array+0x2e>
 800a912:	bd70      	pop	{r4, r5, r6, pc}
 800a914:	f855 3b04 	ldr.w	r3, [r5], #4
 800a918:	4798      	blx	r3
 800a91a:	3601      	adds	r6, #1
 800a91c:	e7ee      	b.n	800a8fc <__libc_init_array+0xc>
 800a91e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a922:	4798      	blx	r3
 800a924:	3601      	adds	r6, #1
 800a926:	e7f2      	b.n	800a90e <__libc_init_array+0x1e>
 800a928:	0800c02c 	.word	0x0800c02c
 800a92c:	0800c02c 	.word	0x0800c02c
 800a930:	0800c02c 	.word	0x0800c02c
 800a934:	0800c030 	.word	0x0800c030

0800a938 <memset>:
 800a938:	4603      	mov	r3, r0
 800a93a:	4402      	add	r2, r0
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d100      	bne.n	800a942 <memset+0xa>
 800a940:	4770      	bx	lr
 800a942:	f803 1b01 	strb.w	r1, [r3], #1
 800a946:	e7f9      	b.n	800a93c <memset+0x4>

0800a948 <_init>:
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94a:	bf00      	nop
 800a94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94e:	bc08      	pop	{r3}
 800a950:	469e      	mov	lr, r3
 800a952:	4770      	bx	lr

0800a954 <_fini>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	bf00      	nop
 800a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95a:	bc08      	pop	{r3}
 800a95c:	469e      	mov	lr, r3
 800a95e:	4770      	bx	lr
